<?xml version="1.0" encoding="utf-8"?>
<snippets>
  <snippet group="QML" trigger="Abstract3DSeries" complement="Abstract3DSeries">Abstract3DSeries{
    //baseColor: color
    //baseGradient: ColorGradient
    //colorStyle: Theme3D.ColorStyle
    //itemLabel: string
    //itemLabelFormat: string
    //itemLabelVisible: bool
    //mesh: Abstract3DSeries.Mesh
    //meshRotation: quaternion
    //meshSmooth: bool
    //multiHighlightColor: color
    //multiHighlightGradient: ColorGradient
    //name: string
    //singleHighlightColor: color
    //singleHighlightGradient: ColorGradient
    //type: Abstract3DSeries.SeriesType
    //userDefinedMesh: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="AbstractActionInput" complement="AbstractActionInput">AbstractActionInput{
}</snippet>
  <snippet group="QML" trigger="AbstractAnimation" complement="AbstractAnimation">AbstractAnimation{
    //animationName: string
    //animationType: enumeration
    //duration: real
    //position: real
}</snippet>
  <snippet group="QML" trigger="AbstractAxis" complement="AbstractAxis">AbstractAxis{
    //alignment: alignment
    //color: color
    //gridLineColor: color
    //gridVisible: bool
    //labelsAngle: int
    //labelsColor: color
    //labelsFont: font
    //labelsVisible: bool
    //lineVisible: bool
    //minorGridLineColor: color
    //minorGridVisible: bool
    //orientation: Qt.Orientation
    //reverse: alignment
    //shadesBorderColor: color
    //shadesColor: color
    //shadesVisible: bool
    //titleFont: font
    //titleText: string
    //titleVisible: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="AbstractAxis3D" complement="AbstractAxis3D">AbstractAxis3D{
    //autoAdjustRange: bool
    //labelAutoRotation: real
    //labels: list
    //max: real
    //min: real
    //orientation: AbstractAxis3D.AxisOrientation
    //title: string
    //titleFixed: bool
    //titleVisible: bool
    //type: AbstractAxis3D.AxisType
}</snippet>
  <snippet group="QML" trigger="AbstractAxisInput" complement="AbstractAxisInput">AbstractAxisInput{
    //sourceDevice: AbstractPhysicalDevice
}</snippet>
  <snippet group="QML" trigger="AbstractBarSeries" complement="AbstractBarSeries">AbstractBarSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //barWidth: real
    //count: int
    //labelsAngle: real
    //labelsFormat: string
    //labelsPosition: enumeration
    //labelsPrecision: real
    //labelsVisible: bool
    //barsetsAdded()
    //barsetsRemoved()
    //clear()
    //clicked(intindex,BarSetbarset)
    //doubleClicked(intindex,BarSetbarset)
    //hovered(boolstatus,intindex,BarSetbarset)
    //pressed(intindex,BarSetbarset)
    //released(intindex,BarSetbarset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="AbstractButton" complement="AbstractButton">AbstractButton{
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="AbstractClipAnimator" complement="AbstractClipAnimator">AbstractClipAnimator{
    //loops: int
}</snippet>
  <snippet group="QML" trigger="AbstractClipBlendNode" complement="AbstractClipBlendNode">AbstractClipBlendNode{
}</snippet>
  <snippet group="QML" trigger="AbstractDataProxy" complement="AbstractDataProxy">AbstractDataProxy{
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="AbstractGraph3D" complement="AbstractGraph3D">AbstractGraph3D{
    //aspectRatio: real
    //currentFps: int
    //customItemList: list&lt;Custom3DItem&gt;
    //horizontalAspectRatio: real
    //inputHandler: AbstractInputHandler3D
    //locale: locale
    //margin: real
    //measureFps: bool
    //msaaSamples: int
    //optimizationHints: AbstractGraph3D.OptimizationHints
    //orthoProjection: bool
    //polar: bool
    //queriedGraphPosition: vector3d
    //radialLabelOffset: real
    //reflection: bool
    //reflectivity: real
    //renderingMode: AbstractGraph3D.RenderingMode
    //scene: Scene3D
    //selectedElement: AbstractGraph3D.ElementType
    //selectionMode: AbstractGraph3D.SelectionMode
    //shadowQuality: AbstractGraph3D.ShadowQuality
    //shadowsSupported: bool
    //theme: Theme3D
}</snippet>
  <snippet group="QML" trigger="AbstractInputHandler3D" complement="AbstractInputHandler3D">AbstractInputHandler3D{
}</snippet>
  <snippet group="QML" trigger="AbstractPhysicalDevice" complement="AbstractPhysicalDevice">AbstractPhysicalDevice{
}</snippet>
  <snippet group="QML" trigger="AbstractRayCaster" complement="AbstractRayCaster">AbstractRayCaster{
    //filterMode: enumeration
    //hits: array
    //runMode: enumeration
}</snippet>
  <snippet group="QML" trigger="AbstractSeries" complement="AbstractSeries">AbstractSeries{
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="AbstractSkeleton" complement="AbstractSkeleton">AbstractSkeleton{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="AbstractTextureImage" complement="AbstractTextureImage">AbstractTextureImage{
    //face: enumeration
    //layer: int
    //mipLevel: int
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Accelerometer" complement="Accelerometer">Accelerometer{
    //accelerationMode: AccelerationMode
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="AccelerometerReading" complement="AccelerometerReading">AccelerometerReading{
    //x: qreal
    //y: qreal
    //z: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="Accessible" complement="Accessible">Accessible{
    //checkStateMixed: bool
    //checkable: bool
    //checked: bool
    //defaultButton: bool
    //description: string
    //editable: bool
    //focusable: bool
    //focused: bool
    //ignored: bool
    //multiLine: bool
    //name: string
    //passwordEdit: bool
    //pressed: bool
    //readOnly: bool
    //role: enumeration
    //searchEdit: bool
    //selectable: bool
    //selectableText: bool
    //selected: bool
    //decreaseAction()
    //increaseAction()
    //nextPageAction()
    //pressAction()
    //previousPageAction()
    //scrollDownAction()
    //scrollLeftAction()
    //scrollRightAction()
    //scrollUpAction()
    //toggleAction()
}</snippet>
  <snippet group="QML" trigger="Action" complement="Action">Action{
    //checkable: bool
    //checked: bool
    //enabled: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //shortcut: keysequence
    //text: string
    //toggled(QtObjectsource)
    //triggered(QtObjectsource)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ActionGroup" complement="ActionGroup">ActionGroup{
    //actions: list&lt;Action&gt;
    //checkedAction: Action
    //enabled: bool
    //exclusive: bool
    //onGroup : Actiongro: { }
    //triggered(Actionaction)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ActionInput" complement="ActionInput">ActionInput{
    //buttons: list&lt;int&gt;
    //sourceDevice: AbstractPhysicalDevice
    //buttonsChanged(constQVector&lt;int&gt;&amp;buttons)
    //sourceDeviceChanged()
}</snippet>
  <snippet group="QML" trigger="AdditiveClipBlend" complement="AdditiveClipBlend">AdditiveClipBlend{
    //additiveClip: AbstractClipBlendNode
    //additiveFactor: real
    //baseClip: AbstractClipBlendNode
}</snippet>
  <snippet group="QML" trigger="Address" complement="Address">Address{
    //address: QGeoAddress
    //city: string
    //country: string
    //countryCode: string
    //county: string
    //district: string
    //isTextGenerated: bool
    //postalCode: string
    //state: string
    //street: string
    //text: string
}</snippet>
  <snippet group="QML" trigger="Affector" complement="Affector">Affector{
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="Age" complement="Age">Age{
    //advancePosition: bool
    //lifeLeft: int
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="AlphaCoverage" complement="AlphaCoverage">AlphaCoverage{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="AlphaTest" complement="AlphaTest">AlphaTest{
    //alphaFunction: enumeration
    //referenceValue: real
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Altimeter" complement="Altimeter">Altimeter{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="AltimeterReading" complement="AltimeterReading">AltimeterReading{
    //altitude: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="AmbientLightReading" complement="AmbientLightReading">AmbientLightReading{
    //lightLevel: LightLevel
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="AmbientLightSensor" complement="AmbientLightSensor">AmbientLightSensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="AmbientTemperatureReading" complement="AmbientTemperatureReading">AmbientTemperatureReading{
    //temperature: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="AmbientTemperatureSensor" complement="AmbientTemperatureSensor">AmbientTemperatureSensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="AnalogAxisInput" complement="AnalogAxisInput">AnalogAxisInput{
    //axis: int
}</snippet>
  <snippet group="QML" trigger="AnchorAnimation" complement="AnchorAnimation">AnchorAnimation{
    //duration: int
    //easing.amplitude: real
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //targets: list&lt;Item&gt;
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="AnchorChanges" complement="AnchorChanges">AnchorChanges{
    //anchors.baseline: AnchorLine
    //anchors.bottom: AnchorLine
    //anchors.horizontalCenter: AnchorLine
    //anchors.left: AnchorLine
    //anchors.right: AnchorLine
    //anchors.top: AnchorLine
    //anchors.verticalCenter: AnchorLine
    //target: Item
}</snippet>
  <snippet group="QML" trigger="AngleDirection" complement="AngleDirection">AngleDirection{
    //angle: real
    //angleVariation: real
    //magnitude: real
    //magnitudeVariation: real
}</snippet>
  <snippet group="QML" trigger="AnimatedImage" complement="AnimatedImage">AnimatedImage{
    //currentFrame: int
    //frameCount: int
    //paused: bool
    //playing: bool
    //source: url
    //speed: real
    //asynchronous: bool
    //autoTransform: bool
    //cache: bool
    //fillMode: enumeration
    //horizontalAlignment: enumeration
    //mipmap: bool
    //mirror: bool
    //paintedHeight: real
    //paintedWidth: real
    //progress: real
    //smooth: bool
    //source: url
    //sourceSize: QSize
    //status: enumeration
    //verticalAlignment: enumeration
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="AnimatedSprite" complement="AnimatedSprite">AnimatedSprite{
    //currentFrame: int
    //frameCount: int
    //frameDuration: int
    //frameHeight: int
    //frameRate: qreal
    //frameSync: bool
    //frameWidth: int
    //frameX: int
    //frameY: int
    //interpolate: bool
    //loops: int
    //paused: bool
    //reverse: bool
    //running: bool
    //source: url
    //finished()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Animation" complement="Animation">Animation{
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="AnimationController" complement="AnimationController">AnimationController{
    //activeAnimationGroup: int
    //animationGroups: list&lt;AnimationGroup&gt;
    //entity: Entity
    //position: real
    //positionOffset: real
    //positionScale: real
    //recursive: bool
}</snippet>
  <snippet group="QML" trigger="AnimationGroup" complement="AnimationGroup">AnimationGroup{
    //animations: list&lt;AbstractAnimation&gt;
    //duration: real
    //name: string
    //position: real
}</snippet>
  <snippet group="QML" trigger="Animator" complement="Animator">Animator{
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //from: real
    //target: QtQuick: : Item
    //to: real
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="ApplicationWindow" complement="ApplicationWindow">ApplicationWindow{
    //onActivefocuscontrol : Contr: { }
    //activeFocusControl: Control
    //background: Item
    //contentData: list&lt;Object&gt;
    //onContentitem : It: { }
    //contentItem: Item
    //font: font
    //onFooter : It: { }
    //footer: Item
    //onHeader : It: { }
    //header: Item
    //locale: Locale
    //onMenubar : It: { }
    //menuBar: Item
    //onOverlay : Item (Obsolet: { }
    //overlay: Item
    //overlay.modal: Component
    //overlay.modeless: Component
    //palette: palette
    //onWindow : Applicationwind: { }
    //active: bool
    //onActive : Bo: { }
    //onActivefocusitem : It: { }
    //activeFocusItem: Item
    //color: color
    //contentItem: Item
    //onContentitem : It: { }
    //contentOrientation: Qt: : ScreenOrientation
    //data: list&lt;Object&gt;
    //flags: Qt: : WindowFlags
    //height: int
    //onHeight : I: { }
    //maximumHeight: int
    //maximumWidth: int
    //minimumHeight: int
    //minimumWidth: int
    //modality: Qt: : WindowModality
    //opacity: real
    //screen: variant
    //title: string
    //visibility: QWindow: : Visibility
    //onVisibility : Qwindow::Visibili: { }
    //visible: bool
    //onWidth : I: { }
    //width: int
    //onWindow : Wind: { }
    //x: int
    //y: int
    //alert()
    //close()
    //closing()
    //hide()
    //lower()
    //raise()
    //requestActivate()
    //show()
    //showFullScreen()
    //showMaximized()
    //showMinimized()
    //showNormal()
}</snippet>
  <snippet group="QML" trigger="ApplicationWindowStyle" complement="ApplicationWindowStyle">ApplicationWindowStyle{
    //background: Component
    //control: ApplicationWindow
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="AreaSeries" complement="AreaSeries">AreaSeries{
    //axisAngular: AbstractAxis
    //axisRadial: AbstractAxis
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //borderColor: color
    //borderWidth: real
    //brushFilename: QString
    //color: color
    //lowerSeries: LineSeries
    //pointLabelsClipping: bool
    //pointLabelsColor: font
    //pointLabelsFont: font
    //pointLabelsFormat: string
    //pointLabelsVisible: bool
    //upperSeries: LineSeries
    //clicked(pointpoint)
    //doubleClicked(pointpoint)
    //hovered(pointpoint,boolstate)
    //pressed(pointpoint)
    //released(pointpoint)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="Armature" complement="Armature">Armature{
    //skeleton: AbstractSkeleton
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="AttenuationModelInverse" complement="AttenuationModelInverse">AttenuationModelInverse{
    //end: real
    //name: string
    //rolloff: real
    //start: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="AttenuationModelLinear" complement="AttenuationModelLinear">AttenuationModelLinear{
    //end: real
    //name: string
    //start: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Attractor" complement="Attractor">Attractor{
    //affectedParameter: AffectableParameter
    //proportionalToDistance: Proportion
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="Attribute" complement="Attribute">Attribute{
}</snippet>
  <snippet group="QML" trigger="Audio" complement="Audio">Audio{
    //audioRole: enumeration
    //autoLoad: bool
    //autoPlay: bool
    //availability: enumeration
    //bufferProgress: real
    //customAudioRole: string
    //duration: int
    //error: enumeration
    //errorString: string
    //hasAudio: bool
    //hasVideo: bool
    //loops: int
    //mediaObject: variant
    //metaData.albumArtist: variant
    //metaData.albumTitle: variant
    //metaData.audioBitRate: variant
    //metaData.audioCodec: variant
    //metaData.author: variant
    //metaData.averageLevel: variant
    //metaData.category: variant
    //metaData.channelCount: variant
    //metaData.chapterNumber: variant
    //metaData.comment: variant
    //metaData.composer: variant
    //metaData.conductor: variant
    //metaData.contributingArtist: variant
    //metaData.copyright: variant
    //metaData.coverArtUrlLarge: variant
    //metaData.coverArtUrlSmall: variant
    //metaData.date: variant
    //metaData.description: variant
    //metaData.director: variant
    //metaData.genre: variant
    //metaData.keywords: variant
    //metaData.language: variant
    //metaData.leadPerformer: variant
    //metaData.lyrics: variant
    //metaData.mediaType: variant
    //metaData.mood: variant
    //metaData.parentalRating: variant
    //metaData.peakValue: variant
    //metaData.pixelAspectRatio: variant
    //metaData.posterUrl: variant
    //metaData.publisher: variant
    //metaData.ratingOrganization: variant
    //metaData.resolution: variant
    //metaData.sampleRate: variant
    //metaData.size: variant
    //metaData.subTitle: variant
    //metaData.title: variant
    //metaData.trackCount: variant
    //metaData.trackNumber: variant
    //metaData.userRating: variant
    //metaData.videoBitRate: variant
    //metaData.videoCodec: variant
    //metaData.videoFrameRate: variant
    //metaData.writer: variant
    //metaData.year: variant
    //muted: bool
    //notifyInterval: int
    //playbackRate: real
    //playbackState: enumeration
    //playlist: Playlist
    //position: int
    //seekable: bool
    //source: url
    //status: enumeration
    //volume: real
    //error(error,errorString)
    //pause()
    //paused()
    //play()
    //playbackStateChanged()
    //playing()
    //seek(offset)
    //stop()
    //stopped()
    //list&lt;int&gt;supportedAudioRoles()
}</snippet>
  <snippet group="QML" trigger="AudioCategory" complement="AudioCategory">AudioCategory{
    //name: string
    //volume: real
    //pause()
    //pause()
    //stop()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="AudioEngine" complement="AudioEngine">AudioEngine{
    //categories: map
    //dopplerFactor: real
    //listener: QtAudioEngine: : AudioListener
    //liveInstances: int
    //loading: bool
    //samples: map
    //sounds: map
    //speedOfSound: real
    //addAttenuationModel(AttenuationModelattenuationModel)
    //addAudioCategory(AudioCategorycategory)
    //addAudioSample(AudioSamplesample)
    //addSound(Soundsound)
    //finishedLoading()
    //isLoadingChanged()
    //liveInstanceCountChanged()
    //ready()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="AudioListener" complement="AudioListener">AudioListener{
    //direction: vector3d
    //engine: QtAudioEngine: : AudioEngine
    //gain: real
    //position: vector3d
    //up: vector3d
    //velocity: vector3d
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="AudioSample" complement="AudioSample">AudioSample{
    //loaded: bool
    //name: string
    //preloaded: bool
    //source: url
    //loadedChanged()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="AuthenticationDialogRequest" complement="AuthenticationDialogRequest">AuthenticationDialogRequest{
    //accepted: bool
    //proxyHost: string
    //realm: string
    //type: enumeration
    //url: url
}</snippet>
  <snippet group="QML" trigger="Axis" complement="Axis">Axis{
    //buttons: QVariantList
    //inputs: list&lt;AbstractAxisInput&gt;
    //scale: real
    //value: int
    //velocity: real
}</snippet>
  <snippet group="QML" trigger="AxisAccumulator" complement="AxisAccumulator">AxisAccumulator{
    //sourceAxis: Axis
    //sourceAxisType: SourceAxisType
    //value: real
}</snippet>
  <snippet group="QML" trigger="AxisSetting" complement="AxisSetting">AxisSetting{
    //axes: list&lt;int&gt;
    //axis: QVariantList
    //deadZoneRadius: float
    //smooth: bool
    //axisChanged()
    //deadZoneRadiusChanged()
    //smoothChanged()
}</snippet>
  <snippet group="QML" trigger="BackspaceKey" complement="BackspaceKey">BackspaceKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Bar3DSeries" complement="Bar3DSeries">Bar3DSeries{
    //dataProxy: BarDataProxy
    //invalidSelectionPosition: point
    //meshAngle: real
    //selectedBar: point
    //baseColor: color
    //baseGradient: ColorGradient
    //colorStyle: Theme3D.ColorStyle
    //itemLabel: string
    //itemLabelFormat: string
    //itemLabelVisible: bool
    //mesh: Abstract3DSeries.Mesh
    //meshRotation: quaternion
    //meshSmooth: bool
    //multiHighlightColor: color
    //multiHighlightGradient: ColorGradient
    //name: string
    //singleHighlightColor: color
    //singleHighlightGradient: ColorGradient
    //type: Abstract3DSeries.SeriesType
    //userDefinedMesh: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="BarCategoryAxis" complement="BarCategoryAxis">BarCategoryAxis{
    //categories: QStringList
    //count: int
    //max: string
    //min: string
    //rangeChanged(stringmin,stringmax)
    //alignment: alignment
    //color: color
    //gridLineColor: color
    //gridVisible: bool
    //labelsAngle: int
    //labelsColor: color
    //labelsFont: font
    //labelsVisible: bool
    //lineVisible: bool
    //minorGridLineColor: color
    //minorGridVisible: bool
    //orientation: Qt.Orientation
    //reverse: alignment
    //shadesBorderColor: color
    //shadesColor: color
    //shadesVisible: bool
    //titleFont: font
    //titleText: string
    //titleVisible: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="BarDataProxy" complement="BarDataProxy">BarDataProxy{
    //columnLabels: list
    //rowCount: int
    //rowLabels: list
    //series: Bar3DSeries
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="BarSeries" complement="BarSeries">BarSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //barWidth: real
    //count: int
    //labelsAngle: real
    //labelsFormat: string
    //labelsPosition: enumeration
    //labelsPrecision: real
    //labelsVisible: bool
    //barsetsAdded()
    //barsetsRemoved()
    //clear()
    //clicked(intindex,BarSetbarset)
    //doubleClicked(intindex,BarSetbarset)
    //hovered(boolstatus,intindex,BarSetbarset)
    //pressed(intindex,BarSetbarset)
    //released(intindex,BarSetbarset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="BarSet" complement="BarSet">BarSet{
    //borderColor: color
    //borderWidth: real
    //brushFilename: string
    //color: color
    //count: int
    //label: string
    //labelColor: color
    //labelFont: font
    //values: QVariantList
    //append(realvalue)
    //at(intindex)
    //clicked(intindex)
    //doubleClicked(intindex)
    //pressed(intindex)
    //released(intindex)
    //remove(intindex,intcount)
    //replace(intindex,realvalue)
    //valueChanged(intindex)
    //valuesAdded(intindex,intcount)
    //valuesRemoved(intindex,intcount)
}</snippet>
  <snippet group="QML" trigger="Bars3D" complement="Bars3D">Bars3D{
    //barSpacing: size
    //barSpacingRelative: bool
    //barThickness: real
    //columnAxis: CategoryAxis3D
    //floorLevel: real
    //multiSeriesUniform: bool
    //primarySeries: Bar3DSeries
    //rowAxis: CategoryAxis3D
    //selectedSeries: Bar3DSeries
    //seriesList: list&lt;Bar3DSeries&gt;
    //valueAxis: ValueAxis3D
    //aspectRatio: real
    //currentFps: int
    //customItemList: list&lt;Custom3DItem&gt;
    //horizontalAspectRatio: real
    //inputHandler: AbstractInputHandler3D
    //locale: locale
    //margin: real
    //measureFps: bool
    //msaaSamples: int
    //optimizationHints: AbstractGraph3D.OptimizationHints
    //orthoProjection: bool
    //polar: bool
    //queriedGraphPosition: vector3d
    //radialLabelOffset: real
    //reflection: bool
    //reflectivity: real
    //renderingMode: AbstractGraph3D.RenderingMode
    //scene: Scene3D
    //selectedElement: AbstractGraph3D.ElementType
    //selectionMode: AbstractGraph3D.SelectionMode
    //shadowQuality: AbstractGraph3D.ShadowQuality
    //shadowsSupported: bool
    //theme: Theme3D
}</snippet>
  <snippet group="QML" trigger="BaseKey" complement="BaseKey">BaseKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Behavior" complement="Behavior">Behavior{
    //animation: Animation
    //enabled: bool
}</snippet>
  <snippet group="QML" trigger="Binding" complement="Binding">Binding{
    //delayed: bool
    //property: string
    //target: Object
    //value: any
    //when: bool
}</snippet>
  <snippet group="QML" trigger="Blend" complement="Blend">Blend{
    //cached: bool
    //foregroundSource: variant
    //mode: string
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="BlendEquation" complement="BlendEquation">BlendEquation{
    //blendFunction: enumeration
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="BlendEquationArguments" complement="BlendEquationArguments">BlendEquationArguments{
    //DestinationAlpha: enumeration
    //bufferIndex: int
    //destinationRgb: enumeration
    //sourceAlpha: enumeration
    //sourceRgb: enumeration
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="BlendedClipAnimator" complement="BlendedClipAnimator">BlendedClipAnimator{
    //blendTree: AbstractClipBlendNode
}</snippet>
  <snippet group="QML" trigger="BlitFramebuffer" complement="BlitFramebuffer">BlitFramebuffer{
    //destination: RenderTarget
    //destinationAttachmentPoint: RenderTargetOutput.AttachmentPoint
    //destinationRect: Rect
    //interpolationMethod: InterpolationMethod
    //source: RenderTarget
    //sourceAttachmentPoint: RenderTargetOutput.AttachmentPoint
    //sourceRect: Rect
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="BluetoothDiscoveryModel" complement="BluetoothDiscoveryModel">BluetoothDiscoveryModel{
    //discoveryMode: enumeration
    //error: enumeration
    //remoteAddress: string
    //running: bool
    //uuidFilter: string
    //deviceDiscovered(stringdevice)
    //serviceDiscovered(BluetoothServiceservice)
}</snippet>
  <snippet group="QML" trigger="BluetoothService" complement="BluetoothService">BluetoothService{
    //deviceAddress: string
    //deviceName: string
    //registered: string
    //serviceDescription: string
    //serviceName: string
    //serviceProtocol: enumeration
    //serviceUuid: string
    //detailsChanged()
}</snippet>
  <snippet group="QML" trigger="BluetoothSocket" complement="BluetoothSocket">BluetoothSocket{
    //connected: bool
    //error: enumeration
    //service: BluetoothService
    //state: enumeration
    //stringData: string
}</snippet>
  <snippet group="QML" trigger="BorderImage" complement="BorderImage">BorderImage{
    //asynchronous: bool
    //border.bottom: int
    //border.left: int
    //border.right: int
    //border.top: int
    //cache: bool
    //horizontalTileMode: enumeration
    //mirror: bool
    //progress: real
    //smooth: bool
    //source: url
    //sourceSize: QSize
    //status: enumeration
    //verticalTileMode: enumeration
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="BorderImageMesh" complement="BorderImageMesh">BorderImageMesh{
    //border.bottom: int
    //border.left: int
    //border.right: int
    //border.top: int
    //horizontalTileMode: enumeration
    //size: size
    //verticalTileMode: enumeration
}</snippet>
  <snippet group="QML" trigger="BoxPlotSeries" complement="BoxPlotSeries">BoxPlotSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //boxOutlineVisible: bool
    //boxWidth: real
    //brushFilename: string
    //count: int
    //append(stringlabel,VariantListvalues)
    //append(BoxSetbox)
    //at(intindex)
    //boxsetsAdded(listsets)
    //boxsetsRemoved(listsets)
    //clear()
    //clicked(BoxSetboxset)
    //doubleClicked(BoxSetboxset)
    //hovered(boolstatus,BoxSetboxset)
    //insert(intindex,stringlabel,VariantListvalues)
    //pressed(BoxSetboxset)
    //released(BoxSetboxset)
    //remove(QBoxSetboxset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="BoxSet" complement="BoxSet">BoxSet{
    //brushFilename: string
    //count: int
    //label: string
    //values: list
    //cleared()
    //clicked()
    //doubleClicked()
    //hovered(boolstatus)
    //pressed()
    //released()
    //valueChanged(intindex)
    //valuesChanged()
}</snippet>
  <snippet group="QML" trigger="BrightnessContrast" complement="BrightnessContrast">BrightnessContrast{
    //brightness: real
    //cached: bool
    //contrast: real
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Buffer" complement="Buffer">Buffer{
    //syncData: bool
    //type: QBuffer: : BufferType(obsolete)
    //usage: QBuffer: : UsageType
}</snippet>
  <snippet group="QML" trigger="BusyIndicator" complement="BusyIndicator">BusyIndicator{
    //running: bool
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="BusyIndicatorStyle" complement="BusyIndicatorStyle">BusyIndicatorStyle{
    //control: BusyIndicator
    //indicator: Component
}</snippet>
  <snippet group="QML" trigger="Button" complement="Button">Button{
    //flat: bool
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ButtonAxisInput" complement="ButtonAxisInput">ButtonAxisInput{
    //acceleration: real
    //buttons: list&lt;var&gt;
    //deceleration: list&lt;var&gt;
    //scale: real
}</snippet>
  <snippet group="QML" trigger="ButtonGroup" complement="ButtonGroup">ButtonGroup{
    //buttons: list&lt;AbstractButton&gt;
    //checkState: enumeration
    //checkedButton: AbstractButton
    //exclusive: bool
    //onGroup : Buttongro: { }
    //clicked(AbstractButtonbutton)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ButtonStyle" complement="ButtonStyle">ButtonStyle{
    //background: Component
    //control: Button
    //label: Component
}</snippet>
  <snippet group="QML" trigger="Calendar" complement="Calendar">Calendar{
    //dayOfWeekFormat: int
    //frameVisible: bool
    //locale: var
    //maximumDate: date
    //minimumDate: date
    //navigationBarVisible: bool
    //selectedDate: date
    //visibleMonth: int
    //visibleYear: int
    //weekNumbersVisible: bool
    //clicked(date)
    //doubleClicked(date)
    //hovered(date)
    //pressAndHold(date)
    //pressed(date)
    //released(date)
}</snippet>
  <snippet group="QML" trigger="CalendarStyle" complement="CalendarStyle">CalendarStyle{
    //background: Component
    //control: Calendar
    //dayDelegate: Component
    //dayOfWeekDelegate: Component
    //gridColor: color
    //gridVisible: bool
    //navigationBar: Component
    //weekNumberDelegate: Component
}</snippet>
  <snippet group="QML" trigger="Camera" complement="Camera">Camera{
    //aspectRatio: real
    //bottom: real
    //farPlane: real
    //fieldOfView: real
    //left: real
    //nearPlane: real
    //position: vector3d
    //projectionMatrix: matrix4x4
    //projectionType: enumeration
    //right: real
    //top: real
    //upVector: vector3d
    //viewCenter: vector3d
    //viewMatrix: matrix4x4(obsolete)
    //viewVector: vector3d
    //components: list&lt;Component3D&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Camera3D" complement="Camera3D">Camera3D{
    //cameraPreset: Camera3D.CameraPreset
    //maxZoomLevel: float
    //minZoomLevel: float
    //target: vector3d
    //wrapXRotation: bool
    //wrapYRotation: bool
    //xRotation: float
    //yRotation: float
    //zoomLevel: float
}</snippet>
  <snippet group="QML" trigger="CameraCapabilities" complement="CameraCapabilities">CameraCapabilities{
    //maximumFieldOfView: qreal
    //maximumTilt: qreal
    //maximumZoomLevel: qreal
    //minimumFieldOfView: qreal
    //minimumTilt: qreal
    //minimumZoomLevel: qreal
}</snippet>
  <snippet group="QML" trigger="CameraCapture" complement="CameraCapture">CameraCapture{
    //capturedImagePath: string
    //errorString: string
    //ready: bool
    //resolution: size
    //supportedResolutions: list&lt;size&gt;
    //cancelCapture()
    //capture()
    //captureFailed(requestId,message)
    //captureToLocation(location)
    //imageCaptured(requestId,preview)
    //imageMetadataAvailable(requestId,key,value)
    //imageSaved(requestId,path)
    //setMetadata(key,value)
}</snippet>
  <snippet group="QML" trigger="CameraExposure" complement="CameraExposure">CameraExposure{
    //aperture: real
    //exposureCompensation: real
    //exposureMode: enumeration
    //iso: int
    //manualAperture: real
    //manualIso: real
    //manualShutterSpeed: real
    //meteringMode: enumeration
    //shutterSpeed: real
    //spotMeteringPoint: QPointF
    //supportedExposureModes: list&lt;ExposureMode&gt;
    //setAutoAperture()
    //setAutoIsoSensitivity()
    //setAutoShutterSpeed()
}</snippet>
  <snippet group="QML" trigger="CameraFlash" complement="CameraFlash">CameraFlash{
    //mode: enumeration
    //ready: bool
    //supportedModes: list&lt;FlashMode&gt;
    //flashModeChanged(int)
    //flashReady(bool)
}</snippet>
  <snippet group="QML" trigger="CameraFocus" complement="CameraFocus">CameraFocus{
    //customFocusPoint: point
    //focusMode: enumeration
    //focusPointMode: enumeration
    //focusZones: list&lt;focusZone&gt;
    //supportedFocusModes: list&lt;FocusMode&gt;
    //supportedFocusPointModes: list&lt;enumeration&gt;
}</snippet>
  <snippet group="QML" trigger="CameraImageProcessing" complement="CameraImageProcessing">CameraImageProcessing{
    //brightness: qreal
    //colorFilter: enumeration
    //contrast: qreal
    //denoisingLevel: qreal
    //isAvailable: bool
    //manualWhiteBalance: qreal
    //saturation: qreal
    //sharpeningLevel: qreal
    //supportedColorFilters: list&lt;ColorFilter&gt;
    //supportedWhiteBalanceModes: list&lt;WhiteBalanceMode&gt;
    //whiteBalanceMode: enumeration
}</snippet>
  <snippet group="QML" trigger="CameraLens" complement="CameraLens">CameraLens{
    //aspectRatio: real
    //bottom: real
    //farPlane: real
    //fieldOfView: real
    //left: real
    //nearPlane: real
    //projectionMatrix: matrix4x4
    //projectionType: enumeration
    //right: real
    //top: real
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="CameraRecorder" complement="CameraRecorder">CameraRecorder{
    //actualLocation: string
    //audioBitRate: int
    //audioChannels: int
    //audioCodec: string
    //audioEncodingMode: enumeration
    //audioSampleRate: int
    //duration: int
    //errorCode: enumeration
    //errorString: string
    //frameRate: qreal
    //mediaContainer: string
    //muted: bool
    //outputLocation: string
    //recorderState: enumeration
    //recorderStatus: enumeration
    //resolution: size
    //videoBitRate: int
    //videoCodec: string
    //videoEncodingMode: enumeration
    //record()
    //setMetadata(key,value)
    //stop()
}</snippet>
  <snippet group="QML" trigger="CameraSelector" complement="CameraSelector">CameraSelector{
    //camera: Entity
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="CandlestickSeries" complement="CandlestickSeries">CandlestickSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //bodyOutlineVisible: bool
    //bodyWidth: real
    //brushFilename: string
    //capsVisible: bool
    //capsWidth: real
    //count: int
    //decreasingColor: color
    //increasingColor: color
    //maximumColumnWidth: real
    //minimumColumnWidth: real
    //append(CandlestickSetset)
    //at(intindex)
    //candlestickSetsAdded(list&lt;CandlestickSet&gt;sets)
    //candlestickSetsRemoved(list&lt;CandlestickSet&gt;sets)
    //clear()
    //clicked(CandlestickSetset)
    //doubleClicked(CandlestickSetset)
    //hovered(boolstatus,CandlestickSetset)
    //insert(intindex,CandlestickSetset)
    //pressed(CandlestickSetset)
    //released(CandlestickSetset)
    //remove(CandlestickSetset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="CandlestickSet" complement="CandlestickSet">CandlestickSet{
    //brushFilename: string
    //close: real
    //high: real
    //low: real
    //open: real
    //timestamp: real
    //clicked()
    //doubleClicked()
    //hovered(boolstatus)
    //pressed()
    //released()
}</snippet>
  <snippet group="QML" trigger="Canvas" complement="Canvas">Canvas{
    //available: bool
    //canvasSize: size
    //canvasWindow: rect(obsolete)
    //context: object
    //contextType: string
    //renderStrategy: enumeration
    //renderTarget: enumeration
    //tileSize: size(obsolete)
    //cancelRequestAnimationFrame(inthandle)
    //imageLoaded()
    //isImageError(urlimage)
    //isImageLoaded(urlimage)
    //isImageLoading(urlimage)
    //loadImage(urlimage)
    //markDirty(rectarea)
    //paint(rectregion)
    //painted()
    //requestPaint()
    //unloadImage(urlimage)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Canvas3D" complement="Canvas3D">Canvas3D{
    //context: Context3D
    //devicePixelRatio: float
    //fps: int
    //pixelSize: size
    //renderOnDemand: bool
    //renderTarget: RenderTarget
}</snippet>
  <snippet group="QML" trigger="Canvas3DAbstractObject" complement="Canvas3DAbstractObject">Canvas3DAbstractObject{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DActiveInfo" complement="Canvas3DActiveInfo">Canvas3DActiveInfo{
    //name: string
    //size: string
    //type: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DBuffer" complement="Canvas3DBuffer">Canvas3DBuffer{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DContextAttributes" complement="Canvas3DContextAttributes">Canvas3DContextAttributes{
    //alpha: bool
    //antialias: bool
    //depth: bool
    //failIfMajorPerformanceCaveat: bool
    //preferLowPowerToHighPerformance: bool
    //premultipliedAlpha: bool
    //preserveDrawingBuffer: bool
    //stencil: bool
}</snippet>
  <snippet group="QML" trigger="Canvas3DFrameBuffer" complement="Canvas3DFrameBuffer">Canvas3DFrameBuffer{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DProgram" complement="Canvas3DProgram">Canvas3DProgram{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DRenderBuffer" complement="Canvas3DRenderBuffer">Canvas3DRenderBuffer{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DShader" complement="Canvas3DShader">Canvas3DShader{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DShaderPrecisionFormat" complement="Canvas3DShaderPrecisionFormat">Canvas3DShaderPrecisionFormat{
    //precision: int
    //rangeMax: int
    //rangeMin: int
}</snippet>
  <snippet group="QML" trigger="Canvas3DTexture" complement="Canvas3DTexture">Canvas3DTexture{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="Canvas3DTextureProvider" complement="Canvas3DTextureProvider">Canvas3DTextureProvider{
}</snippet>
  <snippet group="QML" trigger="Canvas3DUniformLocation" complement="Canvas3DUniformLocation">Canvas3DUniformLocation{
    //invalidated: bool
    //name: string
}</snippet>
  <snippet group="QML" trigger="CanvasGradient" complement="CanvasGradient">CanvasGradient{
}</snippet>
  <snippet group="QML" trigger="CanvasImageData" complement="CanvasImageData">CanvasImageData{
    //data: object
    //height: int
    //width: int
}</snippet>
  <snippet group="QML" trigger="CanvasPixelArray" complement="CanvasPixelArray">CanvasPixelArray{
    //length: int
}</snippet>
  <snippet group="QML" trigger="Category" complement="Category">Category{
    //category: QPlaceCategory
    //categoryId: string
    //icon: PlaceIcon
    //name: string
    //plugin: Plugin
    //status: enumeration
    //visibility: enumeration
}</snippet>
  <snippet group="QML" trigger="CategoryAxis" complement="CategoryAxis">CategoryAxis{
    //categoriesLabels: StringList
    //count: int
    //labelsPosition: enumeration
    //startValue: int
    //append(stringlabel,realendValue)
    //remove(stringlabel)
    //replace(stringoldLabel,stringnewLabel)
    //alignment: alignment
    //color: color
    //gridLineColor: color
    //gridVisible: bool
    //labelsAngle: int
    //labelsColor: color
    //labelsFont: font
    //labelsVisible: bool
    //lineVisible: bool
    //minorGridLineColor: color
    //minorGridVisible: bool
    //orientation: Qt.Orientation
    //reverse: alignment
    //shadesBorderColor: color
    //shadesColor: color
    //shadesVisible: bool
    //titleFont: font
    //titleText: string
    //titleVisible: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="CategoryAxis3D" complement="CategoryAxis3D">CategoryAxis3D{
    //labels: list
    //autoAdjustRange: bool
    //labelAutoRotation: real
    //labels: list
    //max: real
    //min: real
    //orientation: AbstractAxis3D.AxisOrientation
    //title: string
    //titleFixed: bool
    //titleVisible: bool
    //type: AbstractAxis3D.AxisType
}</snippet>
  <snippet group="QML" trigger="CategoryModel" complement="CategoryModel">CategoryModel{
    //hierarchical: bool
    //plugin: Plugin
    //status: enumeration
    //dataChanged()
}</snippet>
  <snippet group="QML" trigger="CategoryRange" complement="CategoryRange">CategoryRange{
    //endValue: int
    //label: string
}</snippet>
  <snippet group="QML" trigger="ChangeLanguageKey" complement="ChangeLanguageKey">ChangeLanguageKey{
    //customLayoutsOnly: bool
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ChartView" complement="ChartView">ChartView{
    //animationDuration: int
    //animationEasingCurve: easing
    //animationOptions: enumeration
    //axes: list&lt;AbstractAxis&gt;
    //backgroundColor: color
    //backgroundRoundness: real
    //count: int
    //dropShadowEnabled: bool
    //legend: Legend
    //locale: locale
    //localizeNumbers: bool
    //margins: Margins
    //plotArea: rect
    //plotAreaColor: color
    //theme: enumeration
    //title: string
    //titleColor: color
    //titleFont: font
    //isZoomed()
    //removeAllSeries()
    //removeSeries(AbstractSeriesseries)
    //scrollDown(realpixels)
    //scrollLeft(realpixels)
    //scrollRight(realpixels)
    //scrollUp(realpixels)
    //seriesAdded(AbstractSeriesseries)
    //seriesRemoved(AbstractSeriesseries)
    //setAxisX(AbstractAxisaxis,AbstractSeriesseries)
    //setAxisY(AbstractAxisaxis,AbstractSeriesseries)
    //zoom(realfactor)
    //zoomIn()
    //zoomIn(rectrectangle)
    //zoomOut()
    //zoomReset()
}</snippet>
  <snippet group="QML" trigger="CheckBox" complement="CheckBox">CheckBox{
    //checkState: enumeration
    //nextCheckState: function
    //tristate: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="CheckBoxStyle" complement="CheckBoxStyle">CheckBoxStyle{
    //background: Component
    //control: CheckBox
    //indicator: Component
    //label: Component
    //spacing: int
}</snippet>
  <snippet group="QML" trigger="CheckDelegate" complement="CheckDelegate">CheckDelegate{
    //checkState: enumeration
    //nextCheckState: function
    //tristate: bool
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="CircularGauge" complement="CircularGauge">CircularGauge{
    //maximumValue: real
    //minimumValue: real
    //stepSize: real
    //tickmarksVisible: bool
    //value: alias
}</snippet>
  <snippet group="QML" trigger="CircularGaugeStyle" complement="CircularGaugeStyle">CircularGaugeStyle{
    //angleRange: real
    //background: Component
    //control: CircularGauge
    //foreground: Component
    //labelCount: int
    //labelInset: real
    //labelStepSize: real
    //maximumValueAngle: real
    //minimumValueAngle: real
    //minorTickmark: Component
    //minorTickmarkCount: int
    //minorTickmarkInset: real
    //needle: Component
    //needleRotation: real
    //outerRadius: real
    //tickmark: Component
    //tickmarkCount: int
    //tickmarkInset: real
    //tickmarkLabel: Component
    //tickmarkStepSize: real
}</snippet>
  <snippet group="QML" trigger="ClearBuffers" complement="ClearBuffers">ClearBuffers{
    //buffers: enumeration
    //clearDepthValue: real
    //clearStencilValue: int
    //color: color
    //colorbuffer: RenderTargetOutput
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="ClipAnimator" complement="ClipAnimator">ClipAnimator{
    //clip: var
}</snippet>
  <snippet group="QML" trigger="ClipPlane" complement="ClipPlane">ClipPlane{
    //distance: real
    //normal: vector3d
    //planeIndex: int
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="CloseEvent" complement="CloseEvent">CloseEvent{
    //accepted: bool
}</snippet>
  <snippet group="QML" trigger="ColorAnimation" complement="ColorAnimation">ColorAnimation{
    //from: color
    //to: color
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="ColorDialog" complement="ColorDialog">ColorDialog{
    //color: color
    //currentColor: color
    //modality: Qt: : WindowModality
    //showAlphaChannel: bool
    //title: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="ColorDialogRequest" complement="ColorDialogRequest">ColorDialogRequest{
    //accepted: bool
    //color: color
}</snippet>
  <snippet group="QML" trigger="ColorGradient" complement="ColorGradient">ColorGradient{
    //stops: list&lt;ColorGradientStop&gt;
}</snippet>
  <snippet group="QML" trigger="ColorGradientStop" complement="ColorGradientStop">ColorGradientStop{
    //color: color
    //position: real
}</snippet>
  <snippet group="QML" trigger="ColorMask" complement="ColorMask">ColorMask{
    //alphaMasked: bool
    //blueMasked: bool
    //greenMasked: bool
    //redMasked: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="ColorOverlay" complement="ColorOverlay">ColorOverlay{
    //cached: bool
    //color: color
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Colorize" complement="Colorize">Colorize{
    //cached: bool
    //hue: real
    //lightness: real
    //saturation: real
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Column" complement="Column">Column{
    //add: Transition
    //bottomPadding: real
    //leftPadding: real
    //move: Transition
    //padding: real
    //populate: Transition
    //rightPadding: real
    //spacing: real
    //topPadding: real
    //forceLayout()
    //positioningComplete()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ColumnLayout" complement="ColumnLayout">ColumnLayout{
    //layoutDirection: enumeration
    //spacing: real
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ComboBox" complement="ComboBox">ComboBox{
    //acceptableInput: bool
    //count: int
    //currentIndex: int
    //currentText: string
    //delegate: Component
    //displayText: string
    //down: bool
    //editText: string
    //editable: bool
    //flat: bool
    //highlightedIndex: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //inputMethodComposing: bool
    //inputMethodHints: flags
    //model: model
    //popup: Popup
    //pressed: bool
    //textRole: string
    //validator: Validator
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ComboBoxStyle" complement="ComboBoxStyle">ComboBoxStyle{
    //background: Component
    //control: ComboBox
    //dropDownButtonWidth: int
    //font: font
    //label: Component
    //renderType: int
    //selectedTextColor: color
    //selectionColor: color
    //textColor: color
}</snippet>
  <snippet group="QML" trigger="Compass" complement="Compass">Compass{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="CompassReading" complement="CompassReading">CompassReading{
    //azimuth: qreal
    //calibrationLevel: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="Component" complement="Component">Component{
    //progress: real
    //status: enumeration
    //url: url
    //onCompleted: { }
    //onDestruction: { }
}</snippet>
  <snippet group="QML" trigger="Component3D" complement="Component3D">Component3D{
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="ComputeCommand" complement="ComputeCommand">ComputeCommand{
    //workGroupX: int
    //workGroupY: int
    //workGroupZ: int
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="ConeGeometry" complement="ConeGeometry">ConeGeometry{
    //bottomRadius: real
    //hasBottomEndcap: bool
    //hasTopEndcap: bool
    //indexAttribute: Attribute
    //length: real
    //normalAttribute: Attribute
    //positionAttribute: Attribute
    //rings: int
    //slices: int
    //texCoordAttribute: Attribute
    //topRadius: real
}</snippet>
  <snippet group="QML" trigger="ConeMesh" complement="ConeMesh">ConeMesh{
    //bottomRadius: real
    //hasBottomEndcap: bool
    //hasTopEndcap: bool
    //length: real
    //rings: int
    //slices: int
    //topRadius: real
}</snippet>
  <snippet group="QML" trigger="ConicalGradient" complement="ConicalGradient">ConicalGradient{
    //angle: real
    //cached: bool
    //gradient: Gradient
    //horizontalOffset: real
    //source: variant
    //verticalOffset: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Connections" complement="Connections">Connections{
    //enabled: bool
    //ignoreUnknownSignals: bool
    //target: Object
}</snippet>
  <snippet group="QML" trigger="ContactDetail" complement="ContactDetail">ContactDetail{
    //contactDetail: QPlaceContactDetail
    //label: string
    //value: string
}</snippet>
  <snippet group="QML" trigger="ContactDetails" complement="ContactDetails">ContactDetails{
}</snippet>
  <snippet group="QML" trigger="Container" complement="Container">Container{
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentModel: model
    //contentWidth: real
    //count: int
    //currentIndex: int
    //currentItem: Item
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Context2D" complement="Context2D">Context2D{
    //canvas: QtQuick: : Canvas
    //fillRule: enumeration
    //fillStyle: variant
    //font: string
    //globalAlpha: real
    //globalCompositeOperation: string
    //lineCap: string
    //lineDashOffset: real
    //lineJoin: string
    //lineWidth: real
    //miterLimit: real
    //shadowBlur: real
    //shadowColor: string
    //shadowOffsetX: qreal
    //shadowOffsetY: qreal
    //strokeStyle: variant
    //textAlign: string
    //textBaseline: string
    //drawImage(variantimage,realdx,realdy)
    //drawImage(variantimage,realdx,realdy,realdw,realdh)
    //drawImage(variantimage,realsx,realsy,realsw,realsh,realdx,realdy,realdw,realdh)
    //setLineDash(arraypattern)
}</snippet>
  <snippet group="QML" trigger="Context3D" complement="Context3D">Context3D{
    //canvas: Canvas3D
    //drawingBufferHeight: int
    //drawingBufferWidth: int
    //Context3D: : glEnumscheckFramebufferStatus(glEnumstarget)
    //list&lt;Canvas3DShader&gt;getAttachedShaders(Canvas3DProgramprogram3D)
    //list&lt;variant&gt;getSupportedExtensions()
    //viewport(intx,inty,intwidth,intheight)
}</snippet>
  <snippet group="QML" trigger="ContextMenuRequest" complement="ContextMenuRequest">ContextMenuRequest{
    //accepted: bool
    //editFlags: flags
    //isContentEditable: bool
    //linkText: string
    //linkUrl: url
    //mediaFlags: flags
    //mediaType: enumeration
    //mediaUrl: url
    //misspelledWord: string
    //selectedText: string
    //spellCheckerSuggestions: stringlist
    //x: int
    //y: int
}</snippet>
  <snippet group="QML" trigger="Control" complement="Control">Control{
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="CoordinateAnimation" complement="CoordinateAnimation">CoordinateAnimation{
    //direction: enumeration
    //from: coordinate
    //to: coordinate
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
}</snippet>
  <snippet group="QML" trigger="CuboidGeometry" complement="CuboidGeometry">CuboidGeometry{
    //indexAttribute: Attribute
    //normalAttribute: Attribute
    //positionAttribute: Attribute
    //tangentAttribute: Attribute
    //texCoordAttribute: Attribute
    //xExtent: real
    //xyMeshResolution: size
    //xzMeshResolution: size
    //yExtent: real
    //yzMeshResolution: size
    //zExtent: real
}</snippet>
  <snippet group="QML" trigger="CuboidMesh" complement="CuboidMesh">CuboidMesh{
    //xExtent: real
    //xyMeshResolution: size
    //xzMeshResolution: size
    //yExtent: real
    //yzMeshResolution: size
    //zExtent: real
}</snippet>
  <snippet group="QML" trigger="CullFace" complement="CullFace">CullFace{
    //mode: enumeration
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="CumulativeDirection" complement="CumulativeDirection">CumulativeDirection{
}</snippet>
  <snippet group="QML" trigger="Custom3DItem" complement="Custom3DItem">Custom3DItem{
    //meshFile: string
    //position: vector3d
    //positionAbsolute: bool
    //rotation: quaternion
    //scaling: vector3d
    //scalingAbsolute: bool
    //shadowCasting: bool
    //textureFile: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="Custom3DLabel" complement="Custom3DLabel">Custom3DLabel{
    //backgroundColor: color
    //backgroundEnabled: bool
    //borderEnabled: bool
    //facingCamera: bool
    //font: font
    //text: string
    //textColor: color
    //meshFile: string
    //position: vector3d
    //positionAbsolute: bool
    //rotation: quaternion
    //scaling: vector3d
    //scalingAbsolute: bool
    //shadowCasting: bool
    //textureFile: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="Custom3DVolume" complement="Custom3DVolume">Custom3DVolume{
    //alphaMultiplier: real
    //drawSliceFrames: bool
    //drawSlices: bool
    //preserveOpacity: bool
    //sliceFrameColor: color
    //sliceFrameGaps: vector3d
    //sliceFrameThicknesses: vector3d
    //sliceFrameWidths: vector3d
    //sliceIndexX: int
    //sliceIndexY: int
    //sliceIndexZ: int
    //textureDepth: int
    //textureHeight: int
    //textureWidth: int
    //useHighDefShader: bool
    //meshFile: string
    //position: vector3d
    //positionAbsolute: bool
    //rotation: quaternion
    //scaling: vector3d
    //scalingAbsolute: bool
    //shadowCasting: bool
    //textureFile: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="CustomParticle" complement="CustomParticle">CustomParticle{
    //fragmentShader: string
    //vertexShader: string
    //groups: list&lt;string&gt;
    //system: ParticleSystem
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="CylinderGeometry" complement="CylinderGeometry">CylinderGeometry{
    //indexAttribute: Attribute
    //length: real
    //normalAttribute: Attribute
    //positionAttribute: Attribute
    //radius: real
    //rings: int
    //slices: int
    //texCoordAttribute: Attribute
}</snippet>
  <snippet group="QML" trigger="CylinderMesh" complement="CylinderMesh">CylinderMesh{
    //length: real
    //radius: real
    //rings: int
    //slices: int
}</snippet>
  <snippet group="QML" trigger="Date" complement="Date">Date{
}</snippet>
  <snippet group="QML" trigger="DateTimeAxis" complement="DateTimeAxis">DateTimeAxis{
    //format: string
    //max: datetime
    //min: datetime
    //tickCount: int
    //rangeChanged(datetimemin,datetimemax)
    //alignment: alignment
    //color: color
    //gridLineColor: color
    //gridVisible: bool
    //labelsAngle: int
    //labelsColor: color
    //labelsFont: font
    //labelsVisible: bool
    //lineVisible: bool
    //minorGridLineColor: color
    //minorGridVisible: bool
    //orientation: Qt.Orientation
    //reverse: alignment
    //shadesBorderColor: color
    //shadesColor: color
    //shadesVisible: bool
    //titleFont: font
    //titleText: string
    //titleVisible: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="DelayButton" complement="DelayButton">DelayButton{
    //delay: int
    //progress: real
    //transition: Transition
    //activated()
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="DelayButtonStyle" complement="DelayButtonStyle">DelayButtonStyle{
    //control: DelayButton
    //foreground: Component
    //progressBarDropShadowColor: color
    //progressBarGradient: Gradient
}</snippet>
  <snippet group="QML" trigger="DelegateChoice" complement="DelegateChoice">DelegateChoice{
    //column: index
    //delegate: Component
    //index: index
    //roleValue: string
    //row: index
}</snippet>
  <snippet group="QML" trigger="DelegateChooser" complement="DelegateChooser">DelegateChooser{
    //choices: list&lt;DelegateChoice&gt;
    //role: string
}</snippet>
  <snippet group="QML" trigger="DelegateModel" complement="DelegateModel">DelegateModel{
    //count: int
    //delegate: Component
    //filterOnGroup: string
    //onGroups : Stringli: { }
    //groups: list&lt;DelegateModelGroup&gt;
    //onInitems : I: { }
    //onInpersisteditems : I: { }
    //onIsunresolved : Bo: { }
    //items: DelegateModelGroup
    //onItemsindex : I: { }
    //onModel : I: { }
    //model: model
    //parts: object
    //persistedItems: DelegateModelGroup
    //onPersisteditemsindex : I: { }
    //rootIndex: QModelIndex
}</snippet>
  <snippet group="QML" trigger="DelegateModelGroup" complement="DelegateModelGroup">DelegateModelGroup{
    //
    //
    //count: int
    //includeByDefault: bool
    //name: string
    //addGroups(intindex,intcount,stringlistgroups)
    //changed(arrayremoved,arrayinserted)
    //create(intindex)
    //create(intindex,jsdictdata,arraygroups=undefined)
    //create(jsdictdata,arraygroups=undefined)
    //insert(intindex,jsdictdata,arraygroups=undefined)
    //insert(jsdictdata,vargroups=undefined)
    //move(varfrom,varto,intcount)
    //remove(intindex,intcount)
    //removeGroups(intindex,intcount,stringlistgroups)
    //resolve(intfrom,intto)
    //setGroups(intindex,intcount,stringlistgroups)
    //setGroups(intindex,intcount,stringlistgroups)
}</snippet>
  <snippet group="QML" trigger="DepthTest" complement="DepthTest">DepthTest{
    //depthFunction: enumeration
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Desaturate" complement="Desaturate">Desaturate{
    //cached: bool
    //desaturation: real
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Dial" complement="Dial">Dial{
    //angle: real
    //from: real
    //handle: Item
    //inputMode: enumeration
    //live: bool
    //position: real
    //pressed: bool
    //snapMode: enumeration
    //stepSize: real
    //to: real
    //value: real
    //wrap: bool
    //moved()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="DialStyle" complement="DialStyle">DialStyle{
    //background: Component
    //control: Dial
    //handle: Component
    //handleInset: real
    //labelCount: int
    //labelInset: real
    //labelStepSize: real
    //minorTickmark: Component
    //minorTickmarkCount: int
    //minorTickmarkInset: real
    //outerRadius: real
    //tickmark: Component
    //tickmarkCount: int
    //tickmarkInset: real
    //tickmarkLabel: Component
    //tickmarkStepSize: real
}</snippet>
  <snippet group="QML" trigger="Dialog" complement="Dialog">Dialog{
    //footer: Item
    //header: Item
    //implicitFooterHeight: real
    //implicitFooterWidth: real
    //implicitHeaderHeight: real
    //implicitHeaderWidth: real
    //result: int
    //standardButtons: enumeration
    //title: string
    //accepted()
    //applied()
    //discarded()
    //helpRequested()
    //rejected()
    //reset()
    //activeFocus: bool
    //anchors.centerIn: Object
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomMargin: real
    //bottomPadding: real
    //clip: bool
    //closePolicy: enumeration
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //dim: bool
    //enabled: bool
    //enter: Transition
    //exit: Transition
    //focus: bool
    //font: font
    //height: real
    //horizontalPadding: real
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //implicitHeight: real
    //implicitWidth: real
    //leftInset: real
    //leftMargin: real
    //leftPadding: real
    //locale: Locale
    //margins: real
    //mirrored: bool
    //modal: bool
    //opacity: real
    //opened: bool
    //padding: real
    //palette: palette
    //parent: Item
    //rightInset: real
    //rightMargin: real
    //rightPadding: real
    //scale: real
    //spacing: real
    //topInset: real
    //topMargin: real
    //topPadding: real
    //transformOrigin: enumeration
    //verticalPadding: real
    //visible: bool
    //width: real
    //x: real
    //y: real
    //z: real
    //forceActiveFocus(reason=Qt.OtherFocusReason)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="DialogButtonBox" complement="DialogButtonBox">DialogButtonBox{
    //alignment: flags
    //onButtonbox : Dialogbuttonb: { }
    //buttonLayout: enumeration
    //onButtonrole : Enumerati: { }
    //delegate: Component
    //position: enumeration
    //standardButtons: enumeration
    //accepted()
    //applied()
    //clicked(AbstractButtonbutton)
    //discarded()
    //helpRequested()
    //rejected()
    //reset()
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentModel: model
    //contentWidth: real
    //count: int
    //currentIndex: int
    //currentItem: Item
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="DiffuseMapMaterial" complement="DiffuseMapMaterial">DiffuseMapMaterial{
    //ambient: color
    //diffuse: TextureImage
    //shininess: real
    //specular: color
    //textureScale: real
}</snippet>
  <snippet group="QML" trigger="DiffuseSpecularMapMaterial" complement="DiffuseSpecularMapMaterial">DiffuseSpecularMapMaterial{
    //ambient: color
    //diffuse: TextureImage
    //shininess: real
    //specular: TextureImage
    //textureScale: real
}</snippet>
  <snippet group="QML" trigger="DiffuseSpecularMaterial" complement="DiffuseSpecularMaterial">DiffuseSpecularMaterial{
    //alphaBlending: bool
    //ambient: color
    //diffuse: var
    //normal: var
    //shininess: real
    //specular: var
    //textureScale: real
}</snippet>
  <snippet group="QML" trigger="Direction" complement="Direction">Direction{
}</snippet>
  <snippet group="QML" trigger="DirectionalBlur" complement="DirectionalBlur">DirectionalBlur{
    //angle: real
    //cached: bool
    //length: real
    //samples: int
    //source: variant
    //transparentBorder: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="DirectionalLight" complement="DirectionalLight">DirectionalLight{
    //worldDirection: vector3d
}</snippet>
  <snippet group="QML" trigger="DispatchCompute" complement="DispatchCompute">DispatchCompute{
    //workGroupX: int
    //workGroupY: int
    //workGroupZ: int
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Displace" complement="Displace">Displace{
    //cached: bool
    //displacement: real
    //displacementSource: variant
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="DistanceReading" complement="DistanceReading">DistanceReading{
    //distance: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="DistanceSensor" complement="DistanceSensor">DistanceSensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="Dithering" complement="Dithering">Dithering{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="DoubleValidator" complement="DoubleValidator">DoubleValidator{
    //bottom: real
    //decimals: int
    //locale: string
    //notation: enumeration
    //top: real
}</snippet>
  <snippet group="QML" trigger="Drag" complement="Drag">Drag{
    //onActive : Bo: { }
    //onDragtype : Enumerati: { }
    //onHotspot : Qpoin: { }
    //onImagesource : Qu: { }
    //onKeys : Stringli: { }
    //onMimedata : Stringli: { }
    //onProposedaction : Enumerati: { }
    //onSource : Obje: { }
    //onSupportedactions : Fla: { }
    //onTarget : Obje: { }
    //onVoid Cancel: { }
    //onDragfinished(Dropaction Dropactio: { }
    //onDragstarted: { }
    //onEnumeration Drop: { }
    //onVoid Start(Flags Supportedaction: { }
    //onVoid Startdrag(Flags Supportedaction: { }
}</snippet>
  <snippet group="QML" trigger="DragEvent" complement="DragEvent">DragEvent{
    //
    //accepted: bool
    //action: enumeration
    //colorData: color
    //drag.source: Object
    //formats: stringlist
    //hasColor: bool
    //hasHtml: bool
    //hasText: bool
    //hasUrls: bool
    //html: string
    //keys: stringlist
    //proposedAction: flags
    //supportedActions: flags
    //text: string
    //urls: urllist
    //x: real
    //y: real
    //accept()
    //accept(enumerationaction)
    //acceptProposedAction()
}</snippet>
  <snippet group="QML" trigger="DragHandler" complement="DragHandler">DragHandler{
    //translation: QVector2D
    //xAxis.enabled: bool
    //xAxis.maximum: real
    //xAxis.minimum: real
    //yAxis.enabled: bool
    //yAxis.maximum: real
    //yAxis.minimum: real
    //acceptedButtons: flags
    //acceptedDevices: flags
    //acceptedModifiers: flags
    //acceptedPointerTypes: flags
    //active: bool
    //centroid: QtQuick: : HandlerPoint
    //enabled: bool
    //grabPermissions: flags
    //margin: real
    //maximumPointCount: int
    //minimumPointCount: int
    //parent: Item
    //target: Item
    //canceled(EventPointpoint)
    //grabChanged(GrabTransitiontransition,EventPointpoint)
}</snippet>
  <snippet group="QML" trigger="Drawer" complement="Drawer">Drawer{
    //dragMargin: real
    //edge: enumeration
    //interactive: bool
    //position: real
    //activeFocus: bool
    //anchors.centerIn: Object
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomMargin: real
    //bottomPadding: real
    //clip: bool
    //closePolicy: enumeration
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //dim: bool
    //enabled: bool
    //enter: Transition
    //exit: Transition
    //focus: bool
    //font: font
    //height: real
    //horizontalPadding: real
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //implicitHeight: real
    //implicitWidth: real
    //leftInset: real
    //leftMargin: real
    //leftPadding: real
    //locale: Locale
    //margins: real
    //mirrored: bool
    //modal: bool
    //opacity: real
    //opened: bool
    //padding: real
    //palette: palette
    //parent: Item
    //rightInset: real
    //rightMargin: real
    //rightPadding: real
    //scale: real
    //spacing: real
    //topInset: real
    //topMargin: real
    //topPadding: real
    //transformOrigin: enumeration
    //verticalPadding: real
    //visible: bool
    //width: real
    //x: real
    //y: real
    //z: real
    //forceActiveFocus(reason=Qt.OtherFocusReason)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="DropArea" complement="DropArea">DropArea{
    //containsDrag: bool
    //drag.source: Object
    //drag.x: qreal
    //drag.y: qreal
    //keys: stringlist
    //dropped(DragEventdrop)
    //entered(DragEventdrag)
    //exited()
    //positionChanged(DragEventdrag)
}</snippet>
  <snippet group="QML" trigger="DropShadow" complement="DropShadow">DropShadow{
    //cached: alias
    //color: alias
    //horizontalOffset: real
    //radius: int
    //samples: alias
    //source: alias
    //spread: alias
    //transparentBorder: alias
    //verticalOffset: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="DwmFeatures" complement="DwmFeatures">DwmFeatures{
    //blurBehindEnabled: bool
    //bottomGlassMargin: int
    //excludedFromPeek: bool
    //flip3DPolicy: QtWin: : WindowFlip3DPolicy
    //leftGlassMargin: int
    //peekDisallowed: bool
    //rightGlassMargin: int
    //topGlassMargin: int
}</snippet>
  <snippet group="QML" trigger="DynamicParameter" complement="DynamicParameter">DynamicParameter{
    //type: string
}</snippet>
  <snippet group="QML" trigger="EditorialModel" complement="EditorialModel">EditorialModel{
    //batchSize: int
    //place: Place
    //totalCount: int
}</snippet>
  <snippet group="QML" trigger="Effect" complement="Effect">Effect{
    //parameters: list&lt;Parameter&gt;
    //techniques: list&lt;Technique&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="EllipseShape" complement="EllipseShape">EllipseShape{
    //fill: bool
}</snippet>
  <snippet group="QML" trigger="Emitter" complement="Emitter">Emitter{
    //acceleration: StochasticDirection
    //emitRate: real
    //enabled: bool
    //endSize: real
    //group: string
    //lifeSpan: int
    //lifeSpanVariation: int
    //maximumEmitted: int
    //shape: Shape
    //size: real
    //sizeVariation: real
    //startTime: int
    //system: ParticleSystem
    //velocity: StochasticDirection
    //velocityFromMovement: qreal
    //burst(intcount)
    //burst(intcount,intx,inty)
    //emitParticles(Arrayparticles)
    //pulse(intduration)
}</snippet>
  <snippet group="QML" trigger="EnterKey" complement="EnterKey">EnterKey{
    //actionId: int
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="EnterKeyAction" complement="EnterKeyAction">EnterKeyAction{
    //onActionid : I: { }
    //onEnabled : Bo: { }
    //onLabel : Stri: { }
}</snippet>
  <snippet group="QML" trigger="Entity" complement="Entity">Entity{
    //components: list&lt;Component3D&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="EntityLoader" complement="EntityLoader">EntityLoader{
    //entity: QtQml: : QtObject
    //source: url
    //status: Status
    //components: list&lt;Component3D&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="EnvironmentLight" complement="EnvironmentLight">EnvironmentLight{
    //irradiance: Texture
    //specular: Texture
}</snippet>
  <snippet group="QML" trigger="EventConnection" complement="EventConnection">EventConnection{
    //events: stringlist
    //stateMachine: ScxmlStateMachine
    //occurred(event)
}</snippet>
  <snippet group="QML" trigger="EventPoint" complement="EventPoint">EventPoint{
    //accepted: bool
    //pointId: int
    //position: point
    //sceneGrabPosition: point
    //scenePosition: point
    //scenePressPosition: point
    //state: int
    //timeHeld: real
    //velocity: vector2d
}</snippet>
  <snippet group="QML" trigger="EventTouchPoint" complement="EventTouchPoint">EventTouchPoint{
    //ellipseDiameters: size
    //pressure: qreal
    //rotation: qreal
    //uniqueId: QPointerUniqueId
}</snippet>
  <snippet group="QML" trigger="ExclusiveGroup" complement="ExclusiveGroup">ExclusiveGroup{
    //current: object
}</snippet>
  <snippet group="QML" trigger="ExtendedAttributes" complement="ExtendedAttributes">ExtendedAttributes{
}</snippet>
  <snippet group="QML" trigger="ExtrudedTextGeometry" complement="ExtrudedTextGeometry">ExtrudedTextGeometry{
    //depth: float
    //font: QFont
    //indexAttribute: Attribute
    //normalAttribute: Attribute
    //positionAttribute: Attribute
    //text: QString
}</snippet>
  <snippet group="QML" trigger="ExtrudedTextMesh" complement="ExtrudedTextMesh">ExtrudedTextMesh{
    //depth: float
    //font: QFont
    //text: QString
}</snippet>
  <snippet group="QML" trigger="FastBlur" complement="FastBlur">FastBlur{
    //cached: bool
    //radius: real
    //source: variant
    //transparentBorder: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="FileDialog" complement="FileDialog">FileDialog{
    //defaultSuffix: string
    //fileUrl: url
    //fileUrls: list&lt;url&gt;
    //folder: url
    //modality: Qt: : WindowModality
    //nameFilters: list&lt;string&gt;
    //selectExisting: bool
    //selectFolder: bool
    //selectMultiple: bool
    //selectedNameFilter: string
    //shortcuts: Object
    //sidebarVisible: bool
    //title: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="FileDialogRequest" complement="FileDialogRequest">FileDialogRequest{
    //accepted: bool
    //acceptedMimeTypes: stringlist
    //defaultFileName: string
    //mode: enumeration
}</snippet>
  <snippet group="QML" trigger="FillerKey" complement="FillerKey">FillerKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="FilterKey" complement="FilterKey">FilterKey{
    //name: string
    //value: variant
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="FinalState" complement="FinalState">FinalState{
    //active: bool
    //entered()
    //exited()
}</snippet>
  <snippet group="QML" trigger="FirstPersonCameraController" complement="FirstPersonCameraController">FirstPersonCameraController{
    //acceleration: real
    //camera: Camera
    //deceleration: real
    //linearSpeed: real
    //lookSpeed: real
}</snippet>
  <snippet group="QML" trigger="Flickable" complement="Flickable">Flickable{
    //atXBeginning: bool
    //atXEnd: bool
    //atYBeginning: bool
    //atYEnd: bool
    //bottomMargin: real
    //boundsBehavior: enumeration
    //boundsMovement: enumeration
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //contentX: real
    //contentY: real
    //dragging: bool
    //draggingHorizontally: bool
    //draggingVertically: bool
    //flickDeceleration: real
    //flickableDirection: enumeration
    //flicking: bool
    //flickingHorizontally: bool
    //flickingVertically: bool
    //horizontalOvershoot: real
    //horizontalVelocity: real
    //interactive: bool
    //leftMargin: real
    //maximumFlickVelocity: real
    //moving: bool
    //movingHorizontally: bool
    //movingVertically: bool
    //originX: real
    //originY: real
    //pixelAligned: bool
    //pressDelay: int
    //rebound: Transition
    //rightMargin: real
    //synchronousDrag: bool
    //topMargin: real
    //verticalOvershoot: real
    //verticalVelocity: real
    //visibleArea.heightRatio: real
    //visibleArea.widthRatio: real
    //visibleArea.xPosition: real
    //visibleArea.yPosition: real
    //cancelFlick()
    //flick(qrealxVelocity,qrealyVelocity)
    //flickEnded()
    //flickStarted()
    //movementEnded()
    //movementStarted()
    //resizeContent(realwidth,realheight,QPointFcenter)
    //returnToBounds()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Flipable" complement="Flipable">Flipable{
    //back: Item
    //front: Item
    //side: enumeration
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Flow" complement="Flow">Flow{
    //add: Transition
    //bottomPadding: real
    //effectiveLayoutDirection: enumeration
    //flow: enumeration
    //layoutDirection: enumeration
    //leftPadding: real
    //move: Transition
    //padding: real
    //populate: Transition
    //rightPadding: real
    //spacing: real
    //topPadding: real
    //forceLayout()
    //positioningComplete()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="FocusScope" complement="FocusScope">FocusScope{
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="FolderListModel" complement="FolderListModel">FolderListModel{
    //caseSensitive: bool
    //count: int
    //folder: url
    //nameFilters: list&lt;string&gt;
    //parentFolder: url
    //rootFolder: url
    //showDirs: bool
    //showDirsFirst: bool
    //showDotAndDotDot: bool
    //showFiles: bool
    //showHidden: bool
    //showOnlyReadable: bool
    //sortCaseSensitive: bool
    //sortField: enumeration
    //sortReversed: bool
    //status: enumeration
}</snippet>
  <snippet group="QML" trigger="FontDialog" complement="FontDialog">FontDialog{
    //currentFont: font
    //font: font
    //modality: Qt: : WindowModality
    //monospacedFonts: bool
    //nonScalableFonts: bool
    //proportionalFonts: bool
    //scalableFonts: bool
    //title: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="FontLoader" complement="FontLoader">FontLoader{
    //name: string
    //source: url
    //status: enumeration
}</snippet>
  <snippet group="QML" trigger="FontMetrics" complement="FontMetrics">FontMetrics{
    //ascent: real
    //averageCharacterWidth: real
    //descent: real
    //font: font
    //height: real
    //leading: real
    //lineSpacing: real
    //lineWidth: real
    //maximumCharacterWidth: real
    //minimumLeftBearing: real
    //minimumRightBearing: real
    //overlinePosition: real
    //strikeOutPosition: real
    //underlinePosition: real
    //xHeight: real
}</snippet>
  <snippet group="QML" trigger="FormValidationMessageRequest" complement="FormValidationMessageRequest">FormValidationMessageRequest{
    //accepted: bool
    //anchor: rectangle
    //subText: bool
    //text: bool
    //type: enumeration
}</snippet>
  <snippet group="QML" trigger="ForwardRenderer" complement="ForwardRenderer">ForwardRenderer{
    //camera: Entity
    //clearColor: color
    //frustumCulling: bool
    //gamma: real
    //surface: Object
    //viewportRect: rect
    //window: Object(obsolete)
}</snippet>
  <snippet group="QML" trigger="Frame" complement="Frame">Frame{
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentWidth: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="FrameAction" complement="FrameAction">FrameAction{
    //triggered(realdt)
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="FrameGraphNode" complement="FrameGraphNode">FrameGraphNode{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Friction" complement="Friction">Friction{
    //factor: real
    //threshold: real
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="FrontFace" complement="FrontFace">FrontFace{
    //direction: enumeration
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="FrustumCulling" complement="FrustumCulling">FrustumCulling{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="FullScreenRequest" complement="FullScreenRequest">FullScreenRequest{
    //origin: url
    //toggleOn: bool
}</snippet>
  <snippet group="QML" trigger="GLStateDumpExt" complement="GLStateDumpExt">GLStateDumpExt{
}</snippet>
  <snippet group="QML" trigger="GammaAdjust" complement="GammaAdjust">GammaAdjust{
    //cached: bool
    //gamma: real
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Gauge" complement="Gauge">Gauge{
    //font: font
    //formatValue: var
    //maximumValue: alias
    //minimumValue: alias
    //minorTickmarkCount: int
    //orientation: int
    //tickmarkAlignment: int
    //tickmarkStepSize: real
    //value: alias
}</snippet>
  <snippet group="QML" trigger="GaugeStyle" complement="GaugeStyle">GaugeStyle{
    //background: Component
    //control: Gauge
    //foreground: Component
    //minorTickmark: Component
    //tickmark: Component
    //tickmarkLabel: Component
    //valueBar: Component
    //valuePosition: real
}</snippet>
  <snippet group="QML" trigger="GaussianBlur" complement="GaussianBlur">GaussianBlur{
    //cached: bool
    //deviation: real
    //radius: real
    //samples: int
    //source: variant
    //transparentBorder: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="GeocodeModel" complement="GeocodeModel">GeocodeModel{
    //autoUpdate: bool
    //bounds: geoshape
    //count: int
    //error: enumeration
    //errorString: string
    //limit: int
    //offset: int
    //plugin: Plugin
    //query: QVariant
    //status: enumeration
    //locationsChanged()
}</snippet>
  <snippet group="QML" trigger="Geometry" complement="Geometry">Geometry{
    //attributes: list&lt;Attribute&gt;
    //boundingVolumePositionAttribute: Attribute
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="GeometryRenderer" complement="GeometryRenderer">GeometryRenderer{
    //firstInstance: int
    //firstVertex: int
    //geometry: Geometry
    //indexBufferByteOffset: int
    //indexOffset: int
    //instanceCount: int
    //primitiveRestart: bool
    //primitiveType: enumeration
    //restartIndex: int
    //vertexCount: int
    //verticesPerPatch: int
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="GestureEvent" complement="GestureEvent">GestureEvent{
    //dragThreshold: real
    //touchPoints: list&lt;TouchPoint&gt;
    //grab()
}</snippet>
  <snippet group="QML" trigger="Glow" complement="Glow">Glow{
    //cached: alias
    //color: alias
    //radius: alias
    //samples: alias
    //source: alias
    //spread: alias
    //transparentBorder: alias
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="GoochMaterial" complement="GoochMaterial">GoochMaterial{
    //alpha: real
    //beta: real
    //cool: color
    //diffuse: color
    //shininess: real
    //specular: color
    //warm: color
}</snippet>
  <snippet group="QML" trigger="Gradient" complement="Gradient">Gradient{
    //orientation: enumeration
    //stops: list&lt;GradientStop&gt;
}</snippet>
  <snippet group="QML" trigger="GradientStop" complement="GradientStop">GradientStop{
    //color: color
    //position: real
}</snippet>
  <snippet group="QML" trigger="GraphicsApiFilter" complement="GraphicsApiFilter">GraphicsApiFilter{
    //api: enumeration
    //extensions: stringlist
    //majorVersion: int
    //minorVersion: int
    //profile: enumeration
    //vendor: string
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="GraphicsInfo" complement="GraphicsInfo">GraphicsInfo{
    //api: enumeration
    //majorVersion: int
    //minorVersion: int
    //profile: enumeration
    //renderableType: enumeration
    //shaderCompilationType: enumeration
    //shaderSourceType: enumeration
    //shaderType: enumeration
}</snippet>
  <snippet group="QML" trigger="Gravity" complement="Gravity">Gravity{
    //acceleration: real(obsolete)
    //angle: real
    //magnitude: real
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="Grid" complement="Grid">Grid{
    //add: Transition
    //bottomPadding: real
    //columnSpacing: qreal
    //columns: int
    //effectiveHorizontalItemAlignment: enumeration
    //effectiveLayoutDirection: enumeration
    //flow: enumeration
    //horizontalItemAlignment: enumeration
    //layoutDirection: enumeration
    //leftPadding: real
    //move: Transition
    //padding: real
    //populate: Transition
    //rightPadding: real
    //rowSpacing: qreal
    //rows: int
    //spacing: qreal
    //topPadding: real
    //verticalItemAlignment: enumeration
    //forceLayout()
    //positioningComplete()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="GridLayout" complement="GridLayout">GridLayout{
    //columnSpacing: real
    //columns: int
    //flow: enumeration
    //layoutDirection: enumeration
    //rowSpacing: real
    //rows: int
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="GridMesh" complement="GridMesh">GridMesh{
    //resolution: size
}</snippet>
  <snippet group="QML" trigger="GridView" complement="GridView">GridView{
    //
    //add: Transition
    //addDisplaced: Transition
    //cacheBuffer: int
    //cellHeight: real
    //cellWidth: real
    //count: int
    //currentIndex: int
    //currentItem: Item
    //onDelayremove : Bo: { }
    //delegate: Component
    //displaced: Transition
    //displayMarginBeginning: int
    //displayMarginEnd: int
    //effectiveLayoutDirection: enumeration
    //flow: enumeration
    //footer: Component
    //footerItem: Item
    //header: Component
    //headerItem: Item
    //highlight: Component
    //highlightFollowsCurrentItem: bool
    //highlightItem: Item
    //highlightMoveDuration: int
    //highlightRangeMode: enumeration
    //onIscurrentitem : Bo: { }
    //keyNavigationEnabled: bool
    //keyNavigationWraps: bool
    //layoutDirection: enumeration
    //model: model
    //move: Transition
    //moveDisplaced: Transition
    //populate: Transition
    //preferredHighlightBegin: real
    //preferredHighlightEnd: real
    //remove: Transition
    //removeDisplaced: Transition
    //snapMode: enumeration
    //verticalLayoutDirection: enumeration
    //onView : Gridvi: { }
    //onAdd: { }
    //forceLayout()
    //moveCurrentIndexDown()
    //moveCurrentIndexLeft()
    //moveCurrentIndexRight()
    //moveCurrentIndexUp()
    //positionViewAtBeginning()
    //positionViewAtEnd()
    //positionViewAtIndex(intindex,PositionModemode)
    //onRemove: { }
    //atXBeginning: bool
    //atXEnd: bool
    //atYBeginning: bool
    //atYEnd: bool
    //bottomMargin: real
    //boundsBehavior: enumeration
    //boundsMovement: enumeration
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //contentX: real
    //contentY: real
    //dragging: bool
    //draggingHorizontally: bool
    //draggingVertically: bool
    //flickDeceleration: real
    //flickableDirection: enumeration
    //flicking: bool
    //flickingHorizontally: bool
    //flickingVertically: bool
    //horizontalOvershoot: real
    //horizontalVelocity: real
    //interactive: bool
    //leftMargin: real
    //maximumFlickVelocity: real
    //moving: bool
    //movingHorizontally: bool
    //movingVertically: bool
    //originX: real
    //originY: real
    //pixelAligned: bool
    //pressDelay: int
    //rebound: Transition
    //rightMargin: real
    //synchronousDrag: bool
    //topMargin: real
    //verticalOvershoot: real
    //verticalVelocity: real
    //visibleArea.heightRatio: real
    //visibleArea.widthRatio: real
    //visibleArea.xPosition: real
    //visibleArea.yPosition: real
    //cancelFlick()
    //flick(qrealxVelocity,qrealyVelocity)
    //flickEnded()
    //flickStarted()
    //movementEnded()
    //movementStarted()
    //resizeContent(realwidth,realheight,QPointFcenter)
    //returnToBounds()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="GroupBox" complement="GroupBox">GroupBox{
    //implicitLabelHeight: real
    //implicitLabelWidth: real
    //label: Item
    //title: string
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentWidth: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="GroupGoal" complement="GroupGoal">GroupGoal{
    //goalState: string
    //jump: bool
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="Gyroscope" complement="Gyroscope">Gyroscope{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="GyroscopeReading" complement="GyroscopeReading">GyroscopeReading{
    //x: qreal
    //y: qreal
    //z: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="HBarModelMapper" complement="HBarModelMapper">HBarModelMapper{
    //columnCount: int
    //firstBarSetRow: int
    //firstColumn: int
    //lastBarSetRow: int
    //model: SomeModel
    //series: AbstractBarSeries
}</snippet>
  <snippet group="QML" trigger="HBoxPlotModelMapper" complement="HBoxPlotModelMapper">HBoxPlotModelMapper{
    //columnCount: int
    //firstBoxSetRow: int
    //firstColumn: int
    //lastBoxSetRow: int
    //model: SomeModel
    //series: AbstractBarSeries
}</snippet>
  <snippet group="QML" trigger="HCandlestickModelMapper" complement="HCandlestickModelMapper">HCandlestickModelMapper{
    //closeColumn: int
    //firstSetRow: int
    //highColumn: int
    //lastSetRow: int
    //lowColumn: int
    //model: QAbstractItemModel
    //openColumn: int
    //series: CandlestickSeries
    //timestampColumn: int
}</snippet>
  <snippet group="QML" trigger="HPieModelMapper" complement="HPieModelMapper">HPieModelMapper{
    //columnCount: int
    //firstColumn: int
    //labelsRow: int
    //model: SomeModel
    //series: PieSeries
    //valuesRow: int
}</snippet>
  <snippet group="QML" trigger="HXYModelMapper" complement="HXYModelMapper">HXYModelMapper{
    //columnCount: int
    //firstColumn: int
    //model: SomeModel
    //series: XYSeries
    //xRow: int
    //yRow: int
}</snippet>
  <snippet group="QML" trigger="HandlerPoint" complement="HandlerPoint">HandlerPoint{
    //ellipseDiameters: size
    //id: int
    //modifiers: enumeration
    //position: QPointF
    //pressPosition: QPointF
    //pressedButtons: enumeration
    //pressure: qreal
    //rotation: qreal
    //sceneGrabPosition: QPointF
    //scenePosition: QPointF
    //scenePressPosition: QPointF
    //uniqueId: PointingDeviceUniqueId
    //velocity: QVector2D
}</snippet>
  <snippet group="QML" trigger="HandwritingInputPanel" complement="HandwritingInputPanel">HandwritingInputPanel{
    //active: bool
    //available: bool
    //inputPanel: var
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="HandwritingModeKey" complement="HandwritingModeKey">HandwritingModeKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="HeightMapSurfaceDataProxy" complement="HeightMapSurfaceDataProxy">HeightMapSurfaceDataProxy{
    //heightMapFile: string
    //maxXValue: real
    //maxZValue: real
    //minXValue: real
    //minZValue: real
    //columnCount: int
    //rowCount: int
    //series: Surface3DSeries
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="HideKeyboardKey" complement="HideKeyboardKey">HideKeyboardKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="HistoryState" complement="HistoryState">HistoryState{
    //defaultState: QAbstractState
    //historyType: enumeration
    //active: bool
    //entered()
    //exited()
}</snippet>
  <snippet group="QML" trigger="HolsterReading" complement="HolsterReading">HolsterReading{
    //holstered: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="HolsterSensor" complement="HolsterSensor">HolsterSensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="HorizontalBarSeries" complement="HorizontalBarSeries">HorizontalBarSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //barWidth: real
    //count: int
    //labelsAngle: real
    //labelsFormat: string
    //labelsPosition: enumeration
    //labelsPrecision: real
    //labelsVisible: bool
    //barsetsAdded()
    //barsetsRemoved()
    //clear()
    //clicked(intindex,BarSetbarset)
    //doubleClicked(intindex,BarSetbarset)
    //hovered(boolstatus,intindex,BarSetbarset)
    //pressed(intindex,BarSetbarset)
    //released(intindex,BarSetbarset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="HorizontalPercentBarSeries" complement="HorizontalPercentBarSeries">HorizontalPercentBarSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //barWidth: real
    //count: int
    //labelsAngle: real
    //labelsFormat: string
    //labelsPosition: enumeration
    //labelsPrecision: real
    //labelsVisible: bool
    //barsetsAdded()
    //barsetsRemoved()
    //clear()
    //clicked(intindex,BarSetbarset)
    //doubleClicked(intindex,BarSetbarset)
    //hovered(boolstatus,intindex,BarSetbarset)
    //pressed(intindex,BarSetbarset)
    //released(intindex,BarSetbarset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="HorizontalStackedBarSeries" complement="HorizontalStackedBarSeries">HorizontalStackedBarSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //barWidth: real
    //count: int
    //labelsAngle: real
    //labelsFormat: string
    //labelsPosition: enumeration
    //labelsPrecision: real
    //labelsVisible: bool
    //barsetsAdded()
    //barsetsRemoved()
    //clear()
    //clicked(intindex,BarSetbarset)
    //doubleClicked(intindex,BarSetbarset)
    //hovered(boolstatus,intindex,BarSetbarset)
    //pressed(intindex,BarSetbarset)
    //released(intindex,BarSetbarset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="HoverHandler" complement="HoverHandler">HoverHandler{
}</snippet>
  <snippet group="QML" trigger="HueSaturation" complement="HueSaturation">HueSaturation{
    //cached: bool
    //hue: real
    //lightness: real
    //saturation: real
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="HumidityReading" complement="HumidityReading">HumidityReading{
    //absoluteHumidity: qreal
    //relativeHumidity: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="HumiditySensor" complement="HumiditySensor">HumiditySensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="IRProximityReading" complement="IRProximityReading">IRProximityReading{
    //reflectance: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="IRProximitySensor" complement="IRProximitySensor">IRProximitySensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="Icon" complement="Icon">Icon{
    //icon: QPlaceIcon
    //parameters: Object
    //plugin: Plugin
}</snippet>
  <snippet group="QML" trigger="Image" complement="Image">Image{
    //asynchronous: bool
    //autoTransform: bool
    //cache: bool
    //fillMode: enumeration
    //horizontalAlignment: enumeration
    //mipmap: bool
    //mirror: bool
    //paintedHeight: real
    //paintedWidth: real
    //progress: real
    //smooth: bool
    //source: url
    //sourceSize: QSize
    //status: enumeration
    //verticalAlignment: enumeration
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ImageModel" complement="ImageModel">ImageModel{
    //batchSize: int
    //place: Place
    //totalCount: int
}</snippet>
  <snippet group="QML" trigger="ImageParticle" complement="ImageParticle">ImageParticle{
    //alpha: real
    //alphaVariation: real
    //autoRotation: bool
    //blueVariation: real
    //color: color
    //colorTable: url
    //colorVariation: real
    //entryEffect: EntryEffect
    //greenVariation: real
    //opacityTable: url
    //redVariation: real
    //rotation: real
    //rotationVariation: real
    //rotationVelocity: real
    //rotationVelocityVariation: real
    //sizeTable: url
    //source: url
    //sprites: list&lt;Sprite&gt;
    //spritesInterpolate: bool
    //status: Status
    //xVector: StochasticDirection
    //yVector: StochasticDirection
    //groups: list&lt;string&gt;
    //system: ParticleSystem
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="InnerShadow" complement="InnerShadow">InnerShadow{
    //cached: bool
    //color: color
    //fast: bool
    //horizontalOffset: real
    //radius: real
    //samples: int
    //source: variant
    //spread: real
    //verticalOffset: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="InputChord" complement="InputChord">InputChord{
    //chords: list&lt;AbstractActionInput&gt;
    //timeout: int
}</snippet>
  <snippet group="QML" trigger="InputContext" complement="InputContext">InputContext{
    //anchorPosition: int
    //anchorRectangle: rect
    //animating: bool
    //capsLock: bool(obsolete)
    //capsLockActive: bool
    //cursorPosition: int
    //cursorRectangle: rect
    //inputEngine: InputEngine
    //inputMethodHints: int
    //locale: string
    //preeditText: string
    //selectedText: string
    //shift: bool(obsolete)
    //shiftActive: bool
    //surroundingText: string
    //uppercase: bool
}</snippet>
  <snippet group="QML" trigger="InputEngine" complement="InputEngine">InputEngine{
    //activeKey: int
    //inputMethod: InputMethod
    //inputMode: int
    //inputModes: list&lt;int&gt;
    //patternRecognitionModes: list&lt;int&gt;
    //previousKey: int
    //wordCandidateListModel: QVirtualKeyboardSelectionListModel
    //wordCandidateListVisibleHint: bool
}</snippet>
  <snippet group="QML" trigger="InputHandler3D" complement="InputHandler3D">InputHandler3D{
    //rotationEnabled: bool
    //selectionEnabled: bool
    //zoomAtTargetEnabled: bool
    //zoomEnabled: bool
}</snippet>
  <snippet group="QML" trigger="InputMethod" complement="InputMethod">InputMethod{
    //inputContext: InputContext
    //inputEngine: InputEngine
    //list&lt;int&gt;inputModes(stringlocale)
    //list&lt;int&gt;patternRecognitionModes()
    //reset()
    //selectionListActiveItemChanged(inttype,intindex)
    //selectionListChanged(inttype)
    //list&lt;int&gt;selectionLists()
    //selectionListsChanged()
    //update()
}</snippet>
  <snippet group="QML" trigger="InputModeKey" complement="InputModeKey">InputModeKey{
    //inputModeCount: int
    //inputModeNameList: var
    //inputModes: var
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="InputPanel" complement="InputPanel">InputPanel{
    //active: bool
    //externalLanguageSwitchEnabled: bool
    //externalLanguageSwitch(var,int)
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="InputSequence" complement="InputSequence">InputSequence{
    //buttonInterval: int
    //sequences: list&lt;AbstractActionInput&gt;
    //timeout: int
    //buttonIntervalChanged()
    //timeoutChanged()
}</snippet>
  <snippet group="QML" trigger="InputSettings" complement="InputSettings">InputSettings{
    //eventSource: Object
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Instantiator" complement="Instantiator">Instantiator{
    //active: bool
    //asynchronous: bool
    //count: int
    //delegate: QtQml: : Component
    //model: variant
    //object: QtObject
    //objectAdded(intindex,QtObjectobject)
    //objectRemoved(intindex,QtObjectobject)
}</snippet>
  <snippet group="QML" trigger="IntValidator" complement="IntValidator">IntValidator{
    //bottom: int
    //locale: string
    //top: int
}</snippet>
  <snippet group="QML" trigger="InvokedServices" complement="InvokedServices">InvokedServices{
    //children: var
    //qmlChildren: list&lt;QtObject&gt;
    //stateMachine: ScxmlStateMachine
}</snippet>
  <snippet group="QML" trigger="Item" complement="Item">Item{
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ItemDelegate" complement="ItemDelegate">ItemDelegate{
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ItemGrabResult" complement="ItemGrabResult">ItemGrabResult{
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ItemModelBarDataProxy" complement="ItemModelBarDataProxy">ItemModelBarDataProxy{
    //autoColumnCategories: bool
    //autoRowCategories: bool
    //columnCategories: list&lt;String&gt;
    //columnRole: string
    //columnRolePattern: regExp
    //columnRoleReplace: string
    //itemModel: model
    //multiMatchBehavior: ItemModelBarDataProxy.MultiMatchBehavior
    //rotationRole: string
    //rotationRolePattern: regExp
    //rotationRoleReplace: string
    //rowCategories: list&lt;String&gt;
    //rowRole: string
    //rowRolePattern: regExp
    //rowRoleReplace: string
    //useModelCategories: bool
    //valueRole: string
    //valueRolePattern: regExp
    //valueRoleReplace: string
    //columnLabels: list
    //rowCount: int
    //rowLabels: list
    //series: Bar3DSeries
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="ItemModelScatterDataProxy" complement="ItemModelScatterDataProxy">ItemModelScatterDataProxy{
    //itemModel: model
    //rotationRole: string
    //rotationRolePattern: regExp
    //rotationRoleReplace: string
    //xPosRole: string
    //xPosRolePattern: regExp
    //xPosRoleReplace: string
    //yPosRole: string
    //yPosRolePattern: regExp
    //yPosRoleReplace: string
    //zPosRole: string
    //zPosRolePattern: regExp
    //zPosRoleReplace: string
    //itemCount: int
    //series: Scatter3DSeries
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="ItemModelSurfaceDataProxy" complement="ItemModelSurfaceDataProxy">ItemModelSurfaceDataProxy{
    //autoColumnCategories: bool
    //autoRowCategories: bool
    //columnCategories: list&lt;String&gt;
    //columnRole: string
    //columnRolePattern: regExp
    //columnRoleReplace: string
    //itemModel: model
    //multiMatchBehavior: ItemModelSurfaceDataProxy.MultiMatchBehavior
    //rowCategories: list&lt;String&gt;
    //rowRole: string
    //rowRolePattern: regExp
    //rowRoleReplace: string
    //useModelCategories: bool
    //xPosRole: string
    //xPosRolePattern: regExp
    //xPosRoleReplace: string
    //yPosRole: string
    //yPosRolePattern: regExp
    //yPosRoleReplace: string
    //zPosRole: string
    //zPosRolePattern: regExp
    //zPosRoleReplace: string
    //columnCount: int
    //rowCount: int
    //series: Surface3DSeries
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="ItemParticle" complement="ItemParticle">ItemParticle{
    //delegate: Component
    //fade: bool
    //freeze(Itemitem)
    //give(Itemitem)
    //take(Itemitem,boolprioritize)
    //unfreeze(Itemitem)
    //groups: list&lt;string&gt;
    //system: ParticleSystem
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ItemSelectionModel" complement="ItemSelectionModel">ItemSelectionModel{
    //currentIndex: QModelIndex
    //hasSelection: bool
    //model: QAbstractItemModel
    //selectedIndexes: QModelIndexList
    //selection: object
    //currentChanged(QModelIndexcurrent,QModelIndexprevious)
    //selectionChanged(QItemSelectionselected,QItemSelectiondeselected)
}</snippet>
  <snippet group="QML" trigger="IviApplication" complement="IviApplication">IviApplication{
}</snippet>
  <snippet group="QML" trigger="IviSurface" complement="IviSurface">IviSurface{
    //iviId: int
    //surface: WaylandSurface
}</snippet>
  <snippet group="QML" trigger="JavaScriptDialogRequest" complement="JavaScriptDialogRequest">JavaScriptDialogRequest{
    //accepted: bool
    //defaultText: string
    //message: string
    //securityOrigin: url
    //title: string
    //type: enumeration
}</snippet>
  <snippet group="QML" trigger="Joint" complement="Joint">Joint{
    //childJoints: list&lt;Joint&gt;
    //inverseBindMatrix: matrix4x4
    //rotation: quaternion
    //rotationX: real
    //rotationY: real
    //rotationZ: real
    //scale: vector3d
    //translation: vector3d
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="JumpList" complement="JumpList">JumpList{
    //categories: list&lt;JumpListCategory&gt;
    //frequent: JumpListCategory
    //recent: JumpListCategory
    //tasks: JumpListCategory
}</snippet>
  <snippet group="QML" trigger="JumpListCategory" complement="JumpListCategory">JumpListCategory{
    //items: list&lt;JumpListItem&gt;
    //title: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="JumpListDestination" complement="JumpListDestination">JumpListDestination{
    //filePath: string
}</snippet>
  <snippet group="QML" trigger="JumpListLink" complement="JumpListLink">JumpListLink{
    //arguments: string
    //description: string
    //executablePath: string
    //iconPath: string
    //title: string
}</snippet>
  <snippet group="QML" trigger="JumpListSeparator" complement="JumpListSeparator">JumpListSeparator{
}</snippet>
  <snippet group="QML" trigger="Key" complement="Key">Key{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="KeyEvent" complement="KeyEvent">KeyEvent{
    //accepted: bool
    //count: int
    //isAutoRepeat: bool
    //key: int
    //modifiers: int
    //nativeScanCode: quint32
    //text: string
}</snippet>
  <snippet group="QML" trigger="KeyIcon" complement="KeyIcon">KeyIcon{
    //color: alias
    //source: alias
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="KeyNavigation" complement="KeyNavigation">KeyNavigation{
    //backtab: Item
    //down: Item
    //left: Item
    //priority: enumeration
    //right: Item
    //tab: Item
    //up: Item
}</snippet>
  <snippet group="QML" trigger="KeyPanel" complement="KeyPanel">KeyPanel{
    //control: Item
    //soundEffect: url
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="KeyboardColumn" complement="KeyboardColumn">KeyboardColumn{
    //keyWeight: real
    //smallTextVisible: bool
    //layoutDirection: enumeration
    //spacing: real
}</snippet>
  <snippet group="QML" trigger="KeyboardDevice" complement="KeyboardDevice">KeyboardDevice{
    //activeInput: KeyboardHandler
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="KeyboardHandler" complement="KeyboardHandler">KeyboardHandler{
    //focus: bool
    //sourceDevice: KeyboardDevice
    //asteriskPressed(KeyEventevent)
    //backPressed(KeyEventevent)
    //backtabPressed(KeyEventevent)
    //callPressed(KeyEventevent)
    //cancelPressed(KeyEventevent)
    //context1Pressed(KeyEventevent)
    //context2Pressed(KeyEventevent)
    //context3Pressed(KeyEventevent)
    //context4Pressed(KeyEventevent)
    //deletePressed(KeyEventevent)
    //digit0Pressed(KeyEventevent)
    //digit1Pressed(KeyEventevent)
    //digit2Pressed(KeyEventevent)
    //digit3Pressed(KeyEventevent)
    //digit4Pressed(KeyEventevent)
    //digit5Pressed(KeyEventevent)
    //digit6Pressed(KeyEventevent)
    //digit7Pressed(KeyEventevent)
    //digit8Pressed(KeyEventevent)
    //digit9Pressed(KeyEventevent)
    //downPressed(KeyEventevent)
    //enterPressed(KeyEventevent)
    //escapePressed(KeyEventevent)
    //flipPressed(KeyEventevent)
    //hangupPressed(KeyEventevent)
    //leftPressed(KeyEventevent)
    //menuPressed(KeyEventevent)
    //noPressed(KeyEventevent)
    //numberSignPressed(KeyEventevent)
    //pressed(KeyEventevent)
    //released(KeyEventevent)
    //returnPressed(KeyEventevent)
    //rightPressed(KeyEventevent)
    //selectPressed(KeyEventevent)
    //spacePressed(KeyEventevent)
    //tabPressed(KeyEventevent)
    //upPressed(KeyEventevent)
    //volumeDownPressed(KeyEventevent)
    //volumeUpPressed(KeyEventevent)
    //yesPressed(KeyEventevent)
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="KeyboardLayout" complement="KeyboardLayout">KeyboardLayout{
    //inputMethod: var
    //inputMode: int
    //keyWeight: real
    //sharedLayouts: var
    //smallTextVisible: bool
    //createInputMethod()
    //layoutDirection: enumeration
    //spacing: real
}</snippet>
  <snippet group="QML" trigger="KeyboardLayoutLoader" complement="KeyboardLayoutLoader">KeyboardLayoutLoader{
    //inputMethod: var
    //inputMode: int
    //sharedLayouts: var
    //createInputMethod()
    //active: bool
    //asynchronous: bool
    //item: object
    //progress: real
    //source: url
    //sourceComponent: Component
    //status: enumeration
    //loaded()
    //setSource()
}</snippet>
  <snippet group="QML" trigger="KeyboardRow" complement="KeyboardRow">KeyboardRow{
    //keyWeight: real
    //smallTextVisible: bool
    //layoutDirection: enumeration
    //spacing: real
}</snippet>
  <snippet group="QML" trigger="KeyboardStyle" complement="KeyboardStyle">KeyboardStyle{
    //alternateKeysListBackground: Component
    //alternateKeysListBottomMargin: real
    //alternateKeysListDelegate: Component
    //alternateKeysListHighlight: Component
    //alternateKeysListItemHeight: real
    //alternateKeysListItemWidth: real
    //alternateKeysListLeftMargin: real
    //alternateKeysListRightMargin: real
    //alternateKeysListTopMargin: real
    //backspaceKeyPanel: Component
    //characterPreviewDelegate: Component
    //characterPreviewMargin: real
    //enterKeyPanel: Component
    //fullScreenInputBackground: Component
    //fullScreenInputColor: color
    //fullScreenInputContainerBackground: Component
    //fullScreenInputCursor: Component
    //fullScreenInputFont: font
    //fullScreenInputMargins: real
    //fullScreenInputPadding: real
    //fullScreenInputPasswordCharacter: string
    //fullScreenInputSelectedTextColor: color
    //fullScreenInputSelectionColor: color
    //handwritingKeyPanel: Component
    //hideKeyPanel: Component
    //keyPanel: Component
    //keyboardBackground: Component
    //keyboardDesignHeight: real
    //keyboardDesignWidth: real
    //keyboardHeight: real
    //keyboardRelativeBottomMargin: real
    //keyboardRelativeLeftMargin: real
    //keyboardRelativeRightMargin: real
    //keyboardRelativeTopMargin: real
    //languageKeyPanel: Component
    //languageListAdd: Transition
    //languageListBackground: Component
    //languageListDelegate: Component
    //languageListHighlight: Component
    //languageListRemove: Transition
    //languagePopupListEnabled: bool
    //modeKeyPanel: Component
    //navigationHighlight: Component
    //popupListAdd: Transition
    //popupListBackground: Component
    //popupListDelegate: Component
    //popupListHighlight: Component
    //popupListRemove: Transition
    //scaleHint: real
    //selectionHandle: Component
    //selectionListAdd: Transition
    //selectionListBackground: Component
    //selectionListDelegate: Component
    //selectionListHeight: real
    //selectionListHighlight: Component
    //selectionListRemove: Transition
    //shiftKeyPanel: Component
    //spaceKeyPanel: Component
    //symbolKeyPanel: Component
    //traceCanvasDelegate: Component
    //traceInputKeyPanelDelegate: Component
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="KeyframeAnimation" complement="KeyframeAnimation">KeyframeAnimation{
    //easing: EasingCurve
    //endMode: enumeration
    //framePositions: list&lt;real&gt;
    //keyframes: list&lt;Transform&gt;
    //startMode: enumeration
    //target: Transform
    //targetName: string
    //animationName: string
    //animationType: enumeration
    //duration: real
    //position: real
}</snippet>
  <snippet group="QML" trigger="Keys" complement="Keys">Keys{
    //enabled: bool
    //forwardTo: list&lt;Object&gt;
    //priority: enumeration
    //asteriskPressed(KeyEventevent)
    //backPressed(KeyEventevent)
    //backtabPressed(KeyEventevent)
    //callPressed(KeyEventevent)
    //cancelPressed(KeyEventevent)
    //context1Pressed(KeyEventevent)
    //context2Pressed(KeyEventevent)
    //context3Pressed(KeyEventevent)
    //context4Pressed(KeyEventevent)
    //deletePressed(KeyEventevent)
    //digit0Pressed(KeyEventevent)
    //digit1Pressed(KeyEventevent)
    //digit2Pressed(KeyEventevent)
    //digit3Pressed(KeyEventevent)
    //digit4Pressed(KeyEventevent)
    //digit5Pressed(KeyEventevent)
    //digit6Pressed(KeyEventevent)
    //digit7Pressed(KeyEventevent)
    //digit8Pressed(KeyEventevent)
    //digit9Pressed(KeyEventevent)
    //downPressed(KeyEventevent)
    //enterPressed(KeyEventevent)
    //escapePressed(KeyEventevent)
    //flipPressed(KeyEventevent)
    //hangupPressed(KeyEventevent)
    //leftPressed(KeyEventevent)
    //menuPressed(KeyEventevent)
    //noPressed(KeyEventevent)
    //pressed(KeyEventevent)
    //released(KeyEventevent)
    //returnPressed(KeyEventevent)
    //rightPressed(KeyEventevent)
    //selectPressed(KeyEventevent)
    //shortcutOverride(KeyEventevent)
    //spacePressed(KeyEventevent)
    //tabPressed(KeyEventevent)
    //upPressed(KeyEventevent)
    //volumeDownPressed(KeyEventevent)
    //volumeUpPressed(KeyEventevent)
    //yesPressed(KeyEventevent)
}</snippet>
  <snippet group="QML" trigger="Label" complement="Label">Label{
    //background: Item
    //bottomInset: real
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //leftInset: real
    //palette: palette
    //rightInset: real
    //topInset: real
    //advance: size
    //baseUrl: url
    //bottomPadding: real
    //clip: bool
    //color: color
    //contentHeight: real
    //contentWidth: real
    //effectiveHorizontalAlignment: enumeration
    //elide: enumeration
    //font.bold: bool
    //font.capitalization: enumeration
    //font.family: string
    //font.hintingPreference: enumeration
    //font.italic: bool
    //font.kerning: bool
    //font.letterSpacing: real
    //font.pixelSize: int
    //font.pointSize: real
    //font.preferShaping: bool
    //font.strikeout: bool
    //font.styleName: string
    //font.underline: bool
    //font.weight: enumeration
    //font.wordSpacing: real
    //fontInfo.bold: bool
    //fontInfo.family: string
    //fontInfo.italic: bool
    //fontInfo.pixelSize: string
    //fontInfo.pointSize: real
    //fontInfo.styleName: string
    //fontInfo.weight: int
    //fontSizeMode: enumeration
    //horizontalAlignment: enumeration
    //hoveredLink: string
    //leftPadding: real
    //lineCount: int
    //lineHeight: real
    //lineHeightMode: enumeration
    //linkColor: color
    //maximumLineCount: int
    //minimumPixelSize: int
    //minimumPointSize: int
    //padding: real
    //renderType: enumeration
    //rightPadding: real
    //style: enumeration
    //styleColor: color
    //text: string
    //textFormat: enumeration
    //topPadding: real
    //truncated: bool
    //verticalAlignment: enumeration
    //wrapMode: enumeration
    //doLayout()(obsolete)
    //forceLayout()
    //lineLaidOut()
    //linkActivated()
    //linkAt()
    //linkHovered()
}</snippet>
  <snippet group="QML" trigger="Layer" complement="Layer">Layer{
    //recursive: bool
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="LayerFilter" complement="LayerFilter">LayerFilter{
    //filterMode: enumeration
    //layers: list&lt;Layer&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Layout" complement="Layout">Layout{
    //onAlignment : Qt.Alignme: { }
    //onBottommargin : Re: { }
    //onColumn : I: { }
    //onColumnspan : I: { }
    //onFillheight : Bo: { }
    //onFillwidth : Bo: { }
    //onLeftmargin : Re: { }
    //onMargins : Re: { }
    //onMaximumheight : Re: { }
    //onMaximumwidth : Re: { }
    //onMinimumheight : Re: { }
    //onMinimumwidth : Re: { }
    //onPreferredheight : Re: { }
    //onPreferredwidth : Re: { }
    //onRightmargin : Re: { }
    //onRow : I: { }
    //onRowspan : I: { }
    //onTopmargin : Re: { }
}</snippet>
  <snippet group="QML" trigger="LayoutMirroring" complement="LayoutMirroring">LayoutMirroring{
    //childrenInherit: bool
    //enabled: bool
}</snippet>
  <snippet group="QML" trigger="Legend" complement="Legend">Legend{
    //alignment: alignment
    //backgroundVisible: bool
    //borderColor: color
    //color: color
    //font: Font
    //labelColor: color
    //markerShape: enumeration
    //reverseMarkers: bool
    //showToolTips: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="LerpBlend" complement="LerpBlend">LerpBlend{
    //blendFactor: real
}</snippet>
  <snippet group="QML" trigger="LevelAdjust" complement="LevelAdjust">LevelAdjust{
    //cached: bool
    //gamma: variant
    //maximumInput: color
    //maximumOutput: color
    //minimumInput: color
    //minimumOutput: color
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="LevelOfDetail" complement="LevelOfDetail">LevelOfDetail{
    //ThresholdType: enumeration
    //camera: Camera
    //currentIndex: int
    //thresholdType: int
    //thresholds: QVector&lt;qreal&gt;
    //volumeOverride: int
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="LevelOfDetailBoundingSphere" complement="LevelOfDetailBoundingSphere">LevelOfDetailBoundingSphere{
    //center: QVector3D
    //radius: qreal
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="LevelOfDetailLoader" complement="LevelOfDetailLoader">LevelOfDetailLoader{
    //sources: list&lt;string&gt;
    //components: list&lt;Component3D&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="LevelOfDetailSwitch" complement="LevelOfDetailSwitch">LevelOfDetailSwitch{
    //currentIndex: int
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="LidReading" complement="LidReading">LidReading{
    //backLidClosed: qreal
    //frontLidClosed: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="LidSensor" complement="LidSensor">LidSensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="Light" complement="Light">Light{
}</snippet>
  <snippet group="QML" trigger="Light3D" complement="Light3D">Light3D{
    //autoPosition: bool
}</snippet>
  <snippet group="QML" trigger="LightReading" complement="LightReading">LightReading{
    //illuminance: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="LightSensor" complement="LightSensor">LightSensor{
    //fieldOfView: qreal
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="LineSeries" complement="LineSeries">LineSeries{
    //capStyle: Qt: : PenCapStyle
    //count: int
    //style: Qt: : PenStyle
    //width: real
    //axisAngular: AbstractAxis
    //axisRadial: AbstractAxis
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //color: color
    //pointLabelsClipping: bool
    //pointLabelsColor: font
    //pointLabelsFont: font
    //pointLabelsFormat: string
    //pointLabelsVisible: bool
    //pointsVisible: bool
    //append(realx,realy)
    //clicked(pointpoint)
    //doubleClicked(pointpoint)
    //hovered(pointpoint,boolstate)
    //insert(intindex,realx,realy)
    //pointAdded(intindex)
    //pointRemoved(intindex)
    //pointReplaced(intindex)
    //pointsRemoved(intindex,intcount)
    //pointsReplaced()
    //pressed(pointpoint)
    //released(pointpoint)
    //remove(realx,realy)
    //remove(intindex)
    //removePoints(intindex,intcount)
    //replace(realoldX,realoldY,realnewX,realnewY)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="LineShape" complement="LineShape">LineShape{
    //mirrored: bool
}</snippet>
  <snippet group="QML" trigger="LineWidth" complement="LineWidth">LineWidth{
    //value: real
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="LinearGradient" complement="LinearGradient">LinearGradient{
    //cached: bool
    //end: variant
    //gradient: Gradient
    //source: variant
    //start: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ListElement" complement="ListElement">ListElement{
}</snippet>
  <snippet group="QML" trigger="ListModel" complement="ListModel">ListModel{
    //count: int
    //dynamicRoles: bool
    //append(jsobjectdict)
    //clear()
    //insert(intindex,jsobjectdict)
    //move(intfrom,intto,intn)
    //remove(intindex,intcount=1)
    //set(intindex,jsobjectdict)
    //setProperty(intindex,stringproperty,variantvalue)
    //sync()
}</snippet>
  <snippet group="QML" trigger="ListView" complement="ListView">ListView{
    //
    //add: Transition
    //addDisplaced: Transition
    //cacheBuffer: int
    //count: int
    //currentIndex: int
    //currentItem: Item
    //currentSection: string
    //onDelayremove : Bo: { }
    //delegate: Component
    //displaced: Transition
    //displayMarginBeginning: int
    //displayMarginEnd: int
    //effectiveLayoutDirection: enumeration
    //footer: Component
    //footerItem: Item
    //footerPositioning: enumeration
    //header: Component
    //headerItem: Item
    //headerPositioning: enumeration
    //highlight: Component
    //highlightFollowsCurrentItem: bool
    //highlightItem: Item
    //highlightMoveDuration: int
    //highlightMoveVelocity: real
    //highlightRangeMode: enumeration
    //highlightResizeDuration: int
    //highlightResizeVelocity: real
    //onIscurrentitem : Bo: { }
    //keyNavigationEnabled: bool
    //keyNavigationWraps: bool
    //layoutDirection: enumeration
    //model: model
    //move: Transition
    //moveDisplaced: Transition
    //onNextsection : Stri: { }
    //orientation: enumeration
    //populate: Transition
    //preferredHighlightBegin: real
    //preferredHighlightEnd: real
    //onPrevioussection : Stri: { }
    //remove: Transition
    //removeDisplaced: Transition
    //onSection : Stri: { }
    //section.criteria: enumeration
    //section.delegate: Component
    //section.labelPositioning: enumeration
    //section.property: string
    //snapMode: enumeration
    //spacing: real
    //verticalLayoutDirection: enumeration
    //onView : Listvi: { }
    //onAdd: { }
    //decrementCurrentIndex()
    //forceLayout()
    //incrementCurrentIndex()
    //positionViewAtBeginning()
    //positionViewAtEnd()
    //positionViewAtIndex(intindex,PositionModemode)
    //onRemove: { }
    //atXBeginning: bool
    //atXEnd: bool
    //atYBeginning: bool
    //atYEnd: bool
    //bottomMargin: real
    //boundsBehavior: enumeration
    //boundsMovement: enumeration
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //contentX: real
    //contentY: real
    //dragging: bool
    //draggingHorizontally: bool
    //draggingVertically: bool
    //flickDeceleration: real
    //flickableDirection: enumeration
    //flicking: bool
    //flickingHorizontally: bool
    //flickingVertically: bool
    //horizontalOvershoot: real
    //horizontalVelocity: real
    //interactive: bool
    //leftMargin: real
    //maximumFlickVelocity: real
    //moving: bool
    //movingHorizontally: bool
    //movingVertically: bool
    //originX: real
    //originY: real
    //pixelAligned: bool
    //pressDelay: int
    //rebound: Transition
    //rightMargin: real
    //synchronousDrag: bool
    //topMargin: real
    //verticalOvershoot: real
    //verticalVelocity: real
    //visibleArea.heightRatio: real
    //visibleArea.widthRatio: real
    //visibleArea.xPosition: real
    //visibleArea.yPosition: real
    //cancelFlick()
    //flick(qrealxVelocity,qrealyVelocity)
    //flickEnded()
    //flickStarted()
    //movementEnded()
    //movementStarted()
    //resizeContent(realwidth,realheight,QPointFcenter)
    //returnToBounds()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Loader" complement="Loader">Loader{
    //active: bool
    //asynchronous: bool
    //item: object
    //progress: real
    //source: url
    //sourceComponent: Component
    //status: enumeration
    //loaded()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Locale" complement="Locale">Locale{
    //amText: string
    //decimalPoint: string
    //exponential: string
    //firstDayOfWeek: enumeration
    //groupSeparator: string
    //measurementSystem: enumeration
    //name: string
    //nativeCountryName: string
    //nativeLanguageName: string
    //negativeSign: string
    //percent: string
    //pmText: string
    //positiveSign: string
    //textDirection: enumeration
    //uiLanguages: Array&lt;string&gt;
    //weekDays: Array&lt;int&gt;
    //zeroDigit: string
}</snippet>
  <snippet group="QML" trigger="Location" complement="Location">Location{
    //address: Address
    //boundingBox: georectangle
    //coordinate: coordinate
    //location: QGeoLocation
}</snippet>
  <snippet group="QML" trigger="LogValueAxis" complement="LogValueAxis">LogValueAxis{
    //base: real
    //labelFormat: real
    //max: real
    //min: real
    //minorTickCount: int
    //tickCount: int
    //minorTickCountChanged(intminorTickCount)
    //tickCountChanged(inttickCount)
    //alignment: alignment
    //color: color
    //gridLineColor: color
    //gridVisible: bool
    //labelsAngle: int
    //labelsColor: color
    //labelsFont: font
    //labelsVisible: bool
    //lineVisible: bool
    //minorGridLineColor: color
    //minorGridVisible: bool
    //orientation: Qt.Orientation
    //reverse: alignment
    //shadesBorderColor: color
    //shadesColor: color
    //shadesVisible: bool
    //titleFont: font
    //titleText: string
    //titleVisible: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="LogValueAxis3DFormatter" complement="LogValueAxis3DFormatter">LogValueAxis3DFormatter{
    //autoSubGrid: bool
    //base: real
    //showEdgeLabels: bool
}</snippet>
  <snippet group="QML" trigger="LoggingCategory" complement="LoggingCategory">LoggingCategory{
    //defaultLogLevel: enumeration
    //name: string
}</snippet>
  <snippet group="QML" trigger="LogicalDevice" complement="LogicalDevice">LogicalDevice{
    //actions: list&lt;Action&gt;
    //axis: list&lt;Axis&gt;
}</snippet>
  <snippet group="QML" trigger="Magnetometer" complement="Magnetometer">Magnetometer{
    //returnGeoValues: bool
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="MagnetometerReading" complement="MagnetometerReading">MagnetometerReading{
    //calibrationLevel: qreal
    //x: qreal
    //y: qreal
    //z: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="Map" complement="Map">Map{
    //activeMapType: MapType
    //bearing: real
    //center: coordinate
    //color: color
    //copyrightsVisible: bool
    //error: enumeration
    //errorString: string
    //fieldOfView: real
    //gesture: MapGestureArea
    //mapItems: list&lt;MapItem&gt;
    //mapParameters: list&lt;MapParameters&gt;
    //mapReady: bool
    //maximumFieldOfView: real
    //maximumTilt: real
    //maximumZoomLevel: real
    //minimumFieldOfView: real
    //minimumTilt: real
    //minimumZoomLevel: real
    //plugin: Plugin
    //supportedMapTypes: list&lt;MapType&gt;
    //tilt: real
    //visibleArea: rect
    //visibleRegion: geoshape
    //zoomLevel: real
    //copyrightLinkActivated(stringlink)
}</snippet>
  <snippet group="QML" trigger="MapCircle" complement="MapCircle">MapCircle{
    //border.color: color
    //border.width: int
    //center: coordinate
    //color: color
    //opacity: real
    //radius: real
}</snippet>
  <snippet group="QML" trigger="MapCircleObject" complement="MapCircleObject">MapCircleObject{
    //border.color: color
    //border.width: int
    //center: coordinate
    //color: color
    //radius: real
}</snippet>
  <snippet group="QML" trigger="MapCopyrightNotice" complement="MapCopyrightNotice">MapCopyrightNotice{
    //mapSource: Map
    //styleSheet: string
}</snippet>
  <snippet group="QML" trigger="MapGestureArea" complement="MapGestureArea">MapGestureArea{
    //acceptedGestures: enumeration
    //enabled: bool
    //flickDeceleration: real
    //maximumZoomLevelChange: real
    //panActive: bool
    //pinchActive: bool
    //preventStealing: bool
    //rotationActive: bool
    //tiltActive: bool
    //flickFinished()
    //flickStarted()
    //panFinished()
    //panStarted()
    //pinchFinished(PinchEventevent)
    //pinchStarted(PinchEventevent)
    //pinchUpdated(PinchEventevent)
    //rotationFinished(PinchEventevent)
    //rotationStarted(PinchEventevent)
    //rotationUpdated(PinchEventevent)
    //tiltFinished(PinchEventevent)
    //tiltStarted(PinchEventevent)
    //tiltUpdated(PinchEventevent)
}</snippet>
  <snippet group="QML" trigger="MapIconObject" complement="MapIconObject">MapIconObject{
    //content: Variant
    //coordinate: Variant
    //size: Variant
}</snippet>
  <snippet group="QML" trigger="MapItemGroup" complement="MapItemGroup">MapItemGroup{
}</snippet>
  <snippet group="QML" trigger="MapItemView" complement="MapItemView">MapItemView{
    //add: Transition
    //autoFitViewport: Component
    //delegate: Component
    //model: model
    //remove: Transition
}</snippet>
  <snippet group="QML" trigger="MapObjectView" complement="MapObjectView">MapObjectView{
    //delegate: Component
    //model: Variant
}</snippet>
  <snippet group="QML" trigger="MapParameter" complement="MapParameter">MapParameter{
}</snippet>
  <snippet group="QML" trigger="MapPinchEvent" complement="MapPinchEvent">MapPinchEvent{
    //accepted: bool
    //angle: real
    //center: QPoint
    //point1: QPoint
    //point2: QPoint
    //pointCount: int
}</snippet>
  <snippet group="QML" trigger="MapPolygon" complement="MapPolygon">MapPolygon{
    //border.color: color
    //border.width: int
    //color: color
    //path: list&lt;coordinate&gt;
}</snippet>
  <snippet group="QML" trigger="MapPolygonObject" complement="MapPolygonObject">MapPolygonObject{
    //border.color: color
    //border.width: int
    //color: color
    //path: VariantList
}</snippet>
  <snippet group="QML" trigger="MapPolyline" complement="MapPolyline">MapPolyline{
    //line.color: color
    //line.width: int
    //path: list&lt;coordinate&gt;
}</snippet>
  <snippet group="QML" trigger="MapPolylineObject" complement="MapPolylineObject">MapPolylineObject{
    //line.color: color
    //line.width: int
    //path: VariantList
}</snippet>
  <snippet group="QML" trigger="MapQuickItem" complement="MapQuickItem">MapQuickItem{
    //anchorPoint: QPointF
    //coordinate: coordinate
    //sourceItem: object
    //zoomLevel: real
}</snippet>
  <snippet group="QML" trigger="MapRectangle" complement="MapRectangle">MapRectangle{
    //border.color: color
    //border.width: int
    //bottomRight: coordinate
    //color: color
    //opacity: real
    //topLeft: coordinate
}</snippet>
  <snippet group="QML" trigger="MapRoute" complement="MapRoute">MapRoute{
    //line.color: color
    //line.width: int
    //route: Route
}</snippet>
  <snippet group="QML" trigger="MapRouteObject" complement="MapRouteObject">MapRouteObject{
    //route: Route
}</snippet>
  <snippet group="QML" trigger="MapType" complement="MapType">MapType{
    //cameraCapabilities: CameraCapabilities
    //description: string
    //metadata: VariantMap
    //mobile: bool
    //name: string
    //night: bool
    //style: enumeration
}</snippet>
  <snippet group="QML" trigger="Margins" complement="Margins">Margins{
    //bottom: int
    //left: int
    //right: int
    //top: int
}</snippet>
  <snippet group="QML" trigger="MaskShape" complement="MaskShape">MaskShape{
    //source: url
}</snippet>
  <snippet group="QML" trigger="MaskedBlur" complement="MaskedBlur">MaskedBlur{
    //cached: alias
    //maskSource: alias
    //radius: alias
    //samples: alias
    //source: alias
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Material" complement="Material">Material{
    //effect: Effect
    //parameters: list&lt;Parameter&gt;
}</snippet>
  <snippet group="QML" trigger="Matrix4x4" complement="Matrix4x4">Matrix4x4{
    //matrix: QMatrix4x4
}</snippet>
  <snippet group="QML" trigger="MediaPlayer" complement="MediaPlayer">MediaPlayer{
    //audioRole: enumeration
    //autoLoad: bool
    //autoPlay: bool
    //availability: enumeration
    //bufferProgress: real
    //customAudioRole: string
    //duration: int
    //error: enumeration
    //errorString: string
    //hasAudio: bool
    //hasVideo: bool
    //loops: int
    //mediaObject: variant
    //metaData.albumArtist: variant
    //metaData.albumTitle: variant
    //metaData.audioBitRate: variant
    //metaData.audioCodec: variant
    //metaData.author: variant
    //metaData.averageLevel: variant
    //metaData.category: variant
    //metaData.channelCount: variant
    //metaData.chapterNumber: variant
    //metaData.comment: variant
    //metaData.composer: variant
    //metaData.conductor: variant
    //metaData.contributingArtist: variant
    //metaData.copyright: variant
    //metaData.coverArtUrlLarge: variant
    //metaData.coverArtUrlSmall: variant
    //metaData.date: variant
    //metaData.description: variant
    //metaData.director: variant
    //metaData.genre: variant
    //metaData.keywords: variant
    //metaData.language: variant
    //metaData.leadPerformer: variant
    //metaData.lyrics: variant
    //metaData.mediaType: variant
    //metaData.mood: variant
    //metaData.parentalRating: variant
    //metaData.peakValue: variant
    //metaData.pixelAspectRatio: variant
    //metaData.posterUrl: variant
    //metaData.publisher: variant
    //metaData.ratingOrganization: variant
    //metaData.resolution: variant
    //metaData.sampleRate: variant
    //metaData.size: variant
    //metaData.subTitle: variant
    //metaData.title: variant
    //metaData.trackCount: variant
    //metaData.trackNumber: variant
    //metaData.userRating: variant
    //metaData.videoBitRate: variant
    //metaData.videoCodec: variant
    //metaData.videoFrameRate: variant
    //metaData.writer: variant
    //metaData.year: variant
    //muted: bool
    //notifyInterval: int
    //playbackRate: real
    //playbackState: enumeration
    //playlist: Playlist
    //position: int
    //seekable: bool
    //source: url
    //status: enumeration
    //volume: real
    //error(error,errorString)
    //pause()
    //paused()
    //play()
    //playbackStateChanged()
    //playing()
    //seek(offset)
    //stop()
    //stopped()
    //list&lt;int&gt;supportedAudioRoles()
}</snippet>
  <snippet group="QML" trigger="MemoryBarrier" complement="MemoryBarrier">MemoryBarrier{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Menu" complement="Menu">Menu{
    //
    //
    //
    //cascade: bool
    //contentData: list&lt;Object&gt;
    //contentModel: model
    //count: int
    //currentIndex: int
    //delegate: Component
    //overlap: real
    //title: string
    //activeFocus: bool
    //anchors.centerIn: Object
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomMargin: real
    //bottomPadding: real
    //clip: bool
    //closePolicy: enumeration
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //dim: bool
    //enabled: bool
    //enter: Transition
    //exit: Transition
    //focus: bool
    //font: font
    //height: real
    //horizontalPadding: real
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //implicitHeight: real
    //implicitWidth: real
    //leftInset: real
    //leftMargin: real
    //leftPadding: real
    //locale: Locale
    //margins: real
    //mirrored: bool
    //modal: bool
    //opacity: real
    //opened: bool
    //padding: real
    //palette: palette
    //parent: Item
    //rightInset: real
    //rightMargin: real
    //rightPadding: real
    //scale: real
    //spacing: real
    //topInset: real
    //topMargin: real
    //topPadding: real
    //transformOrigin: enumeration
    //verticalPadding: real
    //visible: bool
    //width: real
    //x: real
    //y: real
    //z: real
    //forceActiveFocus(reason=Qt.OtherFocusReason)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="MenuBar" complement="MenuBar">MenuBar{
    //contentHeight: real
    //contentWidth: real
    //delegate: Component
    //menus: list&lt;Menu&gt;
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentModel: model
    //contentWidth: real
    //count: int
    //currentIndex: int
    //currentItem: Item
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="MenuBarItem" complement="MenuBarItem">MenuBarItem{
    //highlighted: bool
    //menu: Menu
    //menuBar: Menu
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="MenuBarStyle" complement="MenuBarStyle">MenuBarStyle{
    //background: Component
    //font: font
    //itemDelegate: Component
    //menuStyle: Component
}</snippet>
  <snippet group="QML" trigger="MenuItem" complement="MenuItem">MenuItem{
    //arrow: Item
    //highlighted: bool
    //menu: Menu
    //subMenu: Menu
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="MenuSeparator" complement="MenuSeparator">MenuSeparator{
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="MenuStyle" complement="MenuStyle">MenuStyle{
    //font: font
    //frame: Component
    //itemDelegate: Object
    //scrollIndicator: Component
    //separator: Component
    //submenuOverlap: int
    //submenuPopupDelay: int
}</snippet>
  <snippet group="QML" trigger="Mesh" complement="Mesh">Mesh{
    //meshName: string
    //source: url
    //status: enumeration
}</snippet>
  <snippet group="QML" trigger="MessageDialog" complement="MessageDialog">MessageDialog{
    //clickedButton: StandardButton
    //detailedText: string
    //icon: QQuickStandardIcon: : Icon
    //informativeText: string
    //modality: Qt: : WindowModality
    //standardButtons: StandardButtons
    //text: string
    //title: string
    //visible: bool
    //accepted()
    //apply()
    //discard()
    //help()
    //no()
    //rejected()
    //reset()
    //yes()
}</snippet>
  <snippet group="QML" trigger="ModeKey" complement="ModeKey">ModeKey{
    //mode: bool
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="MorphTarget" complement="MorphTarget">MorphTarget{
    //attributeNames: list&lt;string&gt;
    //attributes: list&lt;Attribute&gt;
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="MorphingAnimation" complement="MorphingAnimation">MorphingAnimation{
    //easing: EasingCurve
    //interpolator: real
    //method: enumeration
    //morphTargets: list&lt;MorphTarget&gt;
    //target: GeometryRenderer
    //targetName: string
    //targetPositions: list&lt;real&gt;
    //animationName: string
    //animationType: enumeration
    //duration: real
    //position: real
}</snippet>
  <snippet group="QML" trigger="MouseArea" complement="MouseArea">MouseArea{
    //acceptedButtons: Qt: : MouseButtons
    //containsMouse: bool
    //containsPress: bool
    //cursorShape: Qt: : CursorShape
    //drag.active: bool
    //drag.axis: enumeration
    //drag.filterChildren: bool
    //drag.maximumX: real
    //drag.maximumY: real
    //drag.minimumX: real
    //drag.minimumY: real
    //drag.target: Item
    //drag.threshold: real
    //enabled: bool
    //hoverEnabled: bool
    //mouseX: real
    //mouseY: real
    //pressAndHoldInterval: int
    //pressed: bool
    //pressedButtons: MouseButtons
    //preventStealing: bool
    //propagateComposedEvents: bool
    //scrollGestureEnabled: bool
    //canceled()
    //clicked(MouseEventmouse)
    //doubleClicked(MouseEventmouse)
    //entered()
    //exited()
    //positionChanged(MouseEventmouse)
    //pressAndHold(MouseEventmouse)
    //pressed(MouseEventmouse)
    //released(MouseEventmouse)
    //wheel(WheelEventwheel)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="MouseDevice" complement="MouseDevice">MouseDevice{
    //sensitivity: real
}</snippet>
  <snippet group="QML" trigger="MouseEvent" complement="MouseEvent">MouseEvent{
    //accepted: bool
    //button: Buttons
    //buttons: int
    //modifiers: Modifiers
    //wasHeld: bool
    //x: int
    //y: int
}</snippet>
  <snippet group="QML" trigger="MouseHandler" complement="MouseHandler">MouseHandler{
    //containsMouse: bool
    //sourceDevice: MouseDevice
    //clicked(MouseEventmouse)
    //doubleClicked(MouseEventmouse)
    //entered()
    //exited()
    //positionChanged(MouseEventmouse)
    //pressAndHold(MouseEventmouse)
    //pressed(MouseEventmouse)
    //released(MouseEventmouse)
    //wheel(MouseEventmouse)
}</snippet>
  <snippet group="QML" trigger="MultiPointHandler" complement="MultiPointHandler">MultiPointHandler{
    //acceptedButtons: flags
    //acceptedDevices: flags
    //acceptedModifiers: flags
    //acceptedPointerTypes: flags
    //active: bool
    //centroid: QtQuick: : HandlerPoint
    //enabled: bool
    //grabPermissions: flags
    //margin: real
    //maximumPointCount: int
    //minimumPointCount: int
    //parent: Item
    //target: Item
    //canceled(EventPointpoint)
    //grabChanged(GrabTransitiontransition,EventPointpoint)
}</snippet>
  <snippet group="QML" trigger="MultiPointTouchArea" complement="MultiPointTouchArea">MultiPointTouchArea{
    //maximumTouchPoints: int
    //minimumTouchPoints: int
    //mouseEnabled: bool
    //touchPoints: list&lt;TouchPoint&gt;
    //canceled(list&lt;TouchPoint&gt;touchPoints)
    //gestureStarted(GestureEventgesture)
    //pressed(list&lt;TouchPoint&gt;touchPoints)
    //released(list&lt;TouchPoint&gt;touchPoints)
    //touchUpdated(list&lt;TouchPoint&gt;touchPoints)
    //updated(list&lt;TouchPoint&gt;touchPoints)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="MultiSampleAntiAliasing" complement="MultiSampleAntiAliasing">MultiSampleAntiAliasing{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Navigator" complement="Navigator">Navigator{
    //active: bool
    //currentRoute: Route
    //currentSegment: int
    //map: Map
    //navigatorReady: bool
    //plugin: Plugin
    //positionSource: PositionSource
    //route: Route
    //trackPositionSource: bool
    //destinationReached()
    //waypointReached(Waypointwaypoint)
}</snippet>
  <snippet group="QML" trigger="NdefFilter" complement="NdefFilter">NdefFilter{
    //maximum: int
    //minimum: int
    //type: string
    //typeNameFormat: QQmlNdefRecord: : TypeNameFormat
}</snippet>
  <snippet group="QML" trigger="NdefMimeRecord" complement="NdefMimeRecord">NdefMimeRecord{
    //uri: string
    //record: string
    //type: string
    //typeNameFormat: enumeration
}</snippet>
  <snippet group="QML" trigger="NdefRecord" complement="NdefRecord">NdefRecord{
    //record: string
    //type: string
    //typeNameFormat: enumeration
}</snippet>
  <snippet group="QML" trigger="NdefTextRecord" complement="NdefTextRecord">NdefTextRecord{
    //locale: string
    //localeMatch: enumeration
    //text: string
    //record: string
    //type: string
    //typeNameFormat: enumeration
}</snippet>
  <snippet group="QML" trigger="NdefUriRecord" complement="NdefUriRecord">NdefUriRecord{
    //uri: string
    //record: string
    //type: string
    //typeNameFormat: enumeration
}</snippet>
  <snippet group="QML" trigger="NearField" complement="NearField">NearField{
    //filter: list&lt;NdefFilter&gt;
    //messageRecords: list&lt;NdefRecord&gt;
    //orderMatch: bool
    //polling: bool
    //tagFound()
    //tagRemoved()
}</snippet>
  <snippet group="QML" trigger="NoDepthMask" complement="NoDepthMask">NoDepthMask{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="NoDraw" complement="NoDraw">NoDraw{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Node" complement="Node">Node{
    //heartbeatInterval: int
    //persistedStore: QRemoteObjectAbstractPersistedStore
    //registryUrl: url
}</snippet>
  <snippet group="QML" trigger="NodeInstantiator" complement="NodeInstantiator">NodeInstantiator{
    //active: bool
    //asynchronous: bool
    //count: int
    //delegate: QtQml: : Component
    //model: variant
    //object: QtQml: : QtObject
    //objectAdded(intindex,QtObjectobject)
    //QtQml: : QtObjectobjectAt(intindex)
    //objectRemoved(intindex,QtObjectobject)
}</snippet>
  <snippet group="QML" trigger="NormalDiffuseMapAlphaMaterial" complement="NormalDiffuseMapAlphaMaterial">NormalDiffuseMapAlphaMaterial{
    //ambient: color
    //diffuse: TextureImage
    //normal: TextureImage
    //shininess: real
    //specular: color
    //textureScale: real
}</snippet>
  <snippet group="QML" trigger="NormalDiffuseMapMaterial" complement="NormalDiffuseMapMaterial">NormalDiffuseMapMaterial{
    //ambient: color
    //diffuse: TextureImage
    //normal: TextureImage
    //shininess: real
    //specular: color
    //textureScale: real
}</snippet>
  <snippet group="QML" trigger="NormalDiffuseSpecularMapMaterial" complement="NormalDiffuseSpecularMapMaterial">NormalDiffuseSpecularMapMaterial{
    //ambient: color
    //diffuse: TextureImage
    //normal: TextureImage
    //shininess: real
    //specular: TextureImage
    //textureScale: real
}</snippet>
  <snippet group="QML" trigger="Number" complement="Number">Number{
}</snippet>
  <snippet group="QML" trigger="NumberAnimation" complement="NumberAnimation">NumberAnimation{
    //from: real
    //to: real
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="NumberKey" complement="NumberKey">NumberKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Object3D" complement="Object3D">Object3D{
    //position: vector3d
}</snippet>
  <snippet group="QML" trigger="ObjectModel" complement="ObjectModel">ObjectModel{
    //count: int
    //onIndex : I: { }
    //append(objectitem)
    //clear()
    //insert(intindex,objectitem)
    //move(intfrom,intto,intn=1)
    //remove(intindex,intn=1)
}</snippet>
  <snippet group="QML" trigger="ObjectPicker" complement="ObjectPicker">ObjectPicker{
    //containsMouse: bool
    //dragEnabled: bool
    //hoverEnabled: bool
    //pressed: bool
    //clicked(PickEventpick)
    //clicked(PickEventpick)
    //entered()
    //exited()
    //moved(PickEventpick)
    //pressed(PickEventpick)
    //released(PickEventpick)
}</snippet>
  <snippet group="QML" trigger="OpacityAnimator" complement="OpacityAnimator">OpacityAnimator{
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //from: real
    //target: QtQuick: : Item
    //to: real
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="OpacityMask" complement="OpacityMask">OpacityMask{
    //cached: bool
    //invert: bool
    //maskSource: variant
    //source: variant
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="OpenGLInfo" complement="OpenGLInfo">OpenGLInfo{
    //majorVersion: int
    //minorVersion: int
    //profile: enumeration
    //renderableType: enumeration
}</snippet>
  <snippet group="QML" trigger="OrbitCameraController" complement="OrbitCameraController">OrbitCameraController{
    //camera: Camera
    //linearSpeed: real
    //lookSpeed: real
    //zoomLimit: real
}</snippet>
  <snippet group="QML" trigger="OrientationReading" complement="OrientationReading">OrientationReading{
    //orientation: Orientation
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="OrientationSensor" complement="OrientationSensor">OrientationSensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="Overlay" complement="Overlay">Overlay{
    //onModal : Compone: { }
    //onModeless : Compone: { }
    //onOverlay : Overl: { }
    //onPressed: { }
    //onReleased: { }
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Package" complement="Package">Package{
    //onName : Stri: { }
}</snippet>
  <snippet group="QML" trigger="Page" complement="Page">Page{
    //footer: Item
    //header: Item
    //implicitFooterHeight: real
    //implicitFooterWidth: real
    //implicitHeaderHeight: real
    //implicitHeaderWidth: real
    //title: string
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentWidth: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="PageIndicator" complement="PageIndicator">PageIndicator{
    //count: int
    //currentIndex: int
    //delegate: Component
    //interactive: bool
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Pane" complement="Pane">Pane{
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentWidth: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ParallelAnimation" complement="ParallelAnimation">ParallelAnimation{
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="Parameter" complement="Parameter">Parameter{
    //name: QString
    //value: QVariant
}</snippet>
  <snippet group="QML" trigger="ParentAnimation" complement="ParentAnimation">ParentAnimation{
    //newParent: Item
    //target: Item
    //via: Item
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="ParentChange" complement="ParentChange">ParentChange{
    //height: real
    //parent: Item
    //rotation: real
    //scale: real
    //target: Item
    //width: real
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="Particle" complement="Particle">Particle{
    //alpha: real
    //autoRotate: bool
    //ax: real
    //ay: real
    //blue: real
    //currentSize: real
    //endSize: real
    //green: real
    //initialAX: real
    //initialAY: real
    //initialVX: real
    //initialVY: real
    //initialX: real
    //initialY: real
    //lifeLeft: real
    //lifeSpan: real
    //red: real
    //rotation: real
    //rotationVelocity: real
    //startSize: real
    //t: real
    //update: bool
    //vx: real
    //vy: real
    //x: real
    //xDeformationVectorX: real
    //xDeformationVectorY: real
    //y: real
    //yDeformationVectorX: real
    //yDeformationVectorY: real
}</snippet>
  <snippet group="QML" trigger="ParticleGroup" complement="ParticleGroup">ParticleGroup{
    //duration: int
    //durationVariation: ParticleSystem
    //name: string
    //system: ParticleSystem
    //to: ParticleSystem
}</snippet>
  <snippet group="QML" trigger="ParticlePainter" complement="ParticlePainter">ParticlePainter{
    //groups: list&lt;string&gt;
    //system: ParticleSystem
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ParticleSystem" complement="ParticleSystem">ParticleSystem{
    //empty: bool
    //particleStates: list&lt;Sprite&gt;
    //paused: bool
    //running: bool
    //pause()
    //reset()
    //restart()
    //resume()
    //start()
    //stop()
}</snippet>
  <snippet group="QML" trigger="Path" complement="Path">Path{
    //closed: bool
    //pathElements: list&lt;PathElement&gt;
    //startX: real
    //startY: real
}</snippet>
  <snippet group="QML" trigger="PathAngleArc" complement="PathAngleArc">PathAngleArc{
    //centerX: real
    //centerY: real
    //moveToStart: bool
    //radiusX: real
    //radiusY: real
    //startAngle: real
    //sweepAngle: real
}</snippet>
  <snippet group="QML" trigger="PathAnimation" complement="PathAnimation">PathAnimation{
    //anchorPoint: point
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //endRotation: real
    //orientation: enumeration
    //orientationEntryDuration: real
    //orientationExitDuration: real
    //path: Path
    //target: Item
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="PathArc" complement="PathArc">PathArc{
    //direction: enumeration
    //radiusX: real
    //radiusY: real
    //relativeX: real
    //relativeY: real
    //useLargeArc: bool
    //x: real
    //xAxisRotation: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="PathAttribute" complement="PathAttribute">PathAttribute{
    //name: string
    //value: real
}</snippet>
  <snippet group="QML" trigger="PathCubic" complement="PathCubic">PathCubic{
    //control1X: real
    //control1Y: real
    //control2X: real
    //control2Y: real
    //relativeControl1X: real
    //relativeControl1Y: real
    //relativeControl2X: real
    //relativeControl2Y: real
    //relativeX: real
    //relativeY: real
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="PathCurve" complement="PathCurve">PathCurve{
    //relativeX: real
    //relativeY: real
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="PathElement" complement="PathElement">PathElement{
}</snippet>
  <snippet group="QML" trigger="PathInterpolator" complement="PathInterpolator">PathInterpolator{
    //angle: real
    //path: Path
    //progress: real
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="PathLine" complement="PathLine">PathLine{
    //relativeX: real
    //relativeY: real
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="PathMove" complement="PathMove">PathMove{
    //relativeX: real
    //relativeY: real
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="PathPercent" complement="PathPercent">PathPercent{
    //value: real
}</snippet>
  <snippet group="QML" trigger="PathQuad" complement="PathQuad">PathQuad{
    //controlX: real
    //controlY: real
    //relativeControlX: real
    //relativeControlY: real
    //relativeX: real
    //relativeY: real
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="PathSvg" complement="PathSvg">PathSvg{
    //path: string
}</snippet>
  <snippet group="QML" trigger="PathView" complement="PathView">PathView{
    //cacheItemCount: int
    //count: int
    //currentIndex: int
    //currentItem: Item
    //delegate: Component
    //dragMargin: real
    //dragging: bool
    //flickDeceleration: real
    //flicking: bool
    //highlight: Component
    //highlightItem: Item
    //highlightMoveDuration: int
    //highlightRangeMode: enumeration
    //interactive: bool
    //onIscurrentitem : Bo: { }
    //maximumFlickVelocity: real
    //model: model
    //movementDirection: enumeration
    //moving: bool
    //offset: real
    //onOnpath : Bo: { }
    //path: Path
    //pathItemCount: int
    //preferredHighlightBegin: real
    //preferredHighlightEnd: real
    //snapMode: enumeration
    //onView : Pathvi: { }
    //decrementCurrentIndex()
    //dragEnded()
    //dragStarted()
    //flickEnded()
    //flickStarted()
    //incrementCurrentIndex()
    //movementEnded()
    //movementStarted()
    //positionViewAtIndex(intindex,PositionModemode)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="PauseAnimation" complement="PauseAnimation">PauseAnimation{
    //duration: int
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="PerVertexColorMaterial" complement="PerVertexColorMaterial">PerVertexColorMaterial{
}</snippet>
  <snippet group="QML" trigger="PercentBarSeries" complement="PercentBarSeries">PercentBarSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //barWidth: real
    //count: int
    //labelsAngle: real
    //labelsFormat: string
    //labelsPosition: enumeration
    //labelsPrecision: real
    //labelsVisible: bool
    //barsetsAdded()
    //barsetsRemoved()
    //clear()
    //clicked(intindex,BarSetbarset)
    //doubleClicked(intindex,BarSetbarset)
    //hovered(boolstatus,intindex,BarSetbarset)
    //pressed(intindex,BarSetbarset)
    //released(intindex,BarSetbarset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="PhongAlphaMaterial" complement="PhongAlphaMaterial">PhongAlphaMaterial{
    //alpha: real
    //ambient: color
    //diffuse: color
    //shininess: real
    //specular: color
}</snippet>
  <snippet group="QML" trigger="PhongMaterial" complement="PhongMaterial">PhongMaterial{
    //ambient: color
    //diffuse: color
    //shininess: real
    //specular: color
}</snippet>
  <snippet group="QML" trigger="PickEvent" complement="PickEvent">PickEvent{
    //accepted: bool
    //button: int
    //buttons: int
    //distance: real
    //localIntersection: Vector3D
    //modifiers: int
    //position: Point2D
    //worldIntersection: Vector3D
}</snippet>
  <snippet group="QML" trigger="PickLineEvent" complement="PickLineEvent">PickLineEvent{
    //triangleIndex: uint
    //vertex1Index: uint
    //vertex2Index: uint
}</snippet>
  <snippet group="QML" trigger="PickPointEvent" complement="PickPointEvent">PickPointEvent{
    //pointIndex: uint
}</snippet>
  <snippet group="QML" trigger="PickTriangleEvent" complement="PickTriangleEvent">PickTriangleEvent{
    //triangleIndex: uint
    //vertex1Index: uint
    //vertex2Index: uint
    //vertex3Index: uint
}</snippet>
  <snippet group="QML" trigger="PickingSettings" complement="PickingSettings">PickingSettings{
    //faceOrientationPickingMode: enumeration
    //pickMethod: enumeration
    //pickResultMode: enumeration
    //worldSpaceTolerance: qreal
}</snippet>
  <snippet group="QML" trigger="Picture" complement="Picture">Picture{
    //color: color
    //source: url
}</snippet>
  <snippet group="QML" trigger="PieMenu" complement="PieMenu">PieMenu{
    //activationMode: enumeration(obsolete)
    //boundingItem: Item
    //currentIndex: int
    //currentItem: int
    //menuItems: list&lt;MenuItem&gt;
    //selectionAngle: real
    //title: string
    //triggerMode: int
}</snippet>
  <snippet group="QML" trigger="PieMenuStyle" complement="PieMenuStyle">PieMenuStyle{
    //background: Component
    //backgroundColor: color
    //cancel: Component
    //cancelRadius: real
    //control: PieMenu
    //endAngle: real
    //menuItem: Component
    //radius: real
    //selectionColor: color
    //shadowColor: color
    //shadowRadius: real
    //shadowSpread: real
    //startAngle: real
    //title: Component
}</snippet>
  <snippet group="QML" trigger="PieSeries" complement="PieSeries">PieSeries{
    //count: int
    //endAngle: real
    //holeSize: real
    //horizontalPosition: real
    //size: real
    //startAngle: real
    //sum: real
    //verticalPosition: real
    //added(list&lt;PieSlice&gt;slices)
    //clear()
    //clicked(PieSliceslice)
    //doubleClicked(PieSliceslice)
    //hovered(PieSliceslice,boolstate)
    //pressed(PieSliceslice)
    //released(PieSliceslice)
    //removed(list&lt;PieSlice&gt;slices)
    //sliceAdded(PieSliceslice)
    //sliceRemoved(PieSliceslice)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="PieSlice" complement="PieSlice">PieSlice{
    //angleSpan: real
    //borderColor: color
    //borderWidth: int
    //brushFilename: string
    //color: color
    //explodeDistanceFactor: real
    //exploded: bool
    //label: string
    //labelArmLengthFactor: real
    //labelColor: color
    //labelFont: font
    //labelPosition: enumeration
    //labelVisible: bool
    //percentage: real
    //startAngle: real
    //value: real
    //clicked()
    //doubleClicked()
    //hovered(boolstate)
    //pressed()
    //released()
}</snippet>
  <snippet group="QML" trigger="PinchArea" complement="PinchArea">PinchArea{
    //enabled: bool
    //pinch.active: bool
    //pinch.dragAxis: enumeration
    //pinch.maximumRotation: real
    //pinch.maximumScale: real
    //pinch.maximumX: real
    //pinch.maximumY: real
    //pinch.minimumRotation: real
    //pinch.minimumScale: real
    //pinch.minimumX: real
    //pinch.minimumY: real
    //pinch.target: Item
    //pinchFinished()
    //pinchStarted()
    //pinchUpdated()
    //smartZoom()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="PinchEvent" complement="PinchEvent">PinchEvent{
    //accepted: bool
    //angle: real
    //center: QPointF
    //point1: QPointF
    //point2: QPointF
    //pointCount: int
    //previousAngle: real
    //previousCenter: QPointF
    //previousScale: real
    //rotation: real
    //scale: real
    //startCenter: QPointF
    //startPoint1: QPointF
    //startPoint2: QPointF
}</snippet>
  <snippet group="QML" trigger="PinchHandler" complement="PinchHandler">PinchHandler{
    //active: bool
    //activeScale: real
    //centroid: QtQuick: : HandlerPoint
    //maximumRotation: real
    //maximumScale: real
    //maximumX: real
    //maximumY: real
    //minimumRotation: real
    //minimumScale: real
    //minimumTouchPoints: int
    //minimumX: real
    //minimumY: real
    //rotation: real
    //scale: real
    //translation: QVector2D
    //acceptedButtons: flags
    //acceptedDevices: flags
    //acceptedModifiers: flags
    //acceptedPointerTypes: flags
    //active: bool
    //centroid: QtQuick: : HandlerPoint
    //enabled: bool
    //grabPermissions: flags
    //margin: real
    //maximumPointCount: int
    //minimumPointCount: int
    //parent: Item
    //target: Item
    //canceled(EventPointpoint)
    //grabChanged(GrabTransitiontransition,EventPointpoint)
}</snippet>
  <snippet group="QML" trigger="Place" complement="Place">Place{
    //attribution: string
    //categories: list&lt;Category&gt;
    //contactDetails: ContactDetails
    //detailsFetched: bool
    //editorialModel: EditorialModel
    //extendedAttributes: ExtendedAttributes
    //favorite: Place
    //icon: Icon
    //imageModel: ImageModel
    //location: QtPositioning: : Location
    //name: string
    //place: QPlace
    //placeId: string
    //plugin: Plugin
    //primaryEmail: string
    //primaryFax: string
    //primaryPhone: string
    //primaryWebsite: string
    //ratings: Ratings
    //reviewModel: ReviewModel
    //status: enumeration
    //supplier: Supplier
    //visibility: enumeration
}</snippet>
  <snippet group="QML" trigger="PlaceAttribute" complement="PlaceAttribute">PlaceAttribute{
    //attribute: QPlaceAttribute
    //label: string
    //text: string
}</snippet>
  <snippet group="QML" trigger="PlaceSearchModel" complement="PlaceSearchModel">PlaceSearchModel{
    //categories: list&lt;Category&gt;
    //count: int
    //favoritesMatchParameters: VariantMap
    //favoritesPlugin: Plugin
    //incremental: bool
    //limit: int
    //nextPagesAvailable: bool
    //plugin: Plugin
    //previousPagesAvailable: bool
    //recommendationId: string
    //relevanceHint: enumeration
    //searchArea: variant
    //searchTerm: string
    //status: enum
    //visibilityScope: enum
}</snippet>
  <snippet group="QML" trigger="PlaceSearchSuggestionModel" complement="PlaceSearchSuggestionModel">PlaceSearchSuggestionModel{
    //limit: int
    //offset: int
    //plugin: Plugin
    //searchArea: geoshape
    //searchTerm: string
    //status: enum
    //suggestions: stringlist
}</snippet>
  <snippet group="QML" trigger="PlaneGeometry" complement="PlaneGeometry">PlaneGeometry{
    //height: real
    //indexAttribute: Attribute
    //mirrored: bool
    //normalAttribute: Attribute
    //positionAttribute: Attribute
    //resolution: size
    //tangentAttribute: Attribute
    //texCoordAttribute: Attribute
    //width: real
}</snippet>
  <snippet group="QML" trigger="PlaneMesh" complement="PlaneMesh">PlaneMesh{
    //height: real
    //meshResolution: size
    //mirrored: bool
    //width: real
}</snippet>
  <snippet group="QML" trigger="PlayVariation" complement="PlayVariation">PlayVariation{
    //looping: bool
    //maxGain: real
    //maxPitch: real
    //minGain: real
    //minPitch: real
    //sample: string
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Playlist" complement="Playlist">Playlist{
    //currentIndex: int
    //currentItemsource: url
    //error: enumeration
    //errorString: string
    //itemCount: int
    //playbackMode: enumeration
    //readOnly: bool
    //itemAboutToBeInserted(start,end)
    //itemAboutToBeRemoved(start,end)
    //itemChanged(start,end)
    //itemInserted(start,end)
    //itemRemoved(start,end)
    //load(location,format)
    //loadFailed()
    //loaded()
    //next()
    //previous()
    //shuffle()
}</snippet>
  <snippet group="QML" trigger="PlaylistItem" complement="PlaylistItem">PlaylistItem{
    //source: url
}</snippet>
  <snippet group="QML" trigger="Plugin" complement="Plugin">Plugin{
    //allowExperimental: bool
    //availableServiceProviders: stringlist
    //isAttached: bool
    //locales: stringlist
    //name: string
    //parameters: list&lt;PluginParameter&gt;
    //preferred: stringlist
    //required: enumeration
}</snippet>
  <snippet group="QML" trigger="PluginParameter" complement="PluginParameter">PluginParameter{
    //name: string
    //value: QVariant
}</snippet>
  <snippet group="QML" trigger="PointDirection" complement="PointDirection">PointDirection{
    //x: real
    //xVariation: real
    //y: real
    //yVariation: real
}</snippet>
  <snippet group="QML" trigger="PointHandler" complement="PointHandler">PointHandler{
    //acceptedButtons: flags
    //acceptedDevices: flags
    //acceptedModifiers: flags
    //acceptedPointerTypes: flags
    //active: bool
    //enabled: bool
    //grabPermissions: flags
    //margin: real
    //parent: Item
    //point: HandlerPoint
    //target: Item
    //canceled(EventPointpoint)
    //grabChanged(GrabTransitiontransition,EventPointpoint)
}</snippet>
  <snippet group="QML" trigger="PointLight" complement="PointLight">PointLight{
    //constantAttenuation: float
    //linearAttenuation: float
    //quadraticAttenuation: float
}</snippet>
  <snippet group="QML" trigger="PointSize" complement="PointSize">PointSize{
    //sizeMode: enumeration
    //value: real
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="PointerDevice" complement="PointerDevice">PointerDevice{
    //capabilities: enumeration
    //pointerType: enumeration
    //type: enumeration
}</snippet>
  <snippet group="QML" trigger="PointerDeviceHandler" complement="PointerDeviceHandler">PointerDeviceHandler{
    //acceptedButtons: flags
    //acceptedDevices: flags
    //acceptedModifiers: flags
    //acceptedPointerTypes: flags
    //active: bool
    //enabled: bool
    //grabPermissions: flags
    //margin: real
    //parent: Item
    //target: Item
    //canceled(EventPointpoint)
    //grabChanged(GrabTransitiontransition,EventPointpoint)
}</snippet>
  <snippet group="QML" trigger="PointerEvent" complement="PointerEvent">PointerEvent{
    //button: enumeration
    //buttons: int
    //device: PointerDevice
    //modifiers: int
}</snippet>
  <snippet group="QML" trigger="PointerHandler" complement="PointerHandler">PointerHandler{
    //active: bool
    //enabled: bool
    //grabPermissions: flags
    //margin: real
    //parent: Item
    //target: Item
    //canceled(EventPointpoint)
    //grabChanged(GrabTransitiontransition,EventPointpoint)
}</snippet>
  <snippet group="QML" trigger="PolarChartView" complement="PolarChartView">PolarChartView{
}</snippet>
  <snippet group="QML" trigger="PolygonOffset" complement="PolygonOffset">PolygonOffset{
    //depthSteps: real
    //scaleFactor: real
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Popup" complement="Popup">Popup{
    //activeFocus: bool
    //anchors.centerIn: Object
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomMargin: real
    //bottomPadding: real
    //clip: bool
    //closePolicy: enumeration
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //dim: bool
    //enabled: bool
    //enter: Transition
    //exit: Transition
    //focus: bool
    //font: font
    //height: real
    //horizontalPadding: real
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //implicitHeight: real
    //implicitWidth: real
    //leftInset: real
    //leftMargin: real
    //leftPadding: real
    //locale: Locale
    //margins: real
    //mirrored: bool
    //modal: bool
    //opacity: real
    //opened: bool
    //padding: real
    //palette: palette
    //parent: Item
    //rightInset: real
    //rightMargin: real
    //rightPadding: real
    //scale: real
    //spacing: real
    //topInset: real
    //topMargin: real
    //topPadding: real
    //transformOrigin: enumeration
    //verticalPadding: real
    //visible: bool
    //width: real
    //x: real
    //y: real
    //z: real
    //forceActiveFocus(reason=Qt.OtherFocusReason)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Position" complement="Position">Position{
    //altitudeValid: bool
    //coordinate: coordinate
    //direction: double
    //directionValid: bool
    //horizontalAccuracy: real
    //horizontalAccuracyValid: bool
    //latitudeValid: bool
    //longitudeValid: bool
    //magneticVariation: double
    //magneticVariationValid: bool
    //speed: double
    //speedValid: bool
    //timestamp: date
    //verticalAccuracy: real
    //verticalAccuracyValid: bool
    //verticalSpeed: double
    //verticalSpeedValid: bool
}</snippet>
  <snippet group="QML" trigger="PositionSource" complement="PositionSource">PositionSource{
    //active: bool
    //name: string
    //nmeaSource: url
    //position: Position
    //preferredPositioningMethods: enumeration
    //sourceError: enumeration
    //supportedPositioningMethods: enumeration
    //updateInterval: int
    //valid: bool
    //start()
    //stop()
    //update()
    //updateTimeout()
}</snippet>
  <snippet group="QML" trigger="Positioner" complement="Positioner">Positioner{
    //onIndex : I: { }
    //onIsfirstitem : Bo: { }
    //onIslastitem : Bo: { }
}</snippet>
  <snippet group="QML" trigger="PressureReading" complement="PressureReading">PressureReading{
    //pressure: qreal
    //temperature: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="PressureSensor" complement="PressureSensor">PressureSensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="Product" complement="Product">Product{
    //description: string
    //identifier: string
    //price: string
    //status: enumeration
    //store: object
    //title: string
    //type: string
    //onPurchaseFailed(objecttransaction)
    //onPurchaseRestored(objecttransaction)
    //onPurchaseSucceeded(objecttransaction)
    //purchase()
    //resetStatus()
}</snippet>
  <snippet group="QML" trigger="ProgressBar" complement="ProgressBar">ProgressBar{
    //from: real
    //indeterminate: bool
    //position: real
    //to: real
    //value: real
    //visualPosition: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ProgressBarStyle" complement="ProgressBarStyle">ProgressBarStyle{
    //background: Component
    //control: ProgressBar
    //currentProgress: real
    //panel: Component
    //progress: Component
}</snippet>
  <snippet group="QML" trigger="PropertyAction" complement="PropertyAction">PropertyAction{
    //exclude: list&lt;Object&gt;
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //value: any
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="PropertyAnimation" complement="PropertyAnimation">PropertyAnimation{
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="PropertyChanges" complement="PropertyChanges">PropertyChanges{
    //explicit: bool
    //restoreEntryValues: bool
    //target: Object
}</snippet>
  <snippet group="QML" trigger="ProximityFilter" complement="ProximityFilter">ProximityFilter{
    //distanceThreshold: real
    //entity: Entity
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="ProximityReading" complement="ProximityReading">ProximityReading{
    //near: bool
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="ProximitySensor" complement="ProximitySensor">ProximitySensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="QAbstractState" complement="QAbstractState">QAbstractState{
    //active: bool
    //entered()
    //exited()
}</snippet>
  <snippet group="QML" trigger="QAbstractTransition" complement="QAbstractTransition">QAbstractTransition{
    //sourceState: bool
    //targetState: QAbstractState
    //targetStates: list&lt;QAbstractState&gt;
    //triggered()
}</snippet>
  <snippet group="QML" trigger="QSignalTransition" complement="QSignalTransition">QSignalTransition{
    //senderObject: QObject
    //signal: string
    //sourceState: bool
    //targetState: QAbstractState
    //targetStates: list&lt;QAbstractState&gt;
    //triggered()
}</snippet>
  <snippet group="QML" trigger="QVirtualKeyboardSelectionListModel" complement="QVirtualKeyboardSelectionListModel">QVirtualKeyboardSelectionListModel{
}</snippet>
  <snippet group="QML" trigger="Qt" complement="Qt">Qt{
    //
    //application: object
    //inputMethod: object
    //platform: object
    //styleHints: object
    //binding(function)
    //callLater(function)
    //callLater(function,argument1,argument2,...)
    //exit(intretCode)
    //font(objectfontSpecifier)
    //list&lt;string&gt;fontFamilies()
    //locale(name)
    //matrix4x4(realm11,realm12,realm13,realm14,realm21,realm22,realm23,realm24,realm31,realm32,realm33,realm34,realm41,realm42,realm43,realm44)
    //quaternion(realscalar,realx,realy,realz)
    //quit()
    //size(intwidth,intheight)
    //vector2d(realx,realy)
    //vector3d(realx,realy,realz)
    //vector4d(realx,realy,realz,realw)
}</snippet>
  <snippet group="QML" trigger="QtMultimedia" complement="QtMultimedia">QtMultimedia{
    //availableCameras: list&lt;object&gt;
    //defaultCamera: object
}</snippet>
  <snippet group="QML" trigger="QtObject" complement="QtObject">QtObject{
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="QtPositioning" complement="QtPositioning">QtPositioning{
}</snippet>
  <snippet group="QML" trigger="QuaternionAnimation" complement="QuaternionAnimation">QuaternionAnimation{
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
}</snippet>
  <snippet group="QML" trigger="QuotaRequest" complement="QuotaRequest">QuotaRequest{
    //origin: url
    //requestedSize: qint64
}</snippet>
  <snippet group="QML" trigger="RadialBlur" complement="RadialBlur">RadialBlur{
    //angle: real
    //cached: bool
    //horizontalOffset: real
    //samples: int
    //source: variant
    //transparentBorder: bool
    //verticalOffset: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="RadialGradient" complement="RadialGradient">RadialGradient{
    //angle: real
    //cached: bool
    //gradient: Gradient
    //horizontalOffset: real
    //horizontalRadius: real
    //source: variant
    //verticalOffset: real
    //verticalRadius: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Radio" complement="Radio">Radio{
    //antennaConnected: int
    //availability: enumeration
    //band: enumeration
    //frequency: int
    //frequencyStep: int
    //maximumFrequency: int
    //minimumFrequency: int
    //muted: bool
    //searching: bool
    //signalStrength: int
    //state: enumeration
    //stereo: bool
    //stereoMode: enumeration
    //volume: int
    //cancelScan()
    //scanDown()
    //scanUp()
    //searchAllStations(enumerationsearchMode)
    //start()
    //stationFound(intfrequency,stringstationId)
    //stop()
    //tuneDown()
    //tuneUp()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="RadioButton" complement="RadioButton">RadioButton{
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="RadioButtonStyle" complement="RadioButtonStyle">RadioButtonStyle{
    //background: Component
    //control: RadioButton
    //indicator: Component
    //label: Component
    //spacing: int
}</snippet>
  <snippet group="QML" trigger="RadioData" complement="RadioData">RadioData{
    //alternativeFrequenciesEnabled: bool
    //availability: enumeration
    //programType: enumeration
    //programTypeName: string
    //radioText: string
    //stationId: string
    //stationName: string
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="RadioDelegate" complement="RadioDelegate">RadioDelegate{
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="RangeSlider" complement="RangeSlider">RangeSlider{
    //first.handle: Item
    //first.hovered: bool
    //first.implicitHandleHeight: real
    //first.implicitHandleWidth: real
    //first.position: real
    //first.pressed: bool
    //first.value: real
    //first.visualPosition: real
    //from: real
    //horizontal: bool
    //live: bool
    //orientation: enumeration
    //second.handle: Item
    //second.hovered: bool
    //second.implicitHandleHeight: real
    //second.implicitHandleWidth: real
    //second.position: real
    //second.pressed: bool
    //second.value: real
    //second.visualPosition: real
    //snapMode: enumeration
    //stepSize: real
    //to: real
    //touchDragThreshold: qreal
    //vertical: bool
    //voidfirst.decrease()
    //voidfirst.increase()
    //voidsecond.decrease()
    //voidsecond.increase()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Ratings" complement="Ratings">Ratings{
    //average: real
    //count: int
    //maximum: real
    //ratings: QPlaceRatings
}</snippet>
  <snippet group="QML" trigger="RayCaster" complement="RayCaster">RayCaster{
    //direction: vector3D
    //length: real
    //origin: vector3d
}</snippet>
  <snippet group="QML" trigger="Rectangle" complement="Rectangle">Rectangle{
    //antialiasing: bool
    //border.color: color
    //border.width: int
    //color: color
    //gradient: any
    //radius: real
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="RectangleShape" complement="RectangleShape">RectangleShape{
}</snippet>
  <snippet group="QML" trigger="RectangularGlow" complement="RectangularGlow">RectangularGlow{
    //cached: bool
    //color: color
    //cornerRadius: real
    //glowRadius: real
    //spread: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="RecursiveBlur" complement="RecursiveBlur">RecursiveBlur{
    //cached: bool
    //loops: int
    //progress: real
    //radius: real
    //source: variant
    //transparentBorder: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="RegExpValidator" complement="RegExpValidator">RegExpValidator{
    //regExp: regExp
}</snippet>
  <snippet group="QML" trigger="RegisterProtocolHandlerRequest" complement="RegisterProtocolHandlerRequest">RegisterProtocolHandlerRequest{
    //origin: url
    //scheme: string
}</snippet>
  <snippet group="QML" trigger="RenderCapture" complement="RenderCapture">RenderCapture{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="RenderCaptureReply" complement="RenderCaptureReply">RenderCaptureReply{
    //captureId: int
    //complete: bool
    //image: variant
}</snippet>
  <snippet group="QML" trigger="RenderPass" complement="RenderPass">RenderPass{
    //filterKeys: list&lt;FilterKey&gt;
    //parameters: list&lt;Parameter&gt;
    //renderStates: list&lt;RenderState&gt;
    //shaderProgram: ShaderProgram
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="RenderPassFilter" complement="RenderPassFilter">RenderPassFilter{
    //matchAny: list&lt;FilterKey&gt;
    //parameters: list&lt;Parameter&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="RenderSettings" complement="RenderSettings">RenderSettings{
    //activeFrameGraph: FrameGraphNode
    //pickingSettings: PickingSettings
    //renderPolicy: enumeration
}</snippet>
  <snippet group="QML" trigger="RenderState" complement="RenderState">RenderState{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="RenderStateSet" complement="RenderStateSet">RenderStateSet{
    //renderStates: list&lt;RenderState&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="RenderSurfaceSelector" complement="RenderSurfaceSelector">RenderSurfaceSelector{
    //externalRenderTargetSize: size
    //surface: QSurface
    //surfacePixelRatio: real
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="RenderTarget" complement="RenderTarget">RenderTarget{
    //attachments: list&lt;RenderTargetOutput&gt;
}</snippet>
  <snippet group="QML" trigger="RenderTargetOutput" complement="RenderTargetOutput">RenderTargetOutput{
    //attachmentPoint: enumeration
    //face: enumeration
    //layer: int
    //mipLevel: int
    //texture: Texture
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="RenderTargetSelector" complement="RenderTargetSelector">RenderTargetSelector{
    //drawBuffers: list&lt;variant&gt;
    //target: RenderTarget
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Repeater" complement="Repeater">Repeater{
    //count: int
    //delegate: Component
    //model: any
    //itemAdded(intindex,Itemitem)
    //itemRemoved(intindex,Itemitem)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ReviewModel" complement="ReviewModel">ReviewModel{
    //batchSize: int
    //place: Place
    //totalCount: int
}</snippet>
  <snippet group="QML" trigger="Rotation" complement="Rotation">Rotation{
    //angle: real
    //axis.x: real
    //axis.y: real
    //axis.z: real
    //origin.x: real
    //origin.y: real
}</snippet>
  <snippet group="QML" trigger="RotationAnimation" complement="RotationAnimation">RotationAnimation{
    //direction: enumeration
    //from: real
    //to: real
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="RotationAnimator" complement="RotationAnimator">RotationAnimator{
    //direction: enumeration
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //from: real
    //target: QtQuick: : Item
    //to: real
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="RotationReading" complement="RotationReading">RotationReading{
    //x: qreal
    //y: qreal
    //z: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="RotationSensor" complement="RotationSensor">RotationSensor{
    //hasZ: qreal
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="RoundButton" complement="RoundButton">RoundButton{
    //radius: real
    //flat: bool
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Route" complement="Route">Route{
    //bounds: georectangle
    //distance: real
    //legs: list&lt;Route&gt;
    //path: list&lt;coordinate&gt;
    //routeQuery: RouteQuery
    //segments: list&lt;RouteSegment&gt;
    //travelTime: int
}</snippet>
  <snippet group="QML" trigger="RouteLeg" complement="RouteLeg">RouteLeg{
    //legIndex: int
    //overallRoute: Route
}</snippet>
  <snippet group="QML" trigger="RouteManeuver" complement="RouteManeuver">RouteManeuver{
    //direction: enumeration
    //distanceToNextInstruction: real
    //extendedAttributes: Object
    //instructionText: string
    //position: coordinate
    //timeToNextInstruction: int
    //valid: bool
    //waypoint: coordinate
    //waypointValid: bool
}</snippet>
  <snippet group="QML" trigger="RouteModel" complement="RouteModel">RouteModel{
    //autoUpdate: bool
    //count: int
    //error: enumeration
    //errorString: string
    //measurementSystem: Locale: : MeasurementSystem
    //plugin: Plugin
    //query: RouteQuery
    //status: enumeration
}</snippet>
  <snippet group="QML" trigger="RouteQuery" complement="RouteQuery">RouteQuery{
    //excludedAreas: list&lt;georectangle&gt;
    //extraParameters: VariantMap
    //featureTypes: QList&lt;FeatureType&gt;
    //maneuverDetail: enumeration
    //numberAlternativeRoutes: int
    //routeOptimizations: enumeration
    //segmentDetail: enumeration
    //travelModes: enumeration
    //waypoints: list&lt;coordinate&gt;
    //list&lt;Waypoint&gt;waypointObjects()
}</snippet>
  <snippet group="QML" trigger="RouteSegment" complement="RouteSegment">RouteSegment{
    //distance: real
    //maneuver: RouteManeuver
    //path: list&lt;coordinate&gt;
    //travelTime: int
}</snippet>
  <snippet group="QML" trigger="Row" complement="Row">Row{
    //add: Transition
    //bottomPadding: real
    //effectiveLayoutDirection: enumeration
    //layoutDirection: enumeration
    //leftPadding: real
    //move: Transition
    //padding: real
    //populate: Transition
    //rightPadding: real
    //spacing: real
    //topPadding: real
    //forceLayout()
    //positioningComplete()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="RowLayout" complement="RowLayout">RowLayout{
    //layoutDirection: enumeration
    //spacing: real
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Scale" complement="Scale">Scale{
    //origin.x: real
    //origin.y: real
    //xScale: real
    //yScale: real
}</snippet>
  <snippet group="QML" trigger="ScaleAnimator" complement="ScaleAnimator">ScaleAnimator{
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //from: real
    //target: QtQuick: : Item
    //to: real
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="Scatter3D" complement="Scatter3D">Scatter3D{
    //axisX: ValueAxis3D
    //axisY: ValueAxis3D
    //axisZ: ValueAxis3D
    //selectedSeries: Scatter3DSeries
    //seriesList: list&lt;Scatter3DSeries&gt;
    //aspectRatio: real
    //currentFps: int
    //customItemList: list&lt;Custom3DItem&gt;
    //horizontalAspectRatio: real
    //inputHandler: AbstractInputHandler3D
    //locale: locale
    //margin: real
    //measureFps: bool
    //msaaSamples: int
    //optimizationHints: AbstractGraph3D.OptimizationHints
    //orthoProjection: bool
    //polar: bool
    //queriedGraphPosition: vector3d
    //radialLabelOffset: real
    //reflection: bool
    //reflectivity: real
    //renderingMode: AbstractGraph3D.RenderingMode
    //scene: Scene3D
    //selectedElement: AbstractGraph3D.ElementType
    //selectionMode: AbstractGraph3D.SelectionMode
    //shadowQuality: AbstractGraph3D.ShadowQuality
    //shadowsSupported: bool
    //theme: Theme3D
}</snippet>
  <snippet group="QML" trigger="Scatter3DSeries" complement="Scatter3DSeries">Scatter3DSeries{
    //dataProxy: ScatterDataProxy
    //invalidSelectionIndex: int
    //itemSize: float
    //selectedItem: int
    //baseColor: color
    //baseGradient: ColorGradient
    //colorStyle: Theme3D.ColorStyle
    //itemLabel: string
    //itemLabelFormat: string
    //itemLabelVisible: bool
    //mesh: Abstract3DSeries.Mesh
    //meshRotation: quaternion
    //meshSmooth: bool
    //multiHighlightColor: color
    //multiHighlightGradient: ColorGradient
    //name: string
    //singleHighlightColor: color
    //singleHighlightGradient: ColorGradient
    //type: Abstract3DSeries.SeriesType
    //userDefinedMesh: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="ScatterDataProxy" complement="ScatterDataProxy">ScatterDataProxy{
    //itemCount: int
    //series: Scatter3DSeries
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="ScatterSeries" complement="ScatterSeries">ScatterSeries{
    //borderColor: color
    //borderWidth: real
    //brushFilename: string
    //count: int
    //markerShape: enumeration
    //markerSize: real
    //axisAngular: AbstractAxis
    //axisRadial: AbstractAxis
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //color: color
    //pointLabelsClipping: bool
    //pointLabelsColor: font
    //pointLabelsFont: font
    //pointLabelsFormat: string
    //pointLabelsVisible: bool
    //pointsVisible: bool
    //append(realx,realy)
    //clicked(pointpoint)
    //doubleClicked(pointpoint)
    //hovered(pointpoint,boolstate)
    //insert(intindex,realx,realy)
    //pointAdded(intindex)
    //pointRemoved(intindex)
    //pointReplaced(intindex)
    //pointsRemoved(intindex,intcount)
    //pointsReplaced()
    //pressed(pointpoint)
    //released(pointpoint)
    //remove(realx,realy)
    //remove(intindex)
    //removePoints(intindex,intcount)
    //replace(realoldX,realoldY,realnewX,realnewY)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="Scene2D" complement="Scene2D">Scene2D{
    //entities: list&lt;Entity&gt;
    //item: Item
    //mouseEnabled: bool
    //output: RenderTargetOutput
    //renderPolicy: enumeration
}</snippet>
  <snippet group="QML" trigger="Scene3D" complement="Scene3D">Scene3D{
    //activeCamera: Camera3D
    //activeLight: Light3D
    //devicePixelRatio: float
    //graphPositionQuery: point
    //invalidSelectionPoint: point
    //primarySubViewport: rect
    //secondarySubViewport: rect
    //secondarySubviewOnTop: bool
    //selectionQueryPosition: point
    //slicingActive: bool
    //viewport: rect
}</snippet>
  <snippet group="QML" trigger="SceneLoader" complement="SceneLoader">SceneLoader{
    //source: url
    //status: enumeration
    //progress: real
    //status: enumeration
    //url: url
    //completed()
    //createObject()
    //destruction()
    //errorString()
    //incubateObject()
}</snippet>
  <snippet group="QML" trigger="ScissorTest" complement="ScissorTest">ScissorTest{
    //bottom: int
    //height: int
    //left: int
    //width: int
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Screen" complement="Screen">Screen{
    //onDesktopavailableheight : I: { }
    //onDesktopavailablewidth : I: { }
    //onDevicepixelratio : Re: { }
    //onHeight : I: { }
    //onLogicalpixeldensity : Real (Obsolet: { }
    //onManufacturer : Stri: { }
    //onModel : Stri: { }
    //onName : Stri: { }
    //onOrientation : Qt::Screenorientati: { }
    //onOrientationupdatemask : Qt::Screenorientatio: { }
    //onPixeldensity : Re: { }
    //onPrimaryorientation : Qt::Screenorientati: { }
    //onSerialnumber : Stri: { }
    //onVirtualx : I: { }
    //onVirtualy : I: { }
    //onWidth : I: { }
    //onInt Anglebetween(Qt::Screenorientation A,  Qt::Screenorientation : { }
}</snippet>
  <snippet group="QML" trigger="ScreenRayCaster" complement="ScreenRayCaster">ScreenRayCaster{
    //position: point
}</snippet>
  <snippet group="QML" trigger="ScriptAction" complement="ScriptAction">ScriptAction{
    //script: script
    //scriptName: string
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="ScrollBar" complement="ScrollBar">ScrollBar{
    //active: bool
    //onHorizontal : Scrollb: { }
    //horizontal: bool
    //interactive: bool
    //minimumSize: real
    //orientation: enumeration
    //policy: enumeration
    //position: real
    //pressed: bool
    //size: real
    //snapMode: enumeration
    //stepSize: real
    //onVertical : Scrollb: { }
    //vertical: bool
    //visualPosition: real
    //visualSize: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ScrollIndicator" complement="ScrollIndicator">ScrollIndicator{
    //active: bool
    //onHorizontal : Scrollindicat: { }
    //horizontal: bool
    //minimumSize: real
    //orientation: enumeration
    //position: real
    //size: real
    //onVertical : Scrollindicat: { }
    //vertical: bool
    //visualPosition: real
    //visualSize: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ScrollView" complement="ScrollView">ScrollView{
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentWidth: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ScrollViewStyle" complement="ScrollViewStyle">ScrollViewStyle{
    //control: ScrollView
    //corner: Component
    //decrementControl: Component
    //frame: Component
    //handle: Component
    //handleOverlap: int
    //incrementControl: Component
    //minimumHandleLength: int
    //scrollBarBackground: Component
    //scrollToClickedPosition: bool
    //transientScrollBars: bool
}</snippet>
  <snippet group="QML" trigger="ScxmlStateMachine" complement="ScxmlStateMachine">ScxmlStateMachine{
    //dataModel: ScxmlDataModel
    //initialValues: var
    //initialized: bool
    //invoked: bool
    //invokedServices: list
    //loader: Loader
    //name: string
    //parseErrors: var
    //running: bool
    //sessionId: string
    //activeStateNames(boolcompress)
    //cancelDelayedEvent(stringsendId)
    //finished()
    //init()
    //isActive(stringscxmlStateName)
    //isDispatchableTarget(stringtarget)
    //log(stringlabel,stringmsg)
    //reachedStableState()
    //start()
    //stateNames(boolcompress)
    //stop()
    //submitEvent(event)
    //submitEvent(stringeventName,vardata)
}</snippet>
  <snippet group="QML" trigger="SeamlessCubemap" complement="SeamlessCubemap">SeamlessCubemap{
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="SelectionListItem" complement="SelectionListItem">SelectionListItem{
    //soundEffect: url
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Sensor" complement="Sensor">Sensor{
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="SensorGesture" complement="SensorGesture">SensorGesture{
    //availableGestures: stringlist
    //enabled: bool
    //gestures: stringlist
    //invalidGestures: stringlist
    //validGestures: stringlist
    //detected(stringgesture)
}</snippet>
  <snippet group="QML" trigger="SensorGlobal" complement="SensorGlobal">SensorGlobal{
    //list&lt;string&gt;sensorTypes()
    //list&lt;string&gt;sensorsForType(type)
}</snippet>
  <snippet group="QML" trigger="SensorReading" complement="SensorReading">SensorReading{
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="SequentialAnimation" complement="SequentialAnimation">SequentialAnimation{
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="Settings" complement="Settings">Settings{
    //category: string
    //fileName: string
    //setValue(stringkey,varvalue)
}</snippet>
  <snippet group="QML" trigger="SettingsStore" complement="SettingsStore">SettingsStore{
}</snippet>
  <snippet group="QML" trigger="ShaderEffect" complement="ShaderEffect">ShaderEffect{
    //blending: bool
    //cullMode: enumeration
    //fragmentShader: string
    //log: string
    //mesh: variant
    //status: enumeration
    //supportsAtlasTextures: bool
    //vertexShader: string
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ShaderEffectSource" complement="ShaderEffectSource">ShaderEffectSource{
    //format: enumeration
    //hideSource: bool
    //live: bool
    //mipmap: bool
    //recursive: bool
    //samples: int
    //sourceItem: Item
    //sourceRect: rect
    //textureMirroring: enumeration
    //textureSize: size
    //wrapMode: enumeration
    //scheduleUpdate()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="ShaderProgram" complement="ShaderProgram">ShaderProgram{
    //computeShaderCode: string
    //computeShaderGraph: string
    //fragmentShaderCode: string
    //fragmentShaderGraph: string
    //geometryShaderCode: string
    //geometryShaderGraph: string
    //log: string
    //status: string
    //tessellationControlShaderCode: string
    //tessellationControlShaderGraph: string
    //tessellationEvaluationShaderCode: string
    //tessellationEvaluationShaderGraph: string
    //vertexShaderCode: string
    //vertexShaderGraph: string
}</snippet>
  <snippet group="QML" trigger="ShaderProgramBuilder" complement="ShaderProgramBuilder">ShaderProgramBuilder{
    //enabledLayers: stringlist
    //shaderProgram: string
}</snippet>
  <snippet group="QML" trigger="Shape" complement="Shape">Shape{
}</snippet>
  <snippet group="QML" trigger="ShellSurface" complement="ShellSurface">ShellSurface{
    //windowType: enum
}</snippet>
  <snippet group="QML" trigger="ShellSurfaceItem" complement="ShellSurfaceItem">ShellSurfaceItem{
    //autoCreatePopupItems: bool
    //moveItem: Item
    //shellSurface: ShellSurface
    //compositor: WaylandCompositor
    //focusOnClick: bool
    //origin: enum
    //paintEnabled: bool
    //sizeFollowsSurface: bool
    //subsurfaceHandler: object
    //surface: WaylandSurface
    //setPrimary()
}</snippet>
  <snippet group="QML" trigger="ShiftHandler" complement="ShiftHandler">ShiftHandler{
    //autoCapitalizationEnabled: bool
    //sentenceEndingCharacters: string
    //toggleShiftEnabled: bool
}</snippet>
  <snippet group="QML" trigger="ShiftKey" complement="ShiftKey">ShiftKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Shortcut" complement="Shortcut">Shortcut{
    //autoRepeat: bool
    //context: enumeration
    //enabled: bool
    //nativeText: string
    //portableText: string
    //sequence: keysequence
    //sequences: list&lt;keysequence&gt;
    //activated()
    //activatedAmbiguously()
}</snippet>
  <snippet group="QML" trigger="SignalSpy" complement="SignalSpy">SignalSpy{
    //count: int
    //signalArguments: list
    //signalName: string
    //target: var
    //valid: bool
    //clear()
    //wait(timeout)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="SignalTransition" complement="SignalTransition">SignalTransition{
    //guard: bool
    //signal: signal
    //senderObject: QObject
    //signal: string
    //sourceState: bool
    //targetState: QAbstractState
    //targetStates: list&lt;QAbstractState&gt;
    //triggered()
}</snippet>
  <snippet group="QML" trigger="SinglePointHandler" complement="SinglePointHandler">SinglePointHandler{
    //acceptedButtons: flags
    //acceptedDevices: flags
    //acceptedModifiers: flags
    //acceptedPointerTypes: flags
    //active: bool
    //enabled: bool
    //grabPermissions: flags
    //margin: real
    //parent: Item
    //point: HandlerPoint
    //target: Item
    //canceled(EventPointpoint)
    //grabChanged(GrabTransitiontransition,EventPointpoint)
}</snippet>
  <snippet group="QML" trigger="Skeleton" complement="Skeleton">Skeleton{
    //rootJoint: Joint
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="SkeletonLoader" complement="SkeletonLoader">SkeletonLoader{
    //source: url
    //status: SkeletonLoader.Status
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Slider" complement="Slider">Slider{
    //from: real
    //handle: Item
    //horizontal: bool
    //implicitHandleHeight: real
    //implicitHandleWidth: real
    //live: bool
    //orientation: enumeration
    //position: real
    //pressed: bool
    //snapMode: enumeration
    //stepSize: real
    //to: real
    //touchDragThreshold: qreal
    //value: real
    //vertical: bool
    //visualPosition: real
    //moved()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SliderStyle" complement="SliderStyle">SliderStyle{
    //control: Slider
    //groove: Component
    //handle: Component
    //panel: Component
    //tickmarks: Component
}</snippet>
  <snippet group="QML" trigger="SmoothedAnimation" complement="SmoothedAnimation">SmoothedAnimation{
    //duration: int
    //maximumEasingTime: int
    //reversingMode: enumeration
    //velocity: real
    //from: real
    //to: real
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="SortPolicy" complement="SortPolicy">SortPolicy{
    //sortTypes: QVariantList
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Sound" complement="Sound">Sound{
    //attenuationModel: string
    //category: string
    //name: string
    //playType: enumeration
    //addPlayVariation(PlayVariationplayVariation)
    //QtAudioEngine: : SoundInstancenewInstance()
    //play()
    //play(gain)
    //play(gain,pitch)
    //play(position)
    //play(position,velocity)
    //play(position,velocity,direction)
    //play(position,gain)
    //play(position,velocity,gain)
    //play(position,velocity,direction,gain)
    //play(position,gain,pitch)
    //play(position,velocity,gain,pitch)
    //play(position,velocity,direction,gain,pitch)
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SoundEffect" complement="SoundEffect">SoundEffect{
    //category: string
    //loops: int
    //loopsRemaining: int
    //muted: bool
    //playing: bool
    //source: url
    //status: enumeration
    //volume: qreal
    //categoryChanged()
    //loadedChanged()
    //loopCountChanged()
    //loopsRemainingChanged()
    //mutedChanged()
    //play()
    //playingChanged()
    //sourceChanged()
    //statusChanged()
    //stop()
    //volumeChanged()
}</snippet>
  <snippet group="QML" trigger="SoundInstance" complement="SoundInstance">SoundInstance{
    //direction: vector3d
    //engine: QtAudioEngine: : AudioEngine
    //gain: vector3d
    //pitch: vector3d
    //position: vector3d
    //sound: string
    //state: enumeration
    //velocity: vector3d
    //directionChanged()
    //gainChanged()
    //pause()
    //pitchChanged()
    //play()
    //positionChanged()
    //soundChanged()
    //stateChanged(state)
    //stop()
    //velocityChanged()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SpaceKey" complement="SpaceKey">SpaceKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SphereGeometry" complement="SphereGeometry">SphereGeometry{
    //generateTangents: bool
    //indexAttribute: Attribute
    //normalAttribute: Attribute
    //positionAttribute: Attribute
    //radius: real
    //rings: int
    //slices: int
    //tangentAttribute: Attribute
    //texCoordAttribute: Attribute
}</snippet>
  <snippet group="QML" trigger="SphereMesh" complement="SphereMesh">SphereMesh{
    //generateTangents: bool
    //radius: real
    //rings: int
    //slices: int
}</snippet>
  <snippet group="QML" trigger="SpinBox" complement="SpinBox">SpinBox{
    //displayText: string
    //down.hovered: bool
    //down.implicitIndicatorHeight: real
    //down.implicitIndicatorWidth: real
    //down.indicator: Item
    //down.pressed: bool
    //editable: bool
    //from: int
    //inputMethodComposing: bool
    //inputMethodHints: flags
    //stepSize: int
    //textFromValue: function
    //to: int
    //up.hovered: bool
    //up.implicitIndicatorHeight: real
    //up.implicitIndicatorWidth: real
    //up.indicator: Item
    //up.pressed: bool
    //validator: Validator
    //value: int
    //valueFromText: function
    //wrap: bool
    //valueModified()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SpinBoxStyle" complement="SpinBoxStyle">SpinBoxStyle{
    //background: Component
    //control: SpinBox
    //decrementControl: Component
    //font: font
    //horizontalAlignment: int
    //incrementControl: Component
    //renderType: int
    //selectedTextColor: color
    //selectionColor: color
    //textColor: color
}</snippet>
  <snippet group="QML" trigger="SplineSeries" complement="SplineSeries">SplineSeries{
    //capStyle: Qt: : PenCapStyle
    //count: int
    //style: Qt: : PenStyle
    //width: real
    //axisAngular: AbstractAxis
    //axisRadial: AbstractAxis
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //color: color
    //pointLabelsClipping: bool
    //pointLabelsColor: font
    //pointLabelsFont: font
    //pointLabelsFormat: string
    //pointLabelsVisible: bool
    //pointsVisible: bool
    //append(realx,realy)
    //clicked(pointpoint)
    //doubleClicked(pointpoint)
    //hovered(pointpoint,boolstate)
    //insert(intindex,realx,realy)
    //pointAdded(intindex)
    //pointRemoved(intindex)
    //pointReplaced(intindex)
    //pointsRemoved(intindex,intcount)
    //pointsReplaced()
    //pressed(pointpoint)
    //released(pointpoint)
    //remove(realx,realy)
    //remove(intindex)
    //removePoints(intindex,intcount)
    //replace(realoldX,realoldY,realnewX,realnewY)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="SplitView" complement="SplitView">SplitView{
    //handleDelegate: Component
    //orientation: int
    //resizing: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SpotLight" complement="SpotLight">SpotLight{
    //constantAttenuation: float
    //cutOffAngle: float
    //linearAttenuation: float
    //localDirection: vector3d
    //quadraticAttenuation: float
}</snippet>
  <snippet group="QML" trigger="SpringAnimation" complement="SpringAnimation">SpringAnimation{
    //damping: real
    //epsilon: real
    //mass: real
    //modulus: real
    //spring: real
    //velocity: real
    //from: real
    //to: real
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="Sprite" complement="Sprite">Sprite{
    //duration: int
    //durationVariation: int
    //frameCount: int
    //frameDuration: int
    //frameDurationVariation: int
    //frameHeight: int
    //frameRate: qreal
    //frameRateVariation: qreal
    //frameSync: bool
    //frameWidth: int
    //frameX: int
    //frameY: int
    //name: string
    //randomStart: bool
    //reverse: bool
    //source: url
    //to: QVariantMap
}</snippet>
  <snippet group="QML" trigger="SpriteGoal" complement="SpriteGoal">SpriteGoal{
    //goalState: string
    //jump: bool
    //systemStates: bool
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="SpriteSequence" complement="SpriteSequence">SpriteSequence{
    //currentSprite: string
    //goalSprite: string
    //interpolate: bool
    //running: bool
    //sprites: list&lt;Sprite&gt;
    //jumpTo(stringsprite)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Stack" complement="Stack">Stack{
    //onIndex : I: { }
    //onStatus : Enumerati: { }
    //onView : Stackvi: { }
}</snippet>
  <snippet group="QML" trigger="StackLayout" complement="StackLayout">StackLayout{
    //count: int
    //currentIndex: int
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="StackView" complement="StackView">StackView{
    //busy: bool
    //currentItem: Item
    //depth: int
    //empty: bool
    //onIndex : I: { }
    //initialItem: var
    //popEnter: Transition
    //popExit: Transition
    //pushEnter: Transition
    //pushExit: Transition
    //replaceEnter: Transition
    //replaceExit: Transition
    //onStatus : Enumerati: { }
    //onView : Stackvi: { }
    //onVisible : Bo: { }
    //onActivated: { }
    //onActivating: { }
    //onDeactivated: { }
    //onDeactivating: { }
    //onRemoved: { }
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="StackViewDelegate" complement="StackViewDelegate">StackViewDelegate{
    //popTransition: Component
    //pushTransition: Component
    //replaceTransition: Component
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="StackedBarSeries" complement="StackedBarSeries">StackedBarSeries{
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //barWidth: real
    //count: int
    //labelsAngle: real
    //labelsFormat: string
    //labelsPosition: enumeration
    //labelsPrecision: real
    //labelsVisible: bool
    //barsetsAdded()
    //barsetsRemoved()
    //clear()
    //clicked(intindex,BarSetbarset)
    //doubleClicked(intindex,BarSetbarset)
    //hovered(boolstatus,intindex,BarSetbarset)
    //pressed(intindex,BarSetbarset)
    //released(intindex,BarSetbarset)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="State" complement="State">State{
    //changes: list&lt;Change&gt;
    //extend: string
    //name: string
    //when: bool
}</snippet>
  <snippet group="QML" trigger="StateChangeScript" complement="StateChangeScript">StateChangeScript{
    //name: string
    //script: script
}</snippet>
  <snippet group="QML" trigger="StateGroup" complement="StateGroup">StateGroup{
    //state: string
    //states: list&lt;State&gt;
    //transitions: list&lt;Transition&gt;
}</snippet>
  <snippet group="QML" trigger="StateMachine" complement="StateMachine">StateMachine{
    //errorString: string
    //globalRestorePolicy: enumeration
    //running: bool
    //start()
    //started()
    //stop()
    //stopped()
    //childMode: enumeration
    //errorState: QAbstractState
    //initialState: QAbstractState
    //finished()
    //active: bool
    //entered()
    //exited()
}</snippet>
  <snippet group="QML" trigger="StateMachineLoader" complement="StateMachineLoader">StateMachineLoader{
    //source: url
    //stateMachine: ScxmlStateMachine
}</snippet>
  <snippet group="QML" trigger="StatusBar" complement="StatusBar">StatusBar{
    //contentItem: Item
    //style: Component
}</snippet>
  <snippet group="QML" trigger="StatusBarStyle" complement="StatusBarStyle">StatusBarStyle{
    //background: Component
    //panel: Component
}</snippet>
  <snippet group="QML" trigger="StatusIndicator" complement="StatusIndicator">StatusIndicator{
    //active: bool
    //color: color
    //on: alias(obsolete)
}</snippet>
  <snippet group="QML" trigger="StatusIndicatorStyle" complement="StatusIndicatorStyle">StatusIndicatorStyle{
    //color: color
    //control: StatusIndicator
    //indicator: Component
}</snippet>
  <snippet group="QML" trigger="StencilMask" complement="StencilMask">StencilMask{
    //backOutputMask: int
    //frontOutputMask: int
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="StencilOperation" complement="StencilOperation">StencilOperation{
    //back: StencilOperationArguments
    //front: StencilOperationArguments
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="StencilOperationArguments" complement="StencilOperationArguments">StencilOperationArguments{
    //allTestsPassOperation: enumeration
    //depthTestFailureOperation: enumeration
    //faceMode: enumeration
    //stencilTestFailureOperation: enumeration
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="StencilTest" complement="StencilTest">StencilTest{
    //back: StencilTestArguments
    //front: StencilTestArguments
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="StencilTestArguments" complement="StencilTestArguments">StencilTestArguments{
    //comparisonMask: int
    //faceMode: enumeration
    //referenceValue: int
    //stencilFunction: enumeration
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Store" complement="Store">Store{
    //restorePurchases()
}</snippet>
  <snippet group="QML" trigger="String" complement="String">String{
}</snippet>
  <snippet group="QML" trigger="Supplier" complement="Supplier">Supplier{
    //icon: PlaceIcon
    //name: string
    //supplier: QPlaceSupplier
    //supplierId: string
    //url: url
}</snippet>
  <snippet group="QML" trigger="Surface3D" complement="Surface3D">Surface3D{
    //axisX: ValueAxis3D
    //axisY: ValueAxis3D
    //axisZ: ValueAxis3D
    //flipHorizontalGrid: bool
    //selectedSeries: Surface3DSeries
    //seriesList: list&lt;Surface3DSeries&gt;
    //aspectRatio: real
    //currentFps: int
    //customItemList: list&lt;Custom3DItem&gt;
    //horizontalAspectRatio: real
    //inputHandler: AbstractInputHandler3D
    //locale: locale
    //margin: real
    //measureFps: bool
    //msaaSamples: int
    //optimizationHints: AbstractGraph3D.OptimizationHints
    //orthoProjection: bool
    //polar: bool
    //queriedGraphPosition: vector3d
    //radialLabelOffset: real
    //reflection: bool
    //reflectivity: real
    //renderingMode: AbstractGraph3D.RenderingMode
    //scene: Scene3D
    //selectedElement: AbstractGraph3D.ElementType
    //selectionMode: AbstractGraph3D.SelectionMode
    //shadowQuality: AbstractGraph3D.ShadowQuality
    //shadowsSupported: bool
    //theme: Theme3D
}</snippet>
  <snippet group="QML" trigger="Surface3DSeries" complement="Surface3DSeries">Surface3DSeries{
    //dataProxy: SurfaceDataProxy
    //drawMode: DrawFlag
    //flatShadingEnabled: bool
    //flatShadingSupported: bool
    //invalidSelectionPosition: point
    //selectedPoint: point
    //textureFile: string
    //baseColor: color
    //baseGradient: ColorGradient
    //colorStyle: Theme3D.ColorStyle
    //itemLabel: string
    //itemLabelFormat: string
    //itemLabelVisible: bool
    //mesh: Abstract3DSeries.Mesh
    //meshRotation: quaternion
    //meshSmooth: bool
    //multiHighlightColor: color
    //multiHighlightGradient: ColorGradient
    //name: string
    //singleHighlightColor: color
    //singleHighlightGradient: ColorGradient
    //type: Abstract3DSeries.SeriesType
    //userDefinedMesh: string
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="SurfaceDataProxy" complement="SurfaceDataProxy">SurfaceDataProxy{
    //columnCount: int
    //rowCount: int
    //series: Surface3DSeries
    //type: AbstractDataProxy.DataType
}</snippet>
  <snippet group="QML" trigger="SwipeDelegate" complement="SwipeDelegate">SwipeDelegate{
    //onPressed : Bo: { }
    //swipe.behind: Component
    //swipe.behindItem: Item
    //swipe.complete: bool
    //swipe.enabled: bool
    //swipe.left: Component
    //swipe.leftItem: Item
    //swipe.position: real
    //swipe.right: Component
    //swipe.rightItem: Item
    //swipe.transition: Transition
    //onClicked: { }
    //voidswipe.close()
    //voidswipe.closed()
    //voidswipe.completed()
    //voidswipe.open(enumerationside)
    //voidswipe.opened()
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SwipeView" complement="SwipeView">SwipeView{
    //horizontal: bool
    //onIndex : I: { }
    //interactive: bool
    //onIscurrentitem : Bo: { }
    //onIsnextitem : Bo: { }
    //onIspreviousitem : Bo: { }
    //orientation: enumeration
    //vertical: bool
    //onView : Swipevi: { }
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentModel: model
    //contentWidth: real
    //count: int
    //currentIndex: int
    //currentItem: Item
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="Switch" complement="Switch">Switch{
    //position: real
    //visualPosition: real
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SwitchDelegate" complement="SwitchDelegate">SwitchDelegate{
    //position: real
    //visualPosition: real
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SwitchStyle" complement="SwitchStyle">SwitchStyle{
    //groove: Component
    //handle: Component
}</snippet>
  <snippet group="QML" trigger="SymbolModeKey" complement="SymbolModeKey">SymbolModeKey{
    //active: bool
    //alternativeKeys: var
    //displayText: string
    //effectiveAlternativeKeys: var
    //effectiveAlternativeKeysHighlightIndex: int
    //functionKey: bool
    //highlighted: bool
    //key: int
    //keyPanelDelegate: alias
    //noKeyEvent: bool
    //noModifier: bool
    //pressed: bool
    //repeat: bool
    //showPreview: bool
    //smallText: string
    //smallTextVisible: bool
    //soundEffect: url
    //text: string
    //uppercased: bool
    //weight: real
    //clicked()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="SystemPalette" complement="SystemPalette">SystemPalette{
    //alternateBase: color
    //base: color
    //button: color
    //buttonText: color
    //colorGroup: enumeration
    //dark: color
    //highlight: color
    //highlightedText: color
    //light: color
    //mid: color
    //midlight: color
    //shadow: color
    //text: color
    //window: color
    //windowText: color
}</snippet>
  <snippet group="QML" trigger="Tab" complement="Tab">Tab{
    //title: string
    //active: bool
    //asynchronous: bool
    //item: object
    //progress: real
    //source: url
    //sourceComponent: Component
    //status: enumeration
    //loaded()
    //setSource()
}</snippet>
  <snippet group="QML" trigger="TabBar" complement="TabBar">TabBar{
    //contentHeight: real
    //contentWidth: real
    //onIndex : I: { }
    //onPosition : Enumerati: { }
    //position: enumeration
    //onTabbar : Tabb: { }
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentModel: model
    //contentWidth: real
    //count: int
    //currentIndex: int
    //currentItem: Item
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="TabButton" complement="TabButton">TabButton{
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="TabView" complement="TabView">TabView{
    //contentItem: Item
    //count: int
    //currentIndex: int
    //frameVisible: bool
    //tabPosition: int
    //tabsVisible: bool
}</snippet>
  <snippet group="QML" trigger="TabViewStyle" complement="TabViewStyle">TabViewStyle{
    //control: TabView
    //frame: Component
    //frameOverlap: int
    //leftCorner: Component
    //rightCorner: Component
    //tab: Component
    //tabBar: Component
    //tabOverlap: int
    //tabsAlignment: int
    //tabsMovable: bool
}</snippet>
  <snippet group="QML" trigger="TableView" complement="TableView">TableView{
    //currentRow: int
    //itemDelegate: Component
    //model: model
    //rowCount: int
    //section.criteria: enumeration
    //section.delegate: Component
    //section.labelPositioning: enumeration
    //section.property: string
    //selection: Selection
    //activated(introw)
    //clicked(introw)
    //doubleClicked(introw)
    //pressAndHold(introw)
    //contentItem: Item
    //flickableItem: Item
    //frameVisible: bool
    //highlightOnFocus: bool
    //horizontalScrollBarPolicy: enumeration
    //style: Component
    //verticalScrollBarPolicy: enumeration
    //viewport: Item
}</snippet>
  <snippet group="QML" trigger="TableViewColumn" complement="TableViewColumn">TableViewColumn{
    //delegate: Component
    //elideMode: int
    //horizontalAlignment: int
    //movable: bool
    //resizable: bool
    //role: string
    //title: string
    //visible: bool
    //width: int
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="TableViewStyle" complement="TableViewStyle">TableViewStyle{
    //control: TableView
    //headerDelegate: Component
    //itemDelegate: Component
    //rowDelegate: Component
    //control: ScrollView
    //corner: Component
    //decrementControl: Component
    //frame: Component
    //handle: Component
    //handleOverlap: int
    //incrementControl: Component
    //minimumHandleLength: int
    //scrollBarBackground: Component
    //scrollToClickedPosition: bool
    //transientScrollBars: bool
}</snippet>
  <snippet group="QML" trigger="TapHandler" complement="TapHandler">TapHandler{
    //acceptedButtons: flags
    //acceptedDevices: flags
    //acceptedModifiers: flags
    //acceptedPointerTypes: flags
    //active: bool
    //enabled: bool
    //gesturePolicy: enumeration
    //grabPermissions: flags
    //longPressThreshold: real
    //margin: real
    //parent: Item
    //point: HandlerPoint
    //pressed: bool
    //tapCount: int
    //target: Item
    //timeHeld: real
    //canceled(EventPointpoint)
    //doubleTapped()
    //grabChanged(GrabTransitiontransition,EventPointpoint)
    //longPressed()
    //singleTapped()
    //tapped()
}</snippet>
  <snippet group="QML" trigger="TapReading" complement="TapReading">TapReading{
    //doubleTap: bool
    //tapDirection: TapDirection
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="TapSensor" complement="TapSensor">TapSensor{
    //returnDoubleTapEvents: bool
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="TargetDirection" complement="TargetDirection">TargetDirection{
    //magnitude: real
    //magnitudeVariation: real
    //proportionalMagnitude: bool
    //targetItem: Item
    //targetVariation: real
    //targetX: real
    //targetY: real
}</snippet>
  <snippet group="QML" trigger="TaskbarButton" complement="TaskbarButton">TaskbarButton{
    //overlay.accessibleDescription: string
    //overlay.iconSource: url
    //progress.maximum: int
    //progress.minimum: int
    //progress.paused: bool
    //progress.stopped: bool
    //progress.value: int
    //progress.visible: bool
}</snippet>
  <snippet group="QML" trigger="Technique" complement="Technique">Technique{
    //filterKeys: list&lt;FilterKey&gt;
    //graphicsApiFilter: GraphicsApiFilter
    //parameters: list&lt;Parameter&gt;
    //renderPasses: list&lt;RenderPass&gt;
}</snippet>
  <snippet group="QML" trigger="TechniqueFilter" complement="TechniqueFilter">TechniqueFilter{
    //matchAll: list&lt;FilterKey&gt;
    //parameters: list&lt;Parameter&gt;
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="TestCase" complement="TestCase">TestCase{
    //completed: bool
    //name: string
    //optional: bool
    //running: bool
    //when: bool
    //windowShown: bool
    //cleanup()
    //cleanupTestCase()
    //compare(actual,expected,message)
    //expectFail(tag,message)
    //expectFailContinue(tag,message)
    //fail(message)
    //fuzzyCompare(actual,expected,delta,message)
    //ignoreWarning(message)
    //init()
    //initTestCase()
    //keyClick(key,modifiers,delay)
    //keyPress(key,modifiers,delay)
    //keyRelease(key,modifiers,delay)
    //keySequence(keySequence)
    //mouseClick(item,x,y,button,modifiers,delay)
    //mouseDoubleClick(item,x,y,button,modifiers,delay)
    //mouseDoubleClickSequence(item,x,y,button,modifiers,delay)
    //mouseDrag(item,x,y,dx,dy,button,modifiers,delay)
    //mouseMove(item,x,y,delay)
    //mousePress(item,x,y,button,modifiers,delay)
    //mouseRelease(item,x,y,button,modifiers,delay)
    //mouseWheel(item,x,y,xDelta,yDelta,button,modifiers,delay)
    //skip(message)
    //sleep(ms)
    //tryCompare(obj,property,expected,timeout,message)
    //tryVerify(function,timeout,message)
    //verify(condition,message)
    //wait(ms)
    //waitForRendering(item,timeout)
    //warn(message)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Text" complement="Text">Text{
    //advance: size
    //baseUrl: url
    //bottomPadding: real
    //clip: bool
    //color: color
    //contentHeight: real
    //contentWidth: real
    //effectiveHorizontalAlignment: enumeration
    //elide: enumeration
    //font.bold: bool
    //font.capitalization: enumeration
    //font.family: string
    //font.hintingPreference: enumeration
    //font.italic: bool
    //font.kerning: bool
    //font.letterSpacing: real
    //font.pixelSize: int
    //font.pointSize: real
    //font.preferShaping: bool
    //font.strikeout: bool
    //font.styleName: string
    //font.underline: bool
    //font.weight: enumeration
    //font.wordSpacing: real
    //fontInfo.bold: bool
    //fontInfo.family: string
    //fontInfo.italic: bool
    //fontInfo.pixelSize: string
    //fontInfo.pointSize: real
    //fontInfo.styleName: string
    //fontInfo.weight: int
    //fontSizeMode: enumeration
    //horizontalAlignment: enumeration
    //hoveredLink: string
    //leftPadding: real
    //lineCount: int
    //lineHeight: real
    //lineHeightMode: enumeration
    //linkColor: color
    //maximumLineCount: int
    //minimumPixelSize: int
    //minimumPointSize: int
    //padding: real
    //renderType: enumeration
    //rightPadding: real
    //style: enumeration
    //styleColor: color
    //text: string
    //textFormat: enumeration
    //topPadding: real
    //truncated: bool
    //verticalAlignment: enumeration
    //wrapMode: enumeration
    //doLayout()(obsolete)
    //forceLayout()
    //lineLaidOut(objectline)
    //linkActivated(stringlink)
    //linkAt(realx,realy)
    //linkHovered(stringlink)
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="TextArea" complement="TextArea">TextArea{
    //background: Item
    //bottomInset: real
    //onFlickable : Textar: { }
    //focusReason: enumeration
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //leftInset: real
    //palette: palette
    //placeholderText: string
    //placeholderTextColor: color
    //rightInset: real
    //topInset: real
    //pressAndHold(MouseEventevent)
    //pressed(MouseEventevent)
    //released(MouseEventevent)
    //activeFocusOnPress: bool
    //baseUrl: url
    //bottomPadding: real
    //canPaste: bool
    //canRedo: bool
    //canUndo: bool
    //color: color
    //contentHeight: real
    //contentWidth: real
    //cursorDelegate: Component
    //cursorPosition: int
    //cursorRectangle: rectangle
    //cursorVisible: bool
    //effectiveHorizontalAlignment: enumeration
    //font.bold: bool
    //font.capitalization: enumeration
    //font.family: string
    //font.hintingPreference: enumeration
    //font.italic: bool
    //font.kerning: bool
    //font.letterSpacing: real
    //font.pixelSize: int
    //font.pointSize: real
    //font.preferShaping: bool
    //font.strikeout: bool
    //font.styleName: string
    //font.underline: bool
    //font.weight: enumeration
    //font.wordSpacing: real
    //horizontalAlignment: enumeration
    //hoveredLink: string
    //inputMethodComposing: bool
    //inputMethodHints: enumeration
    //leftPadding: real
    //length: int
    //lineCount: int
    //mouseSelectionMode: enumeration
    //overwriteMode: bool
    //padding: real
    //persistentSelection: bool
    //preeditText: string
    //readOnly: bool
    //renderType: enumeration
    //rightPadding: real
    //selectByKeyboard: bool
    //selectByMouse: bool
    //selectedText: string
    //selectedTextColor: color
    //selectionColor: color
    //selectionEnd: int
    //selectionStart: int
    //tabStopDistance: real
    //text: string
    //textDocument: TextDocument
    //textFormat: enumeration
    //textMargin: real
    //topPadding: real
    //verticalAlignment: enumeration
    //wrapMode: enumeration
    //append()
    //clear()
    //copy()
    //cut()
    //deselect()
    //editingFinished()
    //getFormattedText()
    //getText()
    //insert()
    //isRightToLeft()
    //linkActivated()
    //linkAt()
    //linkHovered()
    //moveCursorSelection()
    //paste()
    //positionAt()
    //positionToRectangle()
    //redo()
    //remove()
    //select()
    //selectAll()
    //selectWord()
    //undo()
}</snippet>
  <snippet group="QML" trigger="TextAreaStyle" complement="TextAreaStyle">TextAreaStyle{
    //backgroundColor: color
    //control: TextArea
    //font: font
    //renderType: int
    //selectedTextColor: color
    //selectionColor: color
    //textColor: color
    //textMargin: real
    //control: ScrollView
    //corner: Component
    //decrementControl: Component
    //frame: Component
    //handle: Component
    //handleOverlap: int
    //incrementControl: Component
    //minimumHandleLength: int
    //scrollBarBackground: Component
    //scrollToClickedPosition: bool
    //transientScrollBars: bool
}</snippet>
  <snippet group="QML" trigger="TextEdit" complement="TextEdit">TextEdit{
    //activeFocusOnPress: bool
    //baseUrl: url
    //bottomPadding: real
    //canPaste: bool
    //canRedo: bool
    //canUndo: bool
    //color: color
    //contentHeight: real
    //contentWidth: real
    //cursorDelegate: Component
    //cursorPosition: int
    //cursorRectangle: rectangle
    //cursorVisible: bool
    //effectiveHorizontalAlignment: enumeration
    //font.bold: bool
    //font.capitalization: enumeration
    //font.family: string
    //font.hintingPreference: enumeration
    //font.italic: bool
    //font.kerning: bool
    //font.letterSpacing: real
    //font.pixelSize: int
    //font.pointSize: real
    //font.preferShaping: bool
    //font.strikeout: bool
    //font.styleName: string
    //font.underline: bool
    //font.weight: enumeration
    //font.wordSpacing: real
    //horizontalAlignment: enumeration
    //hoveredLink: string
    //inputMethodComposing: bool
    //inputMethodHints: enumeration
    //leftPadding: real
    //length: int
    //lineCount: int
    //mouseSelectionMode: enumeration
    //overwriteMode: bool
    //padding: real
    //persistentSelection: bool
    //preeditText: string
    //readOnly: bool
    //renderType: enumeration
    //rightPadding: real
    //selectByKeyboard: bool
    //selectByMouse: bool
    //selectedText: string
    //selectedTextColor: color
    //selectionColor: color
    //selectionEnd: int
    //selectionStart: int
    //tabStopDistance: real
    //text: string
    //textDocument: TextDocument
    //textFormat: enumeration
    //textMargin: real
    //topPadding: real
    //verticalAlignment: enumeration
    //wrapMode: enumeration
    //clear()
    //copy()
    //cut()
    //deselect()
    //editingFinished()
    //insert(intposition,stringtext)
    //isRightToLeft(intstart,intend)
    //linkActivated(stringlink)
    //linkAt(realx,realy)
    //linkHovered(stringlink)
    //moveCursorSelection(intposition,SelectionModemode=TextEdit.SelectCharacters)
    //paste()
    //redo()
    //select(intstart,intend)
    //selectAll()
    //selectWord()
    //undo()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="TextField" complement="TextField">TextField{
    //background: Item
    //bottomInset: real
    //focusReason: enumeration
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //leftInset: real
    //palette: palette
    //placeholderText: string
    //placeholderTextColor: color
    //rightInset: real
    //topInset: real
    //pressAndHold(MouseEventevent)
    //pressed(MouseEventevent)
    //released(MouseEventevent)
    //acceptableInput: bool
    //activeFocusOnPress: bool
    //autoScroll: bool
    //bottomPadding: real
    //canPaste: bool
    //canRedo: bool
    //canUndo: bool
    //color: color
    //contentHeight: real
    //contentWidth: real
    //cursorDelegate: Component
    //cursorPosition: int
    //cursorRectangle: rectangle
    //cursorVisible: bool
    //displayText: string
    //echoMode: enumeration
    //effectiveHorizontalAlignment: enumeration
    //font.bold: bool
    //font.capitalization: enumeration
    //font.family: string
    //font.hintingPreference: enumeration
    //font.italic: bool
    //font.kerning: bool
    //font.letterSpacing: real
    //font.pixelSize: int
    //font.pointSize: real
    //font.preferShaping: bool
    //font.strikeout: bool
    //font.styleName: string
    //font.underline: bool
    //font.weight: enumeration
    //font.wordSpacing: real
    //horizontalAlignment: enumeration
    //inputMask: string
    //inputMethodComposing: bool
    //inputMethodHints: enumeration
    //leftPadding: real
    //length: int
    //maximumLength: int
    //mouseSelectionMode: enumeration
    //overwriteMode: bool
    //padding: real
    //passwordCharacter: string
    //passwordMaskDelay: int
    //persistentSelection: bool
    //preeditText: string
    //readOnly: bool
    //renderType: enumeration
    //rightPadding: real
    //selectByMouse: bool
    //selectedText: string
    //selectedTextColor: color
    //selectionColor: color
    //selectionEnd: int
    //selectionStart: int
    //text: string
    //topPadding: real
    //validator: Validator
    //verticalAlignment: enumeration
    //wrapMode: enumeration
    //accepted()
    //clear()
    //copy()
    //cut()
    //deselect()
    //editingFinished()
    //ensureVisible()
    //getText()
    //insert()
    //isRightToLeft()
    //moveCursorSelection()
    //paste()
    //positionAt()
    //positionToRectangle()
    //redo()
    //remove()
    //select()
    //selectAll()
    //selectWord()
    //textEdited()
    //undo()
}</snippet>
  <snippet group="QML" trigger="TextFieldStyle" complement="TextFieldStyle">TextFieldStyle{
    //background: Component
    //control: TextField
    //font: font
    //passwordCharacter: string
    //placeholderTextColor: color
    //renderType: int
    //selectedTextColor: color
    //selectionColor: color
    //textColor: color
}</snippet>
  <snippet group="QML" trigger="TextInput" complement="TextInput">TextInput{
    //acceptableInput: bool
    //activeFocusOnPress: bool
    //autoScroll: bool
    //bottomPadding: real
    //canPaste: bool
    //canRedo: bool
    //canUndo: bool
    //color: color
    //contentHeight: real
    //contentWidth: real
    //cursorDelegate: Component
    //cursorPosition: int
    //cursorRectangle: rectangle
    //cursorVisible: bool
    //displayText: string
    //echoMode: enumeration
    //effectiveHorizontalAlignment: enumeration
    //font.bold: bool
    //font.capitalization: enumeration
    //font.family: string
    //font.hintingPreference: enumeration
    //font.italic: bool
    //font.kerning: bool
    //font.letterSpacing: real
    //font.pixelSize: int
    //font.pointSize: real
    //font.preferShaping: bool
    //font.strikeout: bool
    //font.styleName: string
    //font.underline: bool
    //font.weight: enumeration
    //font.wordSpacing: real
    //horizontalAlignment: enumeration
    //inputMask: string
    //inputMethodComposing: bool
    //inputMethodHints: enumeration
    //leftPadding: real
    //length: int
    //maximumLength: int
    //mouseSelectionMode: enumeration
    //overwriteMode: bool
    //padding: real
    //passwordCharacter: string
    //passwordMaskDelay: int
    //persistentSelection: bool
    //preeditText: string
    //readOnly: bool
    //renderType: enumeration
    //rightPadding: real
    //selectByMouse: bool
    //selectedText: string
    //selectedTextColor: color
    //selectionColor: color
    //selectionEnd: int
    //selectionStart: int
    //text: string
    //topPadding: real
    //validator: Validator
    //verticalAlignment: enumeration
    //wrapMode: enumeration
    //accepted()
    //clear()
    //copy()
    //cut()
    //deselect()
    //editingFinished()
    //ensureVisible(intposition)
    //insert(intposition,stringtext)
    //isRightToLeft(intstart,intend)
    //moveCursorSelection(intposition,SelectionModemode=TextInput.SelectCharacters)
    //paste()
    //redo()
    //remove(intstart,intend)
    //select(intstart,intend)
    //selectAll()
    //selectWord()
    //textEdited()
    //undo()
    //
    //
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt(realx,realy)
    //forceActiveFocus()
    //forceActiveFocus(Qt: : FocusReasonreason)
    //nextItemInFocusChain(boolforward)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="TextMetrics" complement="TextMetrics">TextMetrics{
    //advanceWidth: real
    //boundingRect: rect
    //elide: enumeration
    //elideWidth: real
    //elidedText: string
    //font: font
    //height: real
    //text: string
    //tightBoundingRect: rect
    //width: real
}</snippet>
  <snippet group="QML" trigger="TextureImage" complement="TextureImage">TextureImage{
    //errorString(): string
    //height(): int
    //imageState(): TextureImageState
    //src(): url
    //width(): int
}</snippet>
  <snippet group="QML" trigger="TextureImageFactory" complement="TextureImageFactory">TextureImageFactory{
}</snippet>
  <snippet group="QML" trigger="Theme3D" complement="Theme3D">Theme3D{
    //ambientLightStrength: real
    //backgroundColor: color
    //backgroundEnabled: bool
    //baseColors: list&lt;ThemeColor&gt;
    //baseGradients: list&lt;ColorGradient&gt;
    //colorStyle: Theme3D.ColorStyle
    //font: font
    //gridEnabled: bool
    //gridLineColor: color
    //highlightLightStrength: real
    //labelBackgroundColor: color
    //labelBackgroundEnabled: bool
    //labelBorderEnabled: bool
    //labelTextColor: color
    //lightColor: color
    //lightStrength: real
    //multiHighlightColor: color
    //multiHighlightGradient: ColorGradient
    //singleHighlightColor: color
    //singleHighlightGradient: ColorGradient
    //type: Theme3D.Theme
    //windowColor: color
}</snippet>
  <snippet group="QML" trigger="ThemeColor" complement="ThemeColor">ThemeColor{
    //color: color
}</snippet>
  <snippet group="QML" trigger="ThresholdMask" complement="ThresholdMask">ThresholdMask{
    //cached: bool
    //maskSource: variant
    //source: variant
    //spread: real
    //threshold: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ThumbnailToolBar" complement="ThumbnailToolBar">ThumbnailToolBar{
    //iconicLivePreviewSource: url
    //iconicNotificationsEnabled: bool
    //iconicThumbnailSource: url
    //iconicLivePreviewRequested()
    //iconicThumbnailRequested()
}</snippet>
  <snippet group="QML" trigger="ThumbnailToolButton" complement="ThumbnailToolButton">ThumbnailToolButton{
    //dismissOnClick: bool
    //enabled: bool
    //flat: bool
    //iconSource: url
    //interactive: bool
    //tooltip: string
    //visible: bool
    //clicked()
}</snippet>
  <snippet group="QML" trigger="TiltReading" complement="TiltReading">TiltReading{
    //xRotation: qreal
    //yRotation: qreal
    //timestamp: quint64
}</snippet>
  <snippet group="QML" trigger="TiltSensor" complement="TiltSensor">TiltSensor{
    //calibrate()
    //active: bool
    //alwaysOn: bool
    //availableDataRates: list&lt;Range&gt;
    //axesOrientationMode: Sensor: : AxesOrientationMode
    //bufferSize: int
    //busy: bool
    //connectedToBackend: bool
    //currentOrientation: int
    //dataRate: int
    //description: string
    //efficientBufferSize: int
    //error: int
    //identifier: string
    //maxBufferSize: int
    //outputRange: int
    //outputRanges: list&lt;OutputRange&gt;
    //reading: SensorReading
    //skipDuplicates: bool
    //type: string
    //userOrientation: int
}</snippet>
  <snippet group="QML" trigger="TimeoutTransition" complement="TimeoutTransition">TimeoutTransition{
    //timeout: int
    //senderObject: QObject
    //signal: string
    //sourceState: bool
    //targetState: QAbstractState
    //targetStates: list&lt;QAbstractState&gt;
    //triggered()
}</snippet>
  <snippet group="QML" trigger="Timer" complement="Timer">Timer{
    //interval: int
    //repeat: bool
    //running: bool
    //triggeredOnStart: bool
    //restart()
    //start()
    //stop()
    //triggered()
}</snippet>
  <snippet group="QML" trigger="ToggleButton" complement="ToggleButton">ToggleButton{
    //isDefault: bool
    //menu: Menu
}</snippet>
  <snippet group="QML" trigger="ToggleButtonStyle" complement="ToggleButtonStyle">ToggleButtonStyle{
    //checkedDropShadowColor: color
    //checkedGradient: Gradient
    //control: ToggleButton
    //inactiveGradient: Gradient
    //uncheckedDropShadowColor: color
    //uncheckedGradient: Gradient
}</snippet>
  <snippet group="QML" trigger="ToolBar" complement="ToolBar">ToolBar{
    //position: enumeration
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentWidth: real
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ToolBarStyle" complement="ToolBarStyle">ToolBarStyle{
    //background: Component
    //menuButton: Component
    //panel: Component
}</snippet>
  <snippet group="QML" trigger="ToolButton" complement="ToolButton">ToolButton{
    //flat: bool
    //highlighted: bool
    //action: Action
    //autoExclusive: bool
    //autoRepeat: bool
    //autoRepeatDelay: int
    //autoRepeatInterval: int
    //checkable: bool
    //checked: bool
    //display: enumeration
    //down: bool
    //icon.color: color
    //icon.height: int
    //icon.name: string
    //icon.source: url
    //icon.width: int
    //implicitIndicatorHeight: real
    //implicitIndicatorWidth: real
    //indicator: Item
    //pressX: real
    //pressY: real
    //pressed: bool
    //text: string
    //canceled()
    //clicked()
    //doubleClicked()
    //pressAndHold()
    //pressed()
    //released()
    //toggled()
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ToolSeparator" complement="ToolSeparator">ToolSeparator{
    //horizontal: bool
    //orientation: enumeration
    //vertical: bool
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="ToolTip" complement="ToolTip">ToolTip{
    //onDelay : I: { }
    //delay: int
    //onText : Stri: { }
    //text: string
    //onTimeout : I: { }
    //timeout: int
    //onTooltip : Toolt: { }
    //onVisible : Bo: { }
    //onVoid Hide: { }
    //onVoid Show(String Text,  Int Timeout = -: { }
    //activeFocus: bool
    //anchors.centerIn: Object
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomMargin: real
    //bottomPadding: real
    //clip: bool
    //closePolicy: enumeration
    //contentChildren: list&lt;Item&gt;
    //contentData: list&lt;Object&gt;
    //contentHeight: real
    //contentItem: Item
    //contentWidth: real
    //dim: bool
    //enabled: bool
    //enter: Transition
    //exit: Transition
    //focus: bool
    //font: font
    //height: real
    //horizontalPadding: real
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //implicitHeight: real
    //implicitWidth: real
    //leftInset: real
    //leftMargin: real
    //leftPadding: real
    //locale: Locale
    //margins: real
    //mirrored: bool
    //modal: bool
    //opacity: real
    //opened: bool
    //padding: real
    //palette: palette
    //parent: Item
    //rightInset: real
    //rightMargin: real
    //rightPadding: real
    //scale: real
    //spacing: real
    //topInset: real
    //topMargin: real
    //topPadding: real
    //transformOrigin: enumeration
    //verticalPadding: real
    //visible: bool
    //width: real
    //x: real
    //y: real
    //z: real
    //forceActiveFocus(reason=Qt.OtherFocusReason)
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="Torch" complement="Torch">Torch{
    //enabled: bool
    //power: int
}</snippet>
  <snippet group="QML" trigger="TorusGeometry" complement="TorusGeometry">TorusGeometry{
    //indexAttribute: Attribute
    //minorRadius: real
    //normalAttribute: Attribute
    //positionAttribute: Attribute
    //radius: real
    //rings: int
    //slices: int
    //texCoordAttribute: Attribute
}</snippet>
  <snippet group="QML" trigger="TorusMesh" complement="TorusMesh">TorusMesh{
    //minorRadius: real
    //radius: real
    //rings: int
    //slices: int
}</snippet>
  <snippet group="QML" trigger="TouchEventSequence" complement="TouchEventSequence">TouchEventSequence{
}</snippet>
  <snippet group="QML" trigger="TouchInputHandler3D" complement="TouchInputHandler3D">TouchInputHandler3D{
    //rotationEnabled: bool
    //selectionEnabled: bool
    //zoomAtTargetEnabled: bool
    //zoomEnabled: bool
}</snippet>
  <snippet group="QML" trigger="TouchPoint" complement="TouchPoint">TouchPoint{
    //area: rectangle(obsolete)
    //ellipseDiameters: size
    //pointId: int
    //pressed: bool
    //pressure: real
    //previousX: real
    //previousY: real
    //rotation: real
    //sceneX: real
    //sceneY: real
    //startX: real
    //startY: real
    //uniqueId: PointingDeviceUniqueId
    //velocity: vector2d
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="Trace" complement="Trace">Trace{
    //canceled: bool
    //channels: list&lt;strings&gt;
    //final: bool
    //opacity: qreal
    //traceId: int
}</snippet>
  <snippet group="QML" trigger="TraceCanvas" complement="TraceCanvas">TraceCanvas{
    //autoDestroy: bool
    //autoDestroyDelay: int
    //renderFunction: var
    //trace: var
    //renderSmoothedLine()
    //available: bool
    //canvasSize: size
    //canvasWindow: rect(obsolete)
    //context: object
    //contextType: string
    //renderStrategy: enumeration
    //renderTarget: enumeration
    //tileSize: size(obsolete)
    //cancelRequestAnimationFrame()
    //getContext()
    //imageLoaded()
    //isImageError()
    //isImageLoaded()
    //isImageLoading()
    //loadImage()
    //markDirty()
    //paint()
    //painted()
    //requestAnimationFrame()
    //requestPaint()
    //save()
    //toDataURL()
    //unloadImage()
}</snippet>
  <snippet group="QML" trigger="TraceInputArea" complement="TraceInputArea">TraceInputArea{
    //boundingBox: rect
    //canvasType: string
    //horizontalRulers: var
    //patternRecognitionMode: int
    //verticalRulers: var
    //maximumTouchPoints: int
    //minimumTouchPoints: int
    //mouseEnabled: bool
    //touchPoints: list&lt;TouchPoint&gt;
    //canceled()
    //gestureStarted()
    //pressed()
    //released()
    //touchUpdated()
    //updated()
}</snippet>
  <snippet group="QML" trigger="TraceInputKey" complement="TraceInputKey">TraceInputKey{
    //boundingBox: alias
    //canvasType: alias
    //horizontalRulers: alias
    //patternRecognitionMode: alias
    //verticalRulers: alias
    //weight: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="TraceInputKeyPanel" complement="TraceInputKeyPanel">TraceInputKeyPanel{
    //control: Item
    //traceMargins: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="TrailEmitter" complement="TrailEmitter">TrailEmitter{
    //emitHeight: real
    //emitRatePerParticle: real
    //emitShape: Shape
    //emitWidth: real
    //follow: string
    //velocityFromMovement: qreal
    //emitFollowParticles(Arrayparticles,Particlefollowed)
}</snippet>
  <snippet group="QML" trigger="Transaction" complement="Transaction">Transaction{
    //errorString: string
    //failureReason: enum
    //orderId: string
    //product: object
    //status: enum
    //timestamp: time
}</snippet>
  <snippet group="QML" trigger="Transform" complement="Transform">Transform{
    //matrix: matrix4x4
    //rotation: quaternion
    //rotationX: real
    //rotationY: real
    //rotationZ: real
    //scale: real
    //scale3D: vector3d
    //translation: vector3d
    //isShareable: bool
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="Transition" complement="Transition">Transition{
    //animations: list&lt;Animation&gt;
    //enabled: bool
    //from: string
    //reversible: bool
    //running: bool
    //to: string
}</snippet>
  <snippet group="QML" trigger="Translate" complement="Translate">Translate{
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="TreeView" complement="TreeView">TreeView{
    //currentIndex: QModelIndex
    //itemDelegate: Component
    //model: QAbstractItemModel
    //rootIndex: QModelIndex
    //section.criteria: enumeration
    //section.delegate: Component
    //section.labelPositioning: enumeration
    //section.property: string
    //selection: ItemSelectionModel
    //activated(QModelIndexindex)
    //clicked(QModelIndexindex)
    //collapsed(QModelIndexindex)
    //doubleClicked(QModelIndexindex)
    //expanded(QModelIndexindex)
    //pressAndHold(QModelIndexindex)
    //contentItem: Item
    //flickableItem: Item
    //frameVisible: bool
    //highlightOnFocus: bool
    //horizontalScrollBarPolicy: enumeration
    //style: Component
    //verticalScrollBarPolicy: enumeration
    //viewport: Item
}</snippet>
  <snippet group="QML" trigger="TreeViewStyle" complement="TreeViewStyle">TreeViewStyle{
    //branchDelegate: Component
    //control: TreeView
    //headerDelegate: Component
    //indentation: int
    //itemDelegate: Component
    //rowDelegate: Component
    //control: ScrollView
    //corner: Component
    //decrementControl: Component
    //frame: Component
    //handle: Component
    //handleOverlap: int
    //incrementControl: Component
    //minimumHandleLength: int
    //scrollBarBackground: Component
    //scrollToClickedPosition: bool
    //transientScrollBars: bool
}</snippet>
  <snippet group="QML" trigger="Tumbler" complement="Tumbler">Tumbler{
    //count: int
    //currentIndex: int
    //currentItem: Item
    //delegate: Component
    //onDisplacement : Re: { }
    //model: variant
    //moving: bool
    //onTumbler : Tumbl: { }
    //visibleItemCount: int
    //wrap: bool
    //availableHeight: real
    //availableWidth: real
    //background: Item
    //bottomInset: real
    //bottomPadding: real
    //contentItem: Item
    //focusPolicy: enumeration
    //focusReason: enumeration
    //font: font
    //horizontalPadding: real
    //hoverEnabled: bool
    //hovered: bool
    //implicitBackgroundHeight: real
    //implicitBackgroundWidth: real
    //implicitContentHeight: real
    //implicitContentWidth: real
    //leftInset: real
    //leftPadding: real
    //locale: Locale
    //mirrored: bool
    //padding: real
    //palette: palette
    //rightInset: real
    //rightPadding: real
    //spacing: real
    //topInset: real
    //topPadding: real
    //verticalPadding: real
    //visualFocus: bool
    //wheelEnabled: bool
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="TumblerColumn" complement="TumblerColumn">TumblerColumn{
    //activeFocus: bool
    //columnForeground: Component
    //currentIndex: int
    //delegate: Component
    //highlight: Component
    //model: var
    //role: string
    //visible: bool
    //width: real
    //objectName: string
}</snippet>
  <snippet group="QML" trigger="TumblerStyle" complement="TumblerStyle">TumblerStyle{
    //background: Component
    //columnForeground: Component
    //control: Tumbler
    //delegate: Component
    //foreground: Component
    //frame: Component
    //highlight: Component
    //separator: Component
    //spacing: real(obsolete)
    //visibleItemCount: int
}</snippet>
  <snippet group="QML" trigger="Turbulence" complement="Turbulence">Turbulence{
    //noiseSource: url
    //strength: real
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="UniformAnimator" complement="UniformAnimator">UniformAnimator{
    //uniform: string
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //from: real
    //target: QtQuick: : Item
    //to: real
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="User" complement="User">User{
    //name: string
    //user: QPlaceUser
    //userId: string
}</snippet>
  <snippet group="QML" trigger="VBarModelMapper" complement="VBarModelMapper">VBarModelMapper{
    //firstBarSetColumn: int
    //firstRow: int
    //lastBarSetColumn: int
    //model: SomeModel
    //rowCount: int
    //series: AbstractBarSeries
}</snippet>
  <snippet group="QML" trigger="VBoxPlotModelMapper" complement="VBoxPlotModelMapper">VBoxPlotModelMapper{
    //firstBoxSetColumn: int
    //firstRow: int
    //lastBoxSetColumn: int
    //model: SomeModel
    //rowCount: int
    //series: AbstractBarSeries
}</snippet>
  <snippet group="QML" trigger="VCandlestickModelMapper" complement="VCandlestickModelMapper">VCandlestickModelMapper{
    //closeRow: int
    //firstSetColumn: int
    //highRow: int
    //lastSetColumn: int
    //lowRow: int
    //model: QAbstractItemModel
    //openRow: int
    //series: CandlestickSeries
    //timestampRow: int
}</snippet>
  <snippet group="QML" trigger="VPieModelMapper" complement="VPieModelMapper">VPieModelMapper{
    //firstRow: int
    //labelsColumn: int
    //model: SomeModel
    //rowCount: int
    //series: PieSeries
    //valuesColumn: int
}</snippet>
  <snippet group="QML" trigger="VXYModelMapper" complement="VXYModelMapper">VXYModelMapper{
    //firstRow: int
    //model: SomeModel
    //rowCount: int
    //series: XYSeries
    //xColumn: int
    //yColumn: int
}</snippet>
  <snippet group="QML" trigger="ValueAxis" complement="ValueAxis">ValueAxis{
    //labelFormat: real
    //max: real
    //min: real
    //minorTickCount: int
    //tickAnchor: real
    //tickCount: int
    //tickInterval: real
    //tickType: enumeration
    //applyNiceNumbers()
    //rangeChanged(stringmin,stringmax)
    //alignment: alignment
    //color: color
    //gridLineColor: color
    //gridVisible: bool
    //labelsAngle: int
    //labelsColor: color
    //labelsFont: font
    //labelsVisible: bool
    //lineVisible: bool
    //minorGridLineColor: color
    //minorGridVisible: bool
    //orientation: Qt.Orientation
    //reverse: alignment
    //shadesBorderColor: color
    //shadesColor: color
    //shadesVisible: bool
    //titleFont: font
    //titleText: string
    //titleVisible: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="ValueAxis3D" complement="ValueAxis3D">ValueAxis3D{
    //formatter: ValueAxis3DFormatter
    //labelFormat: string
    //reversed: bool
    //segmentCount: int
    //subSegmentCount: int
    //autoAdjustRange: bool
    //labelAutoRotation: real
    //labels: list
    //max: real
    //min: real
    //orientation: AbstractAxis3D.AxisOrientation
    //title: string
    //titleFixed: bool
    //titleVisible: bool
    //type: AbstractAxis3D.AxisType
}</snippet>
  <snippet group="QML" trigger="ValueAxis3DFormatter" complement="ValueAxis3DFormatter">ValueAxis3DFormatter{
}</snippet>
  <snippet group="QML" trigger="Vector3dAnimation" complement="Vector3dAnimation">Vector3dAnimation{
    //from: vector3d
    //to: vector3d
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //exclude: list&lt;Object&gt;
    //from: variant
    //properties: string
    //property: string
    //target: Object
    //targets: list&lt;Object&gt;
    //to: variant
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="VertexBlendAnimation" complement="VertexBlendAnimation">VertexBlendAnimation{
    //interpolator: real
    //morphTargets: list&lt;MorphTarget&gt;
    //target: GeometryRenderer
    //targetName: string
    //targetPositions: list&lt;real&gt;
    //animationName: string
    //animationType: enumeration
    //duration: real
    //position: real
}</snippet>
  <snippet group="QML" trigger="Video" complement="Video">Video{
    //audioRole: enumeration
    //autoLoad: bool
    //autoPlay: bool
    //availability: enumeration
    //bufferProgress: real
    //customAudioRole: string
    //duration: int
    //error: enumeration
    //errorString: string
    //fillMode: enumeration
    //hasAudio: bool
    //hasVideo: bool
    //loops: int
    //metaData: object
    //muted: bool
    //notifyInterval: int
    //orientation: int
    //playbackRate: real
    //playbackState: enumeration
    //playlist: Playlist
    //position: int
    //seekable: bool
    //source: url
    //status: enumeration
    //volume: real
    //pause()
    //paused()
    //play()
    //playing()
    //seek(offset)
    //stop()
    //stopped()
    //supportedAudioRoles()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="VideoOutput" complement="VideoOutput">VideoOutput{
    //autoOrientation: bool
    //contentRect: rectangle
    //fillMode: enumeration
    //filters: list&lt;object&gt;
    //orientation: int
    //source: variant
    //sourceRect: rectangle
    //QPointFmapNormalizedPointToItem(constQPointF&amp;point)
}</snippet>
  <snippet group="QML" trigger="ViewTransition" complement="ViewTransition">ViewTransition{
    //onDestination : Poi: { }
    //onIndex : I: { }
    //onItem : It: { }
    //onTargetindexes : Li: { }
    //onTargetitems : Li: { }
}</snippet>
  <snippet group="QML" trigger="Viewport" complement="Viewport">Viewport{
    //gamma: rect
    //normalizedRect: rect
    //childNodes: list&lt;Node&gt;
    //data: list&lt;QtQml: : QtObject&gt;
    //propertyTrackingOverrides: QJSValue
}</snippet>
  <snippet group="QML" trigger="VirtualKeyboardSettings" complement="VirtualKeyboardSettings">VirtualKeyboardSettings{
    //activeLocales: list&lt;string&gt;
    //availableLocales: list&lt;string&gt;
    //fullScreenMode: bool
    //locale: string
    //styleName: string
    //wordCandidateList.alwaysVisible: bool
    //wordCandidateList.autoHideDelay: int
}</snippet>
  <snippet group="QML" trigger="Wander" complement="Wander">Wander{
    //affectedParameter: AffectableParameter
    //pace: real
    //xVariance: real
    //yVariance: real
    //enabled: bool
    //groups: list&lt;string&gt;
    //once: bool
    //shape: Shape
    //system: ParticleSystem
    //whenCollidingWith: list&lt;string&gt;
    //affected(realx,realy)
}</snippet>
  <snippet group="QML" trigger="WavefrontMesh" complement="WavefrontMesh">WavefrontMesh{
    //lastError: enumeration
    //projectionPlaneV: vector3d
    //projectionPlaneW: vector3d
    //source: url
}</snippet>
  <snippet group="QML" trigger="WaylandClient" complement="WaylandClient">WaylandClient{
    //compositor: WaylandCompositor
    //groupId: int
    //processId: int
    //userId: int
}</snippet>
  <snippet group="QML" trigger="WaylandCompositor" complement="WaylandCompositor">WaylandCompositor{
    //created: bool
    //defaultOutput: WaylandOutput
    //defaultSeat: WaylandSeat
    //extensions: list
    //retainedSelection: bool
    //socketName: string
    //useHardwareIntegrationExtension: bool
    //addSocketDescriptor(fd)
    //destroyClient(client)
    //destroyClientForSurface(surface)
}</snippet>
  <snippet group="QML" trigger="WaylandHardwareLayer" complement="WaylandHardwareLayer">WaylandHardwareLayer{
    //stackingLevel: int
}</snippet>
  <snippet group="QML" trigger="WaylandOutput" complement="WaylandOutput">WaylandOutput{
    //automaticFrameCallback: bool
    //availableGeometry: rect
    //compositor: WaylandCompositor
    //geometry: rect
    //manufacturer: string
    //model: string
    //physicalSize: size
    //position: point
    //scaleFactor: int
    //sizeFollowsWindow: bool
    //subpixel: enum
    //transform: enum
    //window: Window
}</snippet>
  <snippet group="QML" trigger="WaylandQuickItem" complement="WaylandQuickItem">WaylandQuickItem{
    //compositor: WaylandCompositor
    //focusOnClick: bool
    //origin: enum
    //paintEnabled: bool
    //sizeFollowsSurface: bool
    //subsurfaceHandler: object
    //surface: WaylandSurface
    //setPrimary()
}</snippet>
  <snippet group="QML" trigger="WaylandSeat" complement="WaylandSeat">WaylandSeat{
}</snippet>
  <snippet group="QML" trigger="WaylandSurface" complement="WaylandSurface">WaylandSurface{
    //bufferScale: size
    //client: WaylandClient
    //contentOrientation: enum
    //cursorSurface: bool
    //hasContent: bool
    //origin: enum
    //size: size
    //childAdded(WaylandSurfacechild)
    //surfaceDestroyed()
}</snippet>
  <snippet group="QML" trigger="WaylandView" complement="WaylandView">WaylandView{
    //allowDiscardFrontBuffer: bool
    //bufferLocked: bool
    //output: WaylandOutput
    //surface: WaylandSurface
}</snippet>
  <snippet group="QML" trigger="Waypoint" complement="Waypoint">Waypoint{
    //altitude: real
    //bearing: real
    //coordinate: coordinate
    //latitude: real
    //longitude: real
    //metadata: VariantMap
}</snippet>
  <snippet group="QML" trigger="WebChannel" complement="WebChannel">WebChannel{
    //onId : Qstri: { }
    //registeredObjects: QQmlListProperty&lt;QObject&gt;
    //transports: QQmlListProperty&lt;QObject&gt;
}</snippet>
  <snippet group="QML" trigger="WebEngine" complement="WebEngine">WebEngine{
    //defaultProfile: WebEngineProfile
    //settings: WebEngineSettings
}</snippet>
  <snippet group="QML" trigger="WebEngineAction" complement="WebEngineAction">WebEngineAction{
    //enabled: bool
    //iconName: string
    //text: int
}</snippet>
  <snippet group="QML" trigger="WebEngineCertificateError" complement="WebEngineCertificateError">WebEngineCertificateError{
    //description: string
    //error: enumeration
    //overridable: bool
    //url: url
}</snippet>
  <snippet group="QML" trigger="WebEngineDownloadItem" complement="WebEngineDownloadItem">WebEngineDownloadItem{
    //id: int
    //interruptReason: enumeration
    //interruptReasonString: string
    //isFinished: bool
    //isPaused: bool
    //isSavePageDownload: bool
    //mimeType: string
    //path: string
    //receivedBytes: int
    //savePageFormat: enumeration
    //state: enumeration
    //totalBytes: int
    //type: enumeration(obsolete)
    //view: bool
}</snippet>
  <snippet group="QML" trigger="WebEngineHistory" complement="WebEngineHistory">WebEngineHistory{
    //backItems: WebEngineHistoryListModel
    //forwardItems: WebEngineHistoryListModel
    //items: WebEngineHistoryListModel
}</snippet>
  <snippet group="QML" trigger="WebEngineHistoryListModel" complement="WebEngineHistoryListModel">WebEngineHistoryListModel{
}</snippet>
  <snippet group="QML" trigger="WebEngineLoadRequest" complement="WebEngineLoadRequest">WebEngineLoadRequest{
    //errorCode: int
    //errorDomain: enumeration
    //errorString: string
    //status: enumeration
    //url: url
}</snippet>
  <snippet group="QML" trigger="WebEngineNavigationRequest" complement="WebEngineNavigationRequest">WebEngineNavigationRequest{
    //action: enumeration
    //isMainFrame: bool
    //navigationType: enumeration
    //url: url
}</snippet>
  <snippet group="QML" trigger="WebEngineNewViewRequest" complement="WebEngineNewViewRequest">WebEngineNewViewRequest{
    //destination: WebEngineView: : NewViewDestination
    //requestedUrl: QUrl
    //userInitiated: bool
    //openIn(WebEngineViewview)
}</snippet>
  <snippet group="QML" trigger="WebEngineProfile" complement="WebEngineProfile">WebEngineProfile{
    //cachePath: string
    //httpAcceptLanguage: string
    //httpCacheMaximumSize: int
    //httpCacheType: enumeration
    //httpUserAgent: string
    //offTheRecord: bool
    //persistentCookiesPolicy: enumeration
    //persistentStoragePath: string
    //spellCheckEnabled: bool
    //spellCheckLanguages: list&lt;string&gt;
    //storageName: string
    //userScripts: list&lt;WebEngineScript&gt;
    //downloadFinished(WebEngineDownloadItemdownload)
    //downloadRequested(WebEngineDownloadItemdownload)
}</snippet>
  <snippet group="QML" trigger="WebEngineScript" complement="WebEngineScript">WebEngineScript{
    //injectionPoint: enumeration
    //name: string
    //runOnSubframes: int
    //sourceCode: string
    //sourceUrl: url
    //worldId: enumeration
}</snippet>
  <snippet group="QML" trigger="WebEngineSettings" complement="WebEngineSettings">WebEngineSettings{
    //accelerated2dCanvasEnabled: bool
    //allowGeolocationOnInsecureOrigins: bool
    //allowRunningInsecureContent: bool
    //allowWindowActivationFromJavaScript: bool
    //autoLoadIconsForPage: bool
    //autoLoadImages: bool
    //defaultTextEncoding: string
    //dnsPrefetchEnabled: bool
    //errorPageEnabled: bool
    //focusOnNavigationEnabled: bool
    //fullscreenSupportEnabled: bool
    //hyperlinkAuditingEnabled: bool
    //javascriptCanAccessClipboard: bool
    //javascriptCanOpenWindows: bool
    //javascriptCanPaste: bool
    //javascriptEnabled: bool
    //linksIncludedInFocusChain: bool
    //localContentCanAccessFileUrls: bool
    //localContentCanAccessRemoteUrls: bool
    //localStorageEnabled: bool
    //playbackRequiresUserGesture: bool
    //pluginsEnabled: bool
    //printElementBackgrounds: bool
    //screenCaptureEnabled: bool
    //showScrollBars: bool
    //spatialNavigationEnabled: bool
    //touchIconsEnabled: bool
    //unknownUrlSchemePolicy: WebEngineSettings: : UnknownUrlSchemePolicy
    //webGLEnabled: bool
    //webRTCPublicInterfacesOnly: bool
}</snippet>
  <snippet group="QML" trigger="WebEngineView" complement="WebEngineView">WebEngineView{
    //ErrorDomain: enumeration
    //Feature: enumeration
    //FindFlags: enumeration
    //JavaScriptConsoleMessageLevel: enumeration
    //LoadStatus: enumeration
    //NewViewDestination: enumeration
    //PrintedPageOrientation: enumeration
    //PrintedPageSizeId: enumeration
    //RenderProcessTerminationStatus: enumeration
    //WebAction: enumeration
    //activeFocusOnPress: bool
    //audioMuted: bool
    //backgroundColor: bool
    //canGoBack: bool
    //canGoForward: bool
    //contentsSize: size
    //devToolsView: WebEngineView
    //icon: url
    //inspectedView: WebEngineView
    //isFullScreen: bool
    //loadProgress: int
    //loading: bool
    //navigationHistory: WebEngineHistory
    //profile: WebEngineProfile
    //recentlyAudible: bool
    //scrollPosition: point
    //settings: WebEngineSettings
    //title: string
    //url: url
    //userScripts: list&lt;WebEngineScript&gt;
    //webChannel: QQmlWebChannel
    //webChannelWorld: int
    //zoomFactor: real
    //activeFocusOnPressChanged(boolactiveFocusOnPress)
    //audioMutedChanged(boolmuted)
    //authenticationDialogRequested(AuthenticationDialogRequestrequest)
    //backgroundColorChanged()
    //certificateError(WebEngineCertificateErrorerror)
    //colorDialogRequested(ColorDialogRequestrequest)
    //contextMenuRequested(ContextMenuRequestrequest)
    //featurePermissionRequested(urlsecurityOrigin,Featurefeature)
    //fileDialogRequested(FileDialogRequestrequest)
    //formValidationMessageRequested(FormValidationMessageRequestrequest)(obsolete)
    //fullScreenRequested(FullScreenRequestrequest)
    //geometryChangeRequested(rectgeometry,rectframeGeometry)
    //javaScriptConsoleMessage(JavaScriptConsoleMessageLevellevel,stringmessage,intlineNumber,stringsourceID)
    //javaScriptDialogRequested(JavaScriptDialogRequestrequest)
    //linkHovered(urlhoveredUrl)
    //loadingChanged(WebEngineLoadRequestloadRequest)
    //navigationRequested(WebEngineNavigationRequestrequest)
    //newViewRequested(WebEngineNewViewRequestrequest)
    //pdfPrintingFinished(stringfilePath,boolsuccess)
    //printRequest()
    //quotaRequested(QuotaRequestrequest)
    //recentlyAudibleChanged(boolrecentlyAudible)
    //registerProtocolHandlerRequested(RegisterProtocolHandlerRequestrequest)
    //renderProcessTerminated(RenderProcessTerminationStatusterminationStatus,intexitCode)
    //wasRecentlyAudibleChanged(boolwasRecentlyAudible)
    //windowCloseRequested()
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="WebSocket" complement="WebSocket">WebSocket{
    //active: bool
    //errorString: QString
    //status: Status
    //url: QUrl
    //binaryMessageReceived(QStringmessage)
    //statusChanged(Statusstatus)
    //textMessageReceived(QStringmessage)
}</snippet>
  <snippet group="QML" trigger="WebSocketServer" complement="WebSocketServer">WebSocketServer{
    //accept: bool
    //errorString: QString
    //host: QString
    //listen: bool
    //name: QString
    //port: int
    //url: QUrl
    //clientConnected(WebSocketwebSocket)
}</snippet>
  <snippet group="QML" trigger="WebView" complement="WebView">WebView{
    //canGoBack: bool
    //canGoForward: bool
    //loadProgress: int
    //loading: bool
    //title: string
    //url: url
    //loadingChanged(WebViewLoadRequestloadRequest)
}</snippet>
  <snippet group="QML" trigger="WebViewLoadRequest" complement="WebViewLoadRequest">WebViewLoadRequest{
    //errorString: string
    //status: enumeration
    //url: url
}</snippet>
  <snippet group="QML" trigger="WheelEvent" complement="WheelEvent">WheelEvent{
    //accepted: bool
    //angleDelta: Point
    //buttons: int
    //modifiers: Modifiers
    //x: int
    //y: int
}</snippet>
  <snippet group="QML" trigger="Window" complement="Window">Window{
    //onActive : Bo: { }
    //active: bool
    //onActivefocusitem : It: { }
    //activeFocusItem: Item
    //color: color
    //contentItem: Item
    //onContentitem : It: { }
    //contentOrientation: Qt: : ScreenOrientation
    //data: list&lt;Object&gt;
    //flags: Qt: : WindowFlags
    //height: int
    //onHeight : I: { }
    //maximumHeight: int
    //maximumWidth: int
    //minimumHeight: int
    //minimumWidth: int
    //modality: Qt: : WindowModality
    //opacity: real
    //screen: variant
    //title: string
    //onVisibility : Qwindow::Visibili: { }
    //visibility: QWindow: : Visibility
    //visible: bool
    //width: int
    //onWidth : I: { }
    //onWindow : Wind: { }
    //x: int
    //y: int
    //alert(intmsec)
    //close()
    //closing(CloseEventclose)
    //hide()
    //lower()
    //raise()
    //requestActivate()
    //show()
    //showFullScreen()
    //showMaximized()
    //showMinimized()
    //showNormal()
}</snippet>
  <snippet group="QML" trigger="WlShell" complement="WlShell">WlShell{
}</snippet>
  <snippet group="QML" trigger="WlShellSurface" complement="WlShellSurface">WlShellSurface{
    //className: string
    //shell: WlShell
    //surface: WaylandSurface
    //title: string
    //windowType: enum
}</snippet>
  <snippet group="QML" trigger="WorkerScript" complement="WorkerScript">WorkerScript{
    //source: url
    //message(jsobjectmsg)
    //sendMessage(jsobjectmessage)
}</snippet>
  <snippet group="QML" trigger="XAnimator" complement="XAnimator">XAnimator{
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //from: real
    //target: QtQuick: : Item
    //to: real
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="XYPoint" complement="XYPoint">XYPoint{
    //x: real
    //y: real
}</snippet>
  <snippet group="QML" trigger="XYSeries" complement="XYSeries">XYSeries{
    //axisAngular: AbstractAxis
    //axisRadial: AbstractAxis
    //axisX: AbstractAxis
    //axisXTop: AbstractAxis
    //axisY: AbstractAxis
    //axisYRight: AbstractAxis
    //color: color
    //pointLabelsClipping: bool
    //pointLabelsColor: font
    //pointLabelsFont: font
    //pointLabelsFormat: string
    //pointLabelsVisible: bool
    //pointsVisible: bool
    //append(realx,realy)
    //clicked(pointpoint)
    //doubleClicked(pointpoint)
    //hovered(pointpoint,boolstate)
    //insert(intindex,realx,realy)
    //pointAdded(intindex)
    //pointRemoved(intindex)
    //pointReplaced(intindex)
    //pointsRemoved(intindex,intcount)
    //pointsReplaced()
    //pressed(pointpoint)
    //released(pointpoint)
    //remove(realx,realy)
    //remove(intindex)
    //removePoints(intindex,intcount)
    //replace(realoldX,realoldY,realnewX,realnewY)
    //name: string
    //opacity: real
    //type: enumeration
    //useOpenGL: bool
    //visible: bool
}</snippet>
  <snippet group="QML" trigger="XdgDecorationManagerV1" complement="XdgDecorationManagerV1">XdgDecorationManagerV1{
    //preferredMode: string
}</snippet>
  <snippet group="QML" trigger="XdgPopup" complement="XdgPopup">XdgPopup{
    //anchorEdges: enumeration
    //anchorRect: rect
    //configuredGeometry: rect
    //flipConstraints: enumeration
    //gravityEdges: rect
    //offset: point
    //parentXdgSurface: XdgSurface
    //positionerSize: size
    //resizeConstraints: enumeration
    //slideConstraints: enumeration
    //unconstrainedPosition: point
    //xdgSurface: XdgSurface
}</snippet>
  <snippet group="QML" trigger="XdgPopupV5" complement="XdgPopupV5">XdgPopupV5{
    //parentSurface: WaylandSurface
    //position: point
    //shell: XdgShellV5
    //surface: WaylandSurface
}</snippet>
  <snippet group="QML" trigger="XdgPopupV6" complement="XdgPopupV6">XdgPopupV6{
    //anchorEdges: enumeration
    //anchorRect: rect
    //configuredGeometry: rect
    //flipConstraints: enumeration
    //gravityEdges: rect
    //offset: point
    //parentXdgSurface: XdgSurfaceV6
    //positionerSize: size
    //resizeConstraints: enumeration
    //slideConstraints: enumeration
    //unconstrainedPosition: point
    //xdgSurface: XdgSurfaceV6
}</snippet>
  <snippet group="QML" trigger="XdgShell" complement="XdgShell">XdgShell{
    //pong(intserial)
    //popupCreated(XdgPopuppopup,XdgSurfacexdgSurface)
    //toplevelCreated(XdgTopleveltoplevel,XdgSurfacexdgSurface)
    //xdgSurfaceCreated(XdgSurfacexdgSurface)
}</snippet>
  <snippet group="QML" trigger="XdgShellV5" complement="XdgShellV5">XdgShellV5{
}</snippet>
  <snippet group="QML" trigger="XdgShellV6" complement="XdgShellV6">XdgShellV6{
    //pong(intserial)
    //popupCreated(XdgPopupV6popup,XdgSurfaceV6xdgSurface)
    //toplevelCreated(XdgToplevelV6toplevel,XdgSurfaceV6xdgSurface)
    //xdgSurfaceCreated(XdgSurfaceV6xdgSurface)
}</snippet>
  <snippet group="QML" trigger="XdgSurface" complement="XdgSurface">XdgSurface{
    //popup: XdgPopup
    //shell: XdgShell
    //surface: WaylandSurface
    //toplevel: XdgToplevel
    //windowGeometry: rect
    //windowType: enum
}</snippet>
  <snippet group="QML" trigger="XdgSurfaceV5" complement="XdgSurfaceV5">XdgSurfaceV5{
    //parentSurface: XdgSurfaceV5
    //shell: XdgShellV5
    //surface: WaylandSurface
    //title: string
    //windowType: enumeration
    //setTopLevel()
    //setTransient()
}</snippet>
  <snippet group="QML" trigger="XdgSurfaceV6" complement="XdgSurfaceV6">XdgSurfaceV6{
    //popup: XdgPopupV6
    //shell: XdgShellV6
    //surface: WaylandSurface
    //toplevel: XdgToplevelV6
    //windowGeometry: rect
    //windowType: enum
}</snippet>
  <snippet group="QML" trigger="XdgToplevel" complement="XdgToplevel">XdgToplevel{
    //activated: bool
    //appId: string
    //decorationMode: enumeration
    //fullscreen: bool
    //maxSize: size
    //maximized: bool
    //minSize: size
    //parentToplevel: XdgToplevel
    //resizing: bool
    //title: string
    //xdgSurface: XdgSurface
}</snippet>
  <snippet group="QML" trigger="XdgToplevelV6" complement="XdgToplevelV6">XdgToplevelV6{
    //activated: bool
    //appId: string
    //fullscreen: bool
    //maxSize: size
    //maximized: bool
    //minSize: size
    //parentToplevel: XdgToplevelV6
    //resizing: bool
    //title: string
}</snippet>
  <snippet group="QML" trigger="XmlListModel" complement="XmlListModel">XmlListModel{
    //count: int
    //namespaceDeclarations: string
    //progress: real
    //query: string
    //roles: list&lt;XmlRole&gt;
    //source: url
    //status: enumeration
    //xml: string
    //errorString()
    //reload()
}</snippet>
  <snippet group="QML" trigger="XmlRole" complement="XmlRole">XmlRole{
    //isKey: bool
    //name: string
    //query: string
}</snippet>
  <snippet group="QML" trigger="YAnimator" complement="YAnimator">YAnimator{
    //duration: int
    //easing.amplitude: real
    //easing.bezierCurve: list&lt;real&gt;
    //easing.overshoot: real
    //easing.period: real
    //easing.type: enumeration
    //from: real
    //target: QtQuick: : Item
    //to: real
    //alwaysRunToEnd: bool
    //loops: int
    //paused: bool
    //running: bool
    //complete()
    //finished()
    //pause()
    //restart()
    //resume()
    //start()
    //started()
    //stop()
    //stopped()
}</snippet>
  <snippet group="QML" trigger="ZoomBlur" complement="ZoomBlur">ZoomBlur{
    //cached: bool
    //horizontalOffset: real
    //length: real
    //samples: int
    //source: variant
    //transparentBorder: bool
    //verticalOffset: real
    //activeFocus: bool
    //activeFocusOnTab: bool
    //anchors.alignWhenCentered: bool
    //anchors.baseline: AnchorLine
    //anchors.baselineOffset: real
    //anchors.bottom: AnchorLine
    //anchors.bottomMargin: real
    //anchors.centerIn: Item
    //anchors.fill: Item
    //anchors.horizontalCenter: AnchorLine
    //anchors.horizontalCenterOffset: real
    //anchors.left: AnchorLine
    //anchors.leftMargin: real
    //anchors.margins: real
    //anchors.right: AnchorLine
    //anchors.rightMargin: real
    //anchors.top: AnchorLine
    //anchors.topMargin: real
    //anchors.verticalCenter: AnchorLine
    //anchors.verticalCenterOffset: real
    //antialiasing: bool
    //baselineOffset: int
    //children: list&lt;Item&gt;
    //childrenRect.height: real
    //childrenRect.width: real
    //childrenRect.x: real
    //childrenRect.y: real
    //clip: bool
    //containmentMask: QObject*
    //data: list&lt;Object&gt;
    //enabled: bool
    //focus: bool
    //height: real
    //implicitHeight: real
    //implicitWidth: real
    //layer.effect: Component
    //layer.enabled: bool
    //layer.format: enumeration
    //layer.mipmap: bool
    //layer.samplerName: string
    //layer.samples: enumeration
    //layer.smooth: bool
    //layer.sourceRect: rect
    //layer.textureMirroring: enumeration
    //layer.textureSize: size
    //layer.wrapMode: enumeration
    //opacity: real
    //parent: Item
    //resources: list&lt;Object&gt;
    //rotation: real
    //scale: real
    //smooth: bool
    //state: string
    //states: list&lt;State&gt;
    //transform: list&lt;Transform&gt;
    //transformOrigin: enumeration
    //transitions: list&lt;Transition&gt;
    //visible: bool
    //visibleChildren: list&lt;Item&gt;
    //width: real
    //x: real
    //y: real
    //z: real
    //childAt()
    //contains()
    //forceActiveFocus()
    //forceActiveFocus()
    //grabToImage()
    //mapFromGlobal()
    //mapFromItem()
    //mapFromItem()
    //mapToGlobal()
    //mapToItem()
    //mapToItem()
    //nextItemInFocusChain()
}</snippet>
  <snippet group="QML" trigger="alias" complement="QML property alias">
property alias $name$: $val$
  </snippet>
  <snippet group="QML" trigger="anchors" complement="(simple) (variant 1)">
anchors.$1$: $parent$.$3$
  </snippet>
  <snippet group="QML" trigger="anchors" complement="(all sides) (variant 2)">
anchors.left: $parent$.left
anchors.top: $parent$.top
anchors.right: $parent$.right
anchors.bottom: $parent$.bottom
  </snippet>
  <snippet group="QML" trigger="anchors" complement="centerIn">
anchors.centerIn: $parent$
  </snippet>
  <snippet group="QML" trigger="anchors" complement="fill">
anchors.fill: $parent$
  </snippet>
  <snippet group="QML" trigger="anchors" complement="horizontal">
anchors.horizontalCenter: $parent$.horizontalCenter
  </snippet>
  <snippet group="QML" trigger="anchors" complement="margins">
anchors.margins: $0$
  </snippet>
  <snippet group="QML" trigger="anchors" complement="vertical">
anchors.verticalCenter: $parent$.verticalCenter
  </snippet>
  <snippet group="QML" trigger="bool" complement="bool">bool{
}</snippet>
  <snippet group="QML" trigger="color" complement="color">color{
}</snippet>
  <snippet group="QML" trigger="coordinate" complement="coordinate">coordinate{
}</snippet>
  <snippet group="QML" trigger="date" complement="date">date{
}</snippet>
  <snippet group="QML" trigger="double" complement="double">double{
}</snippet>
  <snippet group="QML" trigger="enumeration" complement="enumeration">enumeration{
}</snippet>
  <snippet group="QML" trigger="font" complement="font">font{
}</snippet>
  <snippet group="QML" trigger="function" complement="function() {}">function $function_name$($argument$) {
    $// body...$
}</snippet>
  <snippet group="QML" trigger="geocircle" complement="geocircle">geocircle{
}</snippet>
  <snippet group="QML" trigger="geopath" complement="geopath">geopath{
}</snippet>
  <snippet group="QML" trigger="geopolygon" complement="geopolygon">geopolygon{
}</snippet>
  <snippet group="QML" trigger="georectangle" complement="georectangle">georectangle{
}</snippet>
  <snippet group="QML" trigger="geoshape" complement="geoshape">geoshape{
}</snippet>
  <snippet group="QML" trigger="int" complement="int">int{
}</snippet>
  <snippet group="QML" trigger="layout" complement="(all)">
Layout.fillWidth: $true$
Layout.fillHeight: $true$
  </snippet>
  <snippet group="QML" trigger="layout.fillHeight" complement="height">
Layout.fillHeight: $true$
  </snippet>
  <snippet group="QML" trigger="layout.fillWidth" complement="width">
Layout.fillWidth: $true$
  </snippet>
  <snippet group="QML" trigger="list" complement="list">list{
}</snippet>
  <snippet group="QML" trigger="matrix4x4" complement="matrix4x4">matrix4x4{
}</snippet>
  <snippet group="QML" trigger="mediaplayer-qml-dynamic" complement="mediaplayer-qml-dynamic">mediaplayer-qml-dynamic{
}</snippet>
  <snippet group="QML" trigger="palette" complement="palette">palette{
}</snippet>
  <snippet group="QML" trigger="point" complement="point">point{
}</snippet>
  <snippet group="QML" trigger="property" complement="QML property">property $var$ $name$
  </snippet>
  <snippet group="QML" trigger="quaternion" complement="quaternion">quaternion{
}</snippet>
  <snippet group="QML" trigger="real" complement="real">real{
}</snippet>
  <snippet group="QML" trigger="rect" complement="rect">rect{
}</snippet>
  <snippet group="QML" trigger="size" complement="size">size{
}</snippet>
  <snippet group="QML" trigger="string" complement="string">string{
}</snippet>
  <snippet group="QML" trigger="url" complement="url">url{
}</snippet>
  <snippet group="QML" trigger="var" complement="var">var{
}</snippet>
  <snippet group="QML" trigger="variant" complement="variant">variant{
}</snippet>
  <snippet group="QML" trigger="vector2d" complement="vector2d">vector2d{
}</snippet>
  <snippet group="QML" trigger="vector3d" complement="vector3d">vector3d{
}</snippet>
  <snippet group="QML" trigger="vector4d" complement="vector4d">vector4d{
}</snippet>
</snippets>
